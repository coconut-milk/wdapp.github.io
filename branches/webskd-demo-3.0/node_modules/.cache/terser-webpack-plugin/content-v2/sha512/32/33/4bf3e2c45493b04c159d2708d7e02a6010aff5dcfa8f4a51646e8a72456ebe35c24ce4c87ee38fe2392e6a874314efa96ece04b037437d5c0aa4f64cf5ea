{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"default\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"eval\"],\"mappings\":\"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,EAAAA,EAAAD,QAAAF,GAGAG,EAAAE,GAAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,QAAAA,OAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,aAAA,CAAiDmB,OAAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,GAAA,EAAAE,GAAA,iBAAAF,GAAAA,GAAAA,EAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,UAAA,CAAyCT,YAAAA,EAAAK,MAAAA,IACzC,EAAAE,GAAA,iBAAAF,EAAA,IAAA,IAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,GAAAA,EAAAqB,WACA,WAA2B,OAAArB,EAAA2B,SAC3B,WAAiC,OAAA3B,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAkB,EAAAC,GAAsD,OAAAlB,OAAAmB,UAAAC,eAAA3B,KAAAwB,EAAAC,IAGtDhC,EAAAmC,EAAA,GAIAnC,EAAAA,EAAAoC,EAAA,IAAA,CAAA,SAAAjC,OAAAD,QAAAF,qBAAA,aAAAqC,KAAA,uuBAAA,SAAAlC,OAAAD,QAAAF,qBAAA,aAAAqC,KAAA,4+nlCAAA,SAAAlC,OAAAD,SAAAmC,KAAA,sxDAAA,SAAAlC,OAAAD,QAAAF,qBAAA,aAAAqC,KAAA\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 0);\\n\"]}","code":"!function(Q){var I={};function B(F){if(I[F])return I[F].exports;var g=I[F]={i:F,l:!1,exports:{}};return Q[F].call(g.exports,g,g.exports,B),g.l=!0,g.exports}B.m=Q,B.c=I,B.d=function(Q,I,F){B.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:F})},B.r=function(Q){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(Q,\"__esModule\",{value:!0})},B.t=function(Q,I){if(1&I&&(Q=B(Q)),8&I)return Q;if(4&I&&\"object\"==typeof Q&&Q&&Q.__esModule)return Q;var F=Object.create(null);if(B.r(F),Object.defineProperty(F,\"default\",{enumerable:!0,value:Q}),2&I&&\"string\"!=typeof Q)for(var g in Q)B.d(F,g,function(I){return Q[I]}.bind(null,g));return F},B.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(I,\"a\",I),I},B.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},B.p=\"\",B(B.s=0)}([function(module,exports,__webpack_require__){\"use strict\";eval('\\n\\nvar _jquery = _interopRequireDefault(__webpack_require__(1));\\n\\n__webpack_require__(3);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\\n\\nwindow.$ = _jquery[\"default\"];//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tYWluLmpzPzFkNTAiXSwibmFtZXMiOlsid2luZG93IiwiJCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7OztBQUNBQSxNQUFNLENBQUNDLENBQVAsR0FBV0Esa0JBQVgiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAkIGZyb20gXCIuL3RlbXBsYXRlL2pzL2pxdWVyeS0zLjQuMFwiO1xuaW1wb3J0IFwiLi90ZW1wbGF0ZS9qcy9saXZlU0RLXCI7XG53aW5kb3cuJCA9ICQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///0\\n')},function(module,exports,__webpack_require__){\"use strict\";eval('/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\n/*!\\n * jQuery JavaScript Library v3.4.0\\n * https://jquery.com/\\n *\\n * Includes Sizzle.js\\n * https://sizzlejs.com/\\n *\\n * Copyright JS Foundation and other contributors\\n * Released under the MIT license\\n * https://jquery.org/license\\n *\\n * Date: 2019-04-10T19:48Z\\n */\\n(function (global, factory) {\\n  \"use strict\";\\n\\n  if (( false ? undefined : _typeof(module)) === \"object\" && _typeof(module.exports) === \"object\") {\\n    // For CommonJS and CommonJS-like environments where a proper `window`\\n    // is present, execute the factory and get jQuery.\\n    // For environments that do not have a `window` with a `document`\\n    // (such as Node.js), expose a factory as module.exports.\\n    // This accentuates the need for the creation of a real `window`.\\n    // e.g. var jQuery = require(\"jquery\")(window);\\n    // See ticket #14549 for more info.\\n    module.exports = global.document ? factory(global, true) : function (w) {\\n      if (!w.document) {\\n        throw new Error(\"jQuery requires a window with a document\");\\n      }\\n\\n      return factory(w);\\n    };\\n  } else {\\n    factory(global);\\n  } // Pass this if window is not defined yet\\n\\n})(typeof window !== \"undefined\" ? window : void 0, function (window, noGlobal) {\\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\\n  // enough that all such attempts are guarded in a try block.\\n  \"use strict\";\\n\\n  var arr = [];\\n  var document = window.document;\\n  var getProto = Object.getPrototypeOf;\\n  var _slice = arr.slice;\\n  var concat = arr.concat;\\n  var push = arr.push;\\n  var indexOf = arr.indexOf;\\n  var class2type = {};\\n  var toString = class2type.toString;\\n  var hasOwn = class2type.hasOwnProperty;\\n  var fnToString = hasOwn.toString;\\n  var ObjectFunctionString = fnToString.call(Object);\\n  var support = {};\\n\\n  var isFunction = function isFunction(obj) {\\n    // Support: Chrome <=57, Firefox <=52\\n    // In some browsers, typeof returns \"function\" for HTML <object> elements\\n    // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\\n    // We don\\'t want to classify *any* DOM node as a function.\\n    return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\\n  };\\n\\n  var isWindow = function isWindow(obj) {\\n    return obj != null && obj === obj.window;\\n  };\\n\\n  var preservedScriptAttributes = {\\n    type: true,\\n    src: true,\\n    nonce: true,\\n    noModule: true\\n  };\\n\\n  function DOMEval(code, node, doc) {\\n    doc = doc || document;\\n    var i,\\n        val,\\n        script = doc.createElement(\"script\");\\n    script.text = code;\\n\\n    if (node) {\\n      for (i in preservedScriptAttributes) {\\n        // Support: Firefox 64+, Edge 18+\\n        // Some browsers don\\'t support the \"nonce\" property on scripts.\\n        // On the other hand, just using `getAttribute` is not enough as\\n        // the `nonce` attribute is reset to an empty string whenever it\\n        // becomes browsing-context connected.\\n        // See https://github.com/whatwg/html/issues/2369\\n        // See https://html.spec.whatwg.org/#nonce-attributes\\n        // The `node.getAttribute` check was added for the sake of\\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\\n        // via an object.\\n        val = node[i] || node.getAttribute && node.getAttribute(i);\\n\\n        if (val) {\\n          script.setAttribute(i, val);\\n        }\\n      }\\n    }\\n\\n    doc.head.appendChild(script).parentNode.removeChild(script);\\n  }\\n\\n  function toType(obj) {\\n    if (obj == null) {\\n      return obj + \"\";\\n    } // Support: Android <=2.3 only (functionish RegExp)\\n\\n\\n    return _typeof(obj) === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : _typeof(obj);\\n  }\\n  /* global Symbol */\\n  // Defining this global in .eslintrc.json would create a danger of using the global\\n  // unguarded in another place, it seems safer to define global only for this module\\n\\n\\n  var version = \"3.4.0\",\\n      // Define a local copy of jQuery\\n  jQuery = function jQuery(selector, context) {\\n    // The jQuery object is actually just the init constructor \\'enhanced\\'\\n    // Need init if jQuery is called (just allow error to be thrown if not included)\\n    return new jQuery.fn.init(selector, context);\\n  },\\n      // Support: Android <=4.0 only\\n  // Make sure we trim BOM and NBSP\\n  rtrim = /^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g;\\n\\n  jQuery.fn = jQuery.prototype = {\\n    // The current version of jQuery being used\\n    jquery: version,\\n    constructor: jQuery,\\n    // The default length of a jQuery object is 0\\n    length: 0,\\n    toArray: function toArray() {\\n      return _slice.call(this);\\n    },\\n    // Get the Nth element in the matched element set OR\\n    // Get the whole matched element set as a clean array\\n    get: function get(num) {\\n      // Return all the elements in a clean array\\n      if (num == null) {\\n        return _slice.call(this);\\n      } // Return just the one element from the set\\n\\n\\n      return num < 0 ? this[num + this.length] : this[num];\\n    },\\n    // Take an array of elements and push it onto the stack\\n    // (returning the new matched element set)\\n    pushStack: function pushStack(elems) {\\n      // Build a new jQuery matched element set\\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\\n\\n      ret.prevObject = this; // Return the newly-formed element set\\n\\n      return ret;\\n    },\\n    // Execute a callback for every element in the matched set.\\n    each: function each(callback) {\\n      return jQuery.each(this, callback);\\n    },\\n    map: function map(callback) {\\n      return this.pushStack(jQuery.map(this, function (elem, i) {\\n        return callback.call(elem, i, elem);\\n      }));\\n    },\\n    slice: function slice() {\\n      return this.pushStack(_slice.apply(this, arguments));\\n    },\\n    first: function first() {\\n      return this.eq(0);\\n    },\\n    last: function last() {\\n      return this.eq(-1);\\n    },\\n    eq: function eq(i) {\\n      var len = this.length,\\n          j = +i + (i < 0 ? len : 0);\\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\\n    },\\n    end: function end() {\\n      return this.prevObject || this.constructor();\\n    },\\n    // For internal use only.\\n    // Behaves like an Array\\'s method, not like a jQuery method.\\n    push: push,\\n    sort: arr.sort,\\n    splice: arr.splice\\n  };\\n\\n  jQuery.extend = jQuery.fn.extend = function () {\\n    var options,\\n        name,\\n        src,\\n        copy,\\n        copyIsArray,\\n        clone,\\n        target = arguments[0] || {},\\n        i = 1,\\n        length = arguments.length,\\n        deep = false; // Handle a deep copy situation\\n\\n    if (typeof target === \"boolean\") {\\n      deep = target; // Skip the boolean and the target\\n\\n      target = arguments[i] || {};\\n      i++;\\n    } // Handle case when target is a string or something (possible in deep copy)\\n\\n\\n    if (_typeof(target) !== \"object\" && !isFunction(target)) {\\n      target = {};\\n    } // Extend jQuery itself if only one argument is passed\\n\\n\\n    if (i === length) {\\n      target = this;\\n      i--;\\n    }\\n\\n    for (; i < length; i++) {\\n      // Only deal with non-null/undefined values\\n      if ((options = arguments[i]) != null) {\\n        // Extend the base object\\n        for (name in options) {\\n          copy = options[name]; // Prevent Object.prototype pollution\\n          // Prevent never-ending loop\\n\\n          if (name === \"__proto__\" || target === copy) {\\n            continue;\\n          } // Recurse if we\\'re merging plain objects or arrays\\n\\n\\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\\n            src = target[name]; // Ensure proper type for the source value\\n\\n            if (copyIsArray && !Array.isArray(src)) {\\n              clone = [];\\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\\n              clone = {};\\n            } else {\\n              clone = src;\\n            }\\n\\n            copyIsArray = false; // Never move original objects, clone them\\n\\n            target[name] = jQuery.extend(deep, clone, copy); // Don\\'t bring in undefined values\\n          } else if (copy !== undefined) {\\n            target[name] = copy;\\n          }\\n        }\\n      }\\n    } // Return the modified object\\n\\n\\n    return target;\\n  };\\n\\n  jQuery.extend({\\n    // Unique for each copy of jQuery on the page\\n    expando: \"jQuery\" + (version + Math.random()).replace(/\\\\D/g, \"\"),\\n    // Assume jQuery is ready without the ready module\\n    isReady: true,\\n    error: function error(msg) {\\n      throw new Error(msg);\\n    },\\n    noop: function noop() {},\\n    isPlainObject: function isPlainObject(obj) {\\n      var proto, Ctor; // Detect obvious negatives\\n      // Use toString instead of jQuery.type to catch host objects\\n\\n      if (!obj || toString.call(obj) !== \"[object Object]\") {\\n        return false;\\n      }\\n\\n      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain\\n\\n      if (!proto) {\\n        return true;\\n      } // Objects with prototype are plain iff they were constructed by a global Object function\\n\\n\\n      Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\\n      return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\\n    },\\n    isEmptyObject: function isEmptyObject(obj) {\\n      var name;\\n\\n      for (name in obj) {\\n        return false;\\n      }\\n\\n      return true;\\n    },\\n    // Evaluates a script in a global context\\n    globalEval: function globalEval(code, options) {\\n      DOMEval(code, {\\n        nonce: options && options.nonce\\n      });\\n    },\\n    each: function each(obj, callback) {\\n      var length,\\n          i = 0;\\n\\n      if (isArrayLike(obj)) {\\n        length = obj.length;\\n\\n        for (; i < length; i++) {\\n          if (callback.call(obj[i], i, obj[i]) === false) {\\n            break;\\n          }\\n        }\\n      } else {\\n        for (i in obj) {\\n          if (callback.call(obj[i], i, obj[i]) === false) {\\n            break;\\n          }\\n        }\\n      }\\n\\n      return obj;\\n    },\\n    // Support: Android <=4.0 only\\n    trim: function trim(text) {\\n      return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\\n    },\\n    // results is for internal usage only\\n    makeArray: function makeArray(arr, results) {\\n      var ret = results || [];\\n\\n      if (arr != null) {\\n        if (isArrayLike(Object(arr))) {\\n          jQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\\n        } else {\\n          push.call(ret, arr);\\n        }\\n      }\\n\\n      return ret;\\n    },\\n    inArray: function inArray(elem, arr, i) {\\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\\n    },\\n    // Support: Android <=4.0 only, PhantomJS 1 only\\n    // push.apply(_, arraylike) throws on ancient WebKit\\n    merge: function merge(first, second) {\\n      var len = +second.length,\\n          j = 0,\\n          i = first.length;\\n\\n      for (; j < len; j++) {\\n        first[i++] = second[j];\\n      }\\n\\n      first.length = i;\\n      return first;\\n    },\\n    grep: function grep(elems, callback, invert) {\\n      var callbackInverse,\\n          matches = [],\\n          i = 0,\\n          length = elems.length,\\n          callbackExpect = !invert; // Go through the array, only saving the items\\n      // that pass the validator function\\n\\n      for (; i < length; i++) {\\n        callbackInverse = !callback(elems[i], i);\\n\\n        if (callbackInverse !== callbackExpect) {\\n          matches.push(elems[i]);\\n        }\\n      }\\n\\n      return matches;\\n    },\\n    // arg is for internal usage only\\n    map: function map(elems, callback, arg) {\\n      var length,\\n          value,\\n          i = 0,\\n          ret = []; // Go through the array, translating each of the items to their new values\\n\\n      if (isArrayLike(elems)) {\\n        length = elems.length;\\n\\n        for (; i < length; i++) {\\n          value = callback(elems[i], i, arg);\\n\\n          if (value != null) {\\n            ret.push(value);\\n          }\\n        } // Go through every key on the object,\\n\\n      } else {\\n        for (i in elems) {\\n          value = callback(elems[i], i, arg);\\n\\n          if (value != null) {\\n            ret.push(value);\\n          }\\n        }\\n      } // Flatten any nested arrays\\n\\n\\n      return concat.apply([], ret);\\n    },\\n    // A global GUID counter for objects\\n    guid: 1,\\n    // jQuery.support is not used in Core but other projects attach their\\n    // properties to it so it needs to exist.\\n    support: support\\n  });\\n\\n  if (typeof Symbol === \"function\") {\\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\\n  } // Populate the class2type map\\n\\n\\n  jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (i, name) {\\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\\n  });\\n\\n  function isArrayLike(obj) {\\n    // Support: real iOS 8.2 only (not reproducible in simulator)\\n    // `in` check used to prevent JIT error (gh-2145)\\n    // hasOwn isn\\'t used here due to false negatives\\n    // regarding Nodelist length in IE\\n    var length = !!obj && \"length\" in obj && obj.length,\\n        type = toType(obj);\\n\\n    if (isFunction(obj) || isWindow(obj)) {\\n      return false;\\n    }\\n\\n    return type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\\n  }\\n\\n  var Sizzle =\\n  /*!\\n  * Sizzle CSS Selector Engine v2.3.4\\n  * https://sizzlejs.com/\\n  *\\n  * Copyright JS Foundation and other contributors\\n  * Released under the MIT license\\n  * https://js.foundation/\\n  *\\n  * Date: 2019-04-08\\n  */\\n  function (window) {\\n    var i,\\n        support,\\n        Expr,\\n        getText,\\n        isXML,\\n        tokenize,\\n        compile,\\n        select,\\n        outermostContext,\\n        sortInput,\\n        hasDuplicate,\\n        // Local document vars\\n    setDocument,\\n        document,\\n        docElem,\\n        documentIsHTML,\\n        rbuggyQSA,\\n        rbuggyMatches,\\n        matches,\\n        contains,\\n        // Instance-specific data\\n    expando = \"sizzle\" + 1 * new Date(),\\n        preferredDoc = window.document,\\n        dirruns = 0,\\n        done = 0,\\n        classCache = createCache(),\\n        tokenCache = createCache(),\\n        compilerCache = createCache(),\\n        nonnativeSelectorCache = createCache(),\\n        sortOrder = function sortOrder(a, b) {\\n      if (a === b) {\\n        hasDuplicate = true;\\n      }\\n\\n      return 0;\\n    },\\n        // Instance methods\\n    hasOwn = {}.hasOwnProperty,\\n        arr = [],\\n        pop = arr.pop,\\n        push_native = arr.push,\\n        push = arr.push,\\n        slice = arr.slice,\\n        // Use a stripped-down indexOf as it\\'s faster than native\\n    // https://jsperf.com/thor-indexof-vs-for/5\\n    indexOf = function indexOf(list, elem) {\\n      var i = 0,\\n          len = list.length;\\n\\n      for (; i < len; i++) {\\n        if (list[i] === elem) {\\n          return i;\\n        }\\n      }\\n\\n      return -1;\\n    },\\n        booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\\n        // Regular expressions\\n    // http://www.w3.org/TR/css3-selectors/#whitespace\\n    whitespace = \"[\\\\\\\\x20\\\\\\\\t\\\\\\\\r\\\\\\\\n\\\\\\\\f]\",\\n        // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\\n    identifier = \"(?:\\\\\\\\\\\\\\\\.|[\\\\\\\\w-]|[^\\\\0-\\\\\\\\xa0])+\",\\n        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\\n    attributes = \"\\\\\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace + // Operator (capture 2)\\n    \"*([*^$|!~]?=)\" + whitespace + // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\\n    \"*(?:\\'((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\'])*)\\'|\\\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\\\\"])*)\\\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\\\\\]\",\\n        pseudos = \":(\" + identifier + \")(?:\\\\\\\\((\" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\\n    // 1. quoted (capture 3; capture 4 or capture 5)\\n    \"(\\'((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\'])*)\\'|\\\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\\\\"])*)\\\\\")|\" + // 2. simple (capture 6)\\n    \"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\()[\\\\\\\\]]|\" + attributes + \")*)|\" + // 3. anything else (capture 2)\\n    \".*\" + \")\\\\\\\\)|)\",\\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\\n    rwhitespace = new RegExp(whitespace + \"+\", \"g\"),\\n        rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\\\\\\\\\])(?:\\\\\\\\\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\\n        rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\\n        rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\\n        rdescend = new RegExp(whitespace + \"|>\"),\\n        rpseudo = new RegExp(pseudos),\\n        ridentifier = new RegExp(\"^\" + identifier + \"$\"),\\n        matchExpr = {\\n      \"ID\": new RegExp(\"^#(\" + identifier + \")\"),\\n      \"CLASS\": new RegExp(\"^\\\\\\\\.(\" + identifier + \")\"),\\n      \"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\"),\\n      \"ATTR\": new RegExp(\"^\" + attributes),\\n      \"PSEUDO\": new RegExp(\"^\" + pseudos),\\n      \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\\\\\d+)|))\" + whitespace + \"*\\\\\\\\)|)\", \"i\"),\\n      \"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\\n      // For use in libraries implementing .is()\\n      // We use this for POS matching in `select`\\n      \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\\\\\(\" + whitespace + \"*((?:-\\\\\\\\d)?\\\\\\\\d*)\" + whitespace + \"*\\\\\\\\)|)(?=[^-]|$)\", \"i\")\\n    },\\n        rhtml = /HTML$/i,\\n        rinputs = /^(?:input|select|textarea|button)$/i,\\n        rheader = /^h\\\\d$/i,\\n        rnative = /^[^{]+\\\\{\\\\s*\\\\[native \\\\w/,\\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\\n    rquickExpr = /^(?:#([\\\\w-]+)|(\\\\w+)|\\\\.([\\\\w-]+))$/,\\n        rsibling = /[+~]/,\\n        // CSS escapes\\n    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\\n    runescape = new RegExp(\"\\\\\\\\\\\\\\\\([\\\\\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\\n        funescape = function funescape(_, escaped, escapedWhitespace) {\\n      var high = \"0x\" + escaped - 0x10000; // NaN means non-codepoint\\n      // Support: Firefox<24\\n      // Workaround erroneous numeric interpretation of +\"0x\"\\n\\n      return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\\n      String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\\n      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\\n    },\\n        // CSS string/identifier serialization\\n    // https://drafts.csswg.org/cssom/#common-serializing-idioms\\n    rcssescape = /([\\\\0-\\\\x1f\\\\x7f]|^-?\\\\d)|^-$|[^\\\\0-\\\\x1f\\\\x7f-\\\\uFFFF\\\\w-]/g,\\n        fcssescape = function fcssescape(ch, asCodePoint) {\\n      if (asCodePoint) {\\n        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\\n        if (ch === \"\\\\0\") {\\n          return \"\\\\uFFFD\";\\n        } // Control characters and (dependent upon position) numbers get escaped as code points\\n\\n\\n        return ch.slice(0, -1) + \"\\\\\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\\n      } // Other potentially-special ASCII characters get backslash-escaped\\n\\n\\n      return \"\\\\\\\\\" + ch;\\n    },\\n        // Used for iframes\\n    // See setDocument()\\n    // Removing the function wrapper causes a \"Permission Denied\"\\n    // error in IE\\n    unloadHandler = function unloadHandler() {\\n      setDocument();\\n    },\\n        inDisabledFieldset = addCombinator(function (elem) {\\n      return elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\\n    }, {\\n      dir: \"parentNode\",\\n      next: \"legend\"\\n    }); // Optimize for push.apply( _, NodeList )\\n\\n\\n    try {\\n      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\\n      // Detect silently failing push.apply\\n\\n      arr[preferredDoc.childNodes.length].nodeType;\\n    } catch (e) {\\n      push = {\\n        apply: arr.length ? // Leverage slice if possible\\n        function (target, els) {\\n          push_native.apply(target, slice.call(els));\\n        } : // Support: IE<9\\n        // Otherwise append directly\\n        function (target, els) {\\n          var j = target.length,\\n              i = 0; // Can\\'t trust NodeList.length\\n\\n          while (target[j++] = els[i++]) {}\\n\\n          target.length = j - 1;\\n        }\\n      };\\n    }\\n\\n    function Sizzle(selector, context, results, seed) {\\n      var m,\\n          i,\\n          elem,\\n          nid,\\n          match,\\n          groups,\\n          newSelector,\\n          newContext = context && context.ownerDocument,\\n          // nodeType defaults to 9, since context defaults to document\\n      nodeType = context ? context.nodeType : 9;\\n      results = results || []; // Return early from calls with invalid selector or context\\n\\n      if (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\\n        return results;\\n      } // Try to shortcut find operations (as opposed to filters) in HTML documents\\n\\n\\n      if (!seed) {\\n        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {\\n          setDocument(context);\\n        }\\n\\n        context = context || document;\\n\\n        if (documentIsHTML) {\\n          // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\\n          // (excepting DocumentFragment context, where the methods don\\'t exist)\\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\\n            // ID selector\\n            if (m = match[1]) {\\n              // Document context\\n              if (nodeType === 9) {\\n                if (elem = context.getElementById(m)) {\\n                  // Support: IE, Opera, Webkit\\n                  // TODO: identify versions\\n                  // getElementById can match elements by name instead of ID\\n                  if (elem.id === m) {\\n                    results.push(elem);\\n                    return results;\\n                  }\\n                } else {\\n                  return results;\\n                } // Element context\\n\\n              } else {\\n                // Support: IE, Opera, Webkit\\n                // TODO: identify versions\\n                // getElementById can match elements by name instead of ID\\n                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\\n                  results.push(elem);\\n                  return results;\\n                }\\n              } // Type selector\\n\\n            } else if (match[2]) {\\n              push.apply(results, context.getElementsByTagName(selector));\\n              return results; // Class selector\\n            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\\n              push.apply(results, context.getElementsByClassName(m));\\n              return results;\\n            }\\n          } // Take advantage of querySelectorAll\\n\\n\\n          if (support.qsa && !nonnativeSelectorCache[selector + \" \"] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only\\n          // Exclude object elements\\n          nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\")) {\\n            newSelector = selector;\\n            newContext = context; // qSA considers elements outside a scoping root when evaluating child or\\n            // descendant combinators, which is not what we want.\\n            // In such cases, we work around the behavior by prefixing every selector in the\\n            // list with an ID selector referencing the scope context.\\n            // Thanks to Andrew Dupont for this technique.\\n\\n            if (nodeType === 1 && rdescend.test(selector)) {\\n              // Capture the context ID, setting it first if necessary\\n              if (nid = context.getAttribute(\"id\")) {\\n                nid = nid.replace(rcssescape, fcssescape);\\n              } else {\\n                context.setAttribute(\"id\", nid = expando);\\n              } // Prefix every selector in the list\\n\\n\\n              groups = tokenize(selector);\\n              i = groups.length;\\n\\n              while (i--) {\\n                groups[i] = \"#\" + nid + \" \" + toSelector(groups[i]);\\n              }\\n\\n              newSelector = groups.join(\",\"); // Expand context for sibling selectors\\n\\n              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;\\n            }\\n\\n            try {\\n              push.apply(results, newContext.querySelectorAll(newSelector));\\n              return results;\\n            } catch (qsaError) {\\n              nonnativeSelectorCache(selector, true);\\n            } finally {\\n              if (nid === expando) {\\n                context.removeAttribute(\"id\");\\n              }\\n            }\\n          }\\n        }\\n      } // All others\\n\\n\\n      return select(selector.replace(rtrim, \"$1\"), context, results, seed);\\n    }\\n    /**\\n     * Create key-value caches of limited size\\n     * @returns {function(string, object)} Returns the Object data after storing it on itself with\\n     *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\\n     *  deleting the oldest entry\\n     */\\n\\n\\n    function createCache() {\\n      var keys = [];\\n\\n      function cache(key, value) {\\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\\n        if (keys.push(key + \" \") > Expr.cacheLength) {\\n          // Only keep the most recent entries\\n          delete cache[keys.shift()];\\n        }\\n\\n        return cache[key + \" \"] = value;\\n      }\\n\\n      return cache;\\n    }\\n    /**\\n     * Mark a function for special use by Sizzle\\n     * @param {Function} fn The function to mark\\n     */\\n\\n\\n    function markFunction(fn) {\\n      fn[expando] = true;\\n      return fn;\\n    }\\n    /**\\n     * Support testing using an element\\n     * @param {Function} fn Passed the created element and returns a boolean result\\n     */\\n\\n\\n    function assert(fn) {\\n      var el = document.createElement(\"fieldset\");\\n\\n      try {\\n        return !!fn(el);\\n      } catch (e) {\\n        return false;\\n      } finally {\\n        // Remove from its parent by default\\n        if (el.parentNode) {\\n          el.parentNode.removeChild(el);\\n        } // release memory in IE\\n\\n\\n        el = null;\\n      }\\n    }\\n    /**\\n     * Adds the same handler for all of the specified attrs\\n     * @param {String} attrs Pipe-separated list of attributes\\n     * @param {Function} handler The method that will be applied\\n     */\\n\\n\\n    function addHandle(attrs, handler) {\\n      var arr = attrs.split(\"|\"),\\n          i = arr.length;\\n\\n      while (i--) {\\n        Expr.attrHandle[arr[i]] = handler;\\n      }\\n    }\\n    /**\\n     * Checks document order of two siblings\\n     * @param {Element} a\\n     * @param {Element} b\\n     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\\n     */\\n\\n\\n    function siblingCheck(a, b) {\\n      var cur = b && a,\\n          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\\n\\n      if (diff) {\\n        return diff;\\n      } // Check if b follows a\\n\\n\\n      if (cur) {\\n        while (cur = cur.nextSibling) {\\n          if (cur === b) {\\n            return -1;\\n          }\\n        }\\n      }\\n\\n      return a ? 1 : -1;\\n    }\\n    /**\\n     * Returns a function to use in pseudos for input types\\n     * @param {String} type\\n     */\\n\\n\\n    function createInputPseudo(type) {\\n      return function (elem) {\\n        var name = elem.nodeName.toLowerCase();\\n        return name === \"input\" && elem.type === type;\\n      };\\n    }\\n    /**\\n     * Returns a function to use in pseudos for buttons\\n     * @param {String} type\\n     */\\n\\n\\n    function createButtonPseudo(type) {\\n      return function (elem) {\\n        var name = elem.nodeName.toLowerCase();\\n        return (name === \"input\" || name === \"button\") && elem.type === type;\\n      };\\n    }\\n    /**\\n     * Returns a function to use in pseudos for :enabled/:disabled\\n     * @param {Boolean} disabled true for :disabled; false for :enabled\\n     */\\n\\n\\n    function createDisabledPseudo(disabled) {\\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\\n      return function (elem) {\\n        // Only certain elements can match :enabled or :disabled\\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\\n        if (\"form\" in elem) {\\n          // Check for inherited disabledness on relevant non-disabled elements:\\n          // * listed form-associated elements in a disabled fieldset\\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\\n          // * option elements in a disabled optgroup\\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\\n          // All such elements have a \"form\" property.\\n          if (elem.parentNode && elem.disabled === false) {\\n            // Option elements defer to a parent optgroup if present\\n            if (\"label\" in elem) {\\n              if (\"label\" in elem.parentNode) {\\n                return elem.parentNode.disabled === disabled;\\n              } else {\\n                return elem.disabled === disabled;\\n              }\\n            } // Support: IE 6 - 11\\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\\n\\n\\n            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\\n\\n            /* jshint -W018 */\\n            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\\n          }\\n\\n          return elem.disabled === disabled; // Try to winnow out elements that can\\'t be disabled before trusting the disabled property.\\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn\\'t\\n          // even exist on them, let alone have a boolean value.\\n        } else if (\"label\" in elem) {\\n          return elem.disabled === disabled;\\n        } // Remaining elements are neither :enabled nor :disabled\\n\\n\\n        return false;\\n      };\\n    }\\n    /**\\n     * Returns a function to use in pseudos for positionals\\n     * @param {Function} fn\\n     */\\n\\n\\n    function createPositionalPseudo(fn) {\\n      return markFunction(function (argument) {\\n        argument = +argument;\\n        return markFunction(function (seed, matches) {\\n          var j,\\n              matchIndexes = fn([], seed.length, argument),\\n              i = matchIndexes.length; // Match elements found at the specified indexes\\n\\n          while (i--) {\\n            if (seed[j = matchIndexes[i]]) {\\n              seed[j] = !(matches[j] = seed[j]);\\n            }\\n          }\\n        });\\n      });\\n    }\\n    /**\\n     * Checks a node for validity as a Sizzle context\\n     * @param {Element|Object=} context\\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\\n     */\\n\\n\\n    function testContext(context) {\\n      return context && typeof context.getElementsByTagName !== \"undefined\" && context;\\n    } // Expose support vars for convenience\\n\\n\\n    support = Sizzle.support = {};\\n    /**\\n     * Detects XML nodes\\n     * @param {Element|Object} elem An element or a document\\n     * @returns {Boolean} True iff elem is a non-HTML XML node\\n     */\\n\\n    isXML = Sizzle.isXML = function (elem) {\\n      var namespace = elem.namespaceURI,\\n          docElem = (elem.ownerDocument || elem).documentElement; // Support: IE <=8\\n      // Assume HTML when documentElement doesn\\'t yet exist, such as inside loading iframes\\n      // https://bugs.jquery.com/ticket/4833\\n\\n      return !rhtml.test(namespace || docElem && docElem.nodeName || \"HTML\");\\n    };\\n    /**\\n     * Sets document-related variables once based on the current document\\n     * @param {Element|Object} [doc] An element or document object to use to set the document\\n     * @returns {Object} Returns the current document\\n     */\\n\\n\\n    setDocument = Sizzle.setDocument = function (node) {\\n      var hasCompare,\\n          subWindow,\\n          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\\n\\n      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\\n        return document;\\n      } // Update global variables\\n\\n\\n      document = doc;\\n      docElem = document.documentElement;\\n      documentIsHTML = !isXML(document); // Support: IE 9-11, Edge\\n      // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\\n\\n      if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\\n        // Support: IE 11, Edge\\n        if (subWindow.addEventListener) {\\n          subWindow.addEventListener(\"unload\", unloadHandler, false); // Support: IE 9 - 10 only\\n        } else if (subWindow.attachEvent) {\\n          subWindow.attachEvent(\"onunload\", unloadHandler);\\n        }\\n      }\\n      /* Attributes\\n      ---------------------------------------------------------------------- */\\n      // Support: IE<8\\n      // Verify that getAttribute really returns attributes and not properties\\n      // (excepting IE8 booleans)\\n\\n\\n      support.attributes = assert(function (el) {\\n        el.className = \"i\";\\n        return !el.getAttribute(\"className\");\\n      });\\n      /* getElement(s)By*\\n      ---------------------------------------------------------------------- */\\n      // Check if getElementsByTagName(\"*\") returns only elements\\n\\n      support.getElementsByTagName = assert(function (el) {\\n        el.appendChild(document.createComment(\"\"));\\n        return !el.getElementsByTagName(\"*\").length;\\n      }); // Support: IE<9\\n\\n      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\\n      // Check if getElementById returns elements by name\\n      // The broken getElementById methods don\\'t pick up programmatically-set names,\\n      // so use a roundabout getElementsByName test\\n\\n      support.getById = assert(function (el) {\\n        docElem.appendChild(el).id = expando;\\n        return !document.getElementsByName || !document.getElementsByName(expando).length;\\n      }); // ID filter and find\\n\\n      if (support.getById) {\\n        Expr.filter[\"ID\"] = function (id) {\\n          var attrId = id.replace(runescape, funescape);\\n          return function (elem) {\\n            return elem.getAttribute(\"id\") === attrId;\\n          };\\n        };\\n\\n        Expr.find[\"ID\"] = function (id, context) {\\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\\n            var elem = context.getElementById(id);\\n            return elem ? [elem] : [];\\n          }\\n        };\\n      } else {\\n        Expr.filter[\"ID\"] = function (id) {\\n          var attrId = id.replace(runescape, funescape);\\n          return function (elem) {\\n            var node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\\n            return node && node.value === attrId;\\n          };\\n        }; // Support: IE 6 - 7 only\\n        // getElementById is not reliable as a find shortcut\\n\\n\\n        Expr.find[\"ID\"] = function (id, context) {\\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\\n            var node,\\n                i,\\n                elems,\\n                elem = context.getElementById(id);\\n\\n            if (elem) {\\n              // Verify the id attribute\\n              node = elem.getAttributeNode(\"id\");\\n\\n              if (node && node.value === id) {\\n                return [elem];\\n              } // Fall back on getElementsByName\\n\\n\\n              elems = context.getElementsByName(id);\\n              i = 0;\\n\\n              while (elem = elems[i++]) {\\n                node = elem.getAttributeNode(\"id\");\\n\\n                if (node && node.value === id) {\\n                  return [elem];\\n                }\\n              }\\n            }\\n\\n            return [];\\n          }\\n        };\\n      } // Tag\\n\\n\\n      Expr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\\n        if (typeof context.getElementsByTagName !== \"undefined\") {\\n          return context.getElementsByTagName(tag); // DocumentFragment nodes don\\'t have gEBTN\\n        } else if (support.qsa) {\\n          return context.querySelectorAll(tag);\\n        }\\n      } : function (tag, context) {\\n        var elem,\\n            tmp = [],\\n            i = 0,\\n            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\\n        results = context.getElementsByTagName(tag); // Filter out possible comments\\n\\n        if (tag === \"*\") {\\n          while (elem = results[i++]) {\\n            if (elem.nodeType === 1) {\\n              tmp.push(elem);\\n            }\\n          }\\n\\n          return tmp;\\n        }\\n\\n        return results;\\n      }; // Class\\n\\n      Expr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\\n        if (typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML) {\\n          return context.getElementsByClassName(className);\\n        }\\n      };\\n      /* QSA/matchesSelector\\n      ---------------------------------------------------------------------- */\\n      // QSA and matchesSelector support\\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\\n\\n\\n      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\\n      // We allow this because of a bug in IE8/9 that throws an error\\n      // whenever `document.activeElement` is accessed on an iframe\\n      // So, we allow :focus to pass through QSA all the time to avoid the IE error\\n      // See https://bugs.jquery.com/ticket/13378\\n\\n      rbuggyQSA = [];\\n\\n      if (support.qsa = rnative.test(document.querySelectorAll)) {\\n        // Build QSA regex\\n        // Regex strategy adopted from Diego Perini\\n        assert(function (el) {\\n          // Select is set to empty string on purpose\\n          // This is to test IE\\'s treatment of not explicitly\\n          // setting a boolean content attribute,\\n          // since its presence should be enough\\n          // https://bugs.jquery.com/ticket/12359\\n          docElem.appendChild(el).innerHTML = \"<a id=\\'\" + expando + \"\\'></a>\" + \"<select id=\\'\" + expando + \"-\\\\r\\\\\\\\\\' msallowcapture=\\'\\'>\" + \"<option selected=\\'\\'></option></select>\"; // Support: IE8, Opera 11-12.16\\n          // Nothing should be selected when empty strings follow ^= or $= or *=\\n          // The test attribute must be unknown in Opera but \"safe\" for WinRT\\n          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\\n\\n          if (el.querySelectorAll(\"[msallowcapture^=\\'\\']\").length) {\\n            rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:\\'\\'|\\\\\"\\\\\")\");\\n          } // Support: IE8\\n          // Boolean attributes and \"value\" are not treated correctly\\n\\n\\n          if (!el.querySelectorAll(\"[selected]\").length) {\\n            rbuggyQSA.push(\"\\\\\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\\n          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\\n\\n\\n          if (!el.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\\n            rbuggyQSA.push(\"~=\");\\n          } // Webkit/Opera - :checked should return selected option elements\\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\\n          // IE8 throws error here and will not see later tests\\n\\n\\n          if (!el.querySelectorAll(\":checked\").length) {\\n            rbuggyQSA.push(\":checked\");\\n          } // Support: Safari 8+, iOS 8+\\n          // https://bugs.webkit.org/show_bug.cgi?id=136851\\n          // In-page `selector#id sibling-combinator selector` fails\\n\\n\\n          if (!el.querySelectorAll(\"a#\" + expando + \"+*\").length) {\\n            rbuggyQSA.push(\".#.+[+~]\");\\n          }\\n        });\\n        assert(function (el) {\\n          el.innerHTML = \"<a href=\\'\\' disabled=\\'disabled\\'></a>\" + \"<select disabled=\\'disabled\\'><option/></select>\"; // Support: Windows 8 Native Apps\\n          // The type and name attributes are restricted during .innerHTML assignment\\n\\n          var input = document.createElement(\"input\");\\n          input.setAttribute(\"type\", \"hidden\");\\n          el.appendChild(input).setAttribute(\"name\", \"D\"); // Support: IE8\\n          // Enforce case-sensitivity of name attribute\\n\\n          if (el.querySelectorAll(\"[name=d]\").length) {\\n            rbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\\n          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\\n          // IE8 throws error here and will not see later tests\\n\\n\\n          if (el.querySelectorAll(\":enabled\").length !== 2) {\\n            rbuggyQSA.push(\":enabled\", \":disabled\");\\n          } // Support: IE9-11+\\n          // IE\\'s :disabled selector does not pick up the children of disabled fieldsets\\n\\n\\n          docElem.appendChild(el).disabled = true;\\n\\n          if (el.querySelectorAll(\":disabled\").length !== 2) {\\n            rbuggyQSA.push(\":enabled\", \":disabled\");\\n          } // Opera 10-11 does not throw on post-comma invalid pseudos\\n\\n\\n          el.querySelectorAll(\"*,:x\");\\n          rbuggyQSA.push(\",.*:\");\\n        });\\n      }\\n\\n      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\\n        assert(function (el) {\\n          // Check to see if it\\'s possible to do matchesSelector\\n          // on a disconnected node (IE 9)\\n          support.disconnectedMatch = matches.call(el, \"*\"); // This should fail with an exception\\n          // Gecko does not error, returns false instead\\n\\n          matches.call(el, \"[s!=\\'\\']:x\");\\n          rbuggyMatches.push(\"!=\", pseudos);\\n        });\\n      }\\n\\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\\n      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\\n      /* Contains\\n      ---------------------------------------------------------------------- */\\n\\n      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\\n      // Purposefully self-exclusive\\n      // As in, an element does not contain itself\\n\\n      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\\n        var adown = a.nodeType === 9 ? a.documentElement : a,\\n            bup = b && b.parentNode;\\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\\n      } : function (a, b) {\\n        if (b) {\\n          while (b = b.parentNode) {\\n            if (b === a) {\\n              return true;\\n            }\\n          }\\n        }\\n\\n        return false;\\n      };\\n      /* Sorting\\n      ---------------------------------------------------------------------- */\\n      // Document order sorting\\n\\n      sortOrder = hasCompare ? function (a, b) {\\n        // Flag for duplicate removal\\n        if (a === b) {\\n          hasDuplicate = true;\\n          return 0;\\n        } // Sort on method existence if only one input has compareDocumentPosition\\n\\n\\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\\n\\n        if (compare) {\\n          return compare;\\n        } // Calculate position if both inputs belong to the same document\\n\\n\\n        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\\n        1; // Disconnected nodes\\n\\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\\n          // Choose the first element that is related to our preferred document\\n          if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\\n            return -1;\\n          }\\n\\n          if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\\n            return 1;\\n          } // Maintain original order\\n\\n\\n          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\\n        }\\n\\n        return compare & 4 ? -1 : 1;\\n      } : function (a, b) {\\n        // Exit early if the nodes are identical\\n        if (a === b) {\\n          hasDuplicate = true;\\n          return 0;\\n        }\\n\\n        var cur,\\n            i = 0,\\n            aup = a.parentNode,\\n            bup = b.parentNode,\\n            ap = [a],\\n            bp = [b]; // Parentless nodes are either documents or disconnected\\n\\n        if (!aup || !bup) {\\n          return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\\n        } else if (aup === bup) {\\n          return siblingCheck(a, b);\\n        } // Otherwise we need full lists of their ancestors for comparison\\n\\n\\n        cur = a;\\n\\n        while (cur = cur.parentNode) {\\n          ap.unshift(cur);\\n        }\\n\\n        cur = b;\\n\\n        while (cur = cur.parentNode) {\\n          bp.unshift(cur);\\n        } // Walk down the tree looking for a discrepancy\\n\\n\\n        while (ap[i] === bp[i]) {\\n          i++;\\n        }\\n\\n        return i ? // Do a sibling check if the nodes have a common ancestor\\n        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\\n        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\\n      };\\n      return document;\\n    };\\n\\n    Sizzle.matches = function (expr, elements) {\\n      return Sizzle(expr, null, null, elements);\\n    };\\n\\n    Sizzle.matchesSelector = function (elem, expr) {\\n      // Set document vars if needed\\n      if ((elem.ownerDocument || elem) !== document) {\\n        setDocument(elem);\\n      }\\n\\n      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + \" \"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\\n        try {\\n          var ret = matches.call(elem, expr); // IE 9\\'s matchesSelector returns false on disconnected nodes\\n\\n          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\\n          // fragment in IE 9\\n          elem.document && elem.document.nodeType !== 11) {\\n            return ret;\\n          }\\n        } catch (e) {\\n          nonnativeSelectorCache(expr, true);\\n        }\\n      }\\n\\n      return Sizzle(expr, document, null, [elem]).length > 0;\\n    };\\n\\n    Sizzle.contains = function (context, elem) {\\n      // Set document vars if needed\\n      if ((context.ownerDocument || context) !== document) {\\n        setDocument(context);\\n      }\\n\\n      return contains(context, elem);\\n    };\\n\\n    Sizzle.attr = function (elem, name) {\\n      // Set document vars if needed\\n      if ((elem.ownerDocument || elem) !== document) {\\n        setDocument(elem);\\n      }\\n\\n      var fn = Expr.attrHandle[name.toLowerCase()],\\n          // Don\\'t get fooled by Object.prototype properties (jQuery #13807)\\n      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\\n      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\\n    };\\n\\n    Sizzle.escape = function (sel) {\\n      return (sel + \"\").replace(rcssescape, fcssescape);\\n    };\\n\\n    Sizzle.error = function (msg) {\\n      throw new Error(\"Syntax error, unrecognized expression: \" + msg);\\n    };\\n    /**\\n     * Document sorting and removing duplicates\\n     * @param {ArrayLike} results\\n     */\\n\\n\\n    Sizzle.uniqueSort = function (results) {\\n      var elem,\\n          duplicates = [],\\n          j = 0,\\n          i = 0; // Unless we *know* we can detect duplicates, assume their presence\\n\\n      hasDuplicate = !support.detectDuplicates;\\n      sortInput = !support.sortStable && results.slice(0);\\n      results.sort(sortOrder);\\n\\n      if (hasDuplicate) {\\n        while (elem = results[i++]) {\\n          if (elem === results[i]) {\\n            j = duplicates.push(i);\\n          }\\n        }\\n\\n        while (j--) {\\n          results.splice(duplicates[j], 1);\\n        }\\n      } // Clear input after sorting to release objects\\n      // See https://github.com/jquery/sizzle/pull/225\\n\\n\\n      sortInput = null;\\n      return results;\\n    };\\n    /**\\n     * Utility function for retrieving the text value of an array of DOM nodes\\n     * @param {Array|Element} elem\\n     */\\n\\n\\n    getText = Sizzle.getText = function (elem) {\\n      var node,\\n          ret = \"\",\\n          i = 0,\\n          nodeType = elem.nodeType;\\n\\n      if (!nodeType) {\\n        // If no nodeType, this is expected to be an array\\n        while (node = elem[i++]) {\\n          // Do not traverse comment nodes\\n          ret += getText(node);\\n        }\\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\\n        // Use textContent for elements\\n        // innerText usage removed for consistency of new lines (jQuery #11153)\\n        if (typeof elem.textContent === \"string\") {\\n          return elem.textContent;\\n        } else {\\n          // Traverse its children\\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\\n            ret += getText(elem);\\n          }\\n        }\\n      } else if (nodeType === 3 || nodeType === 4) {\\n        return elem.nodeValue;\\n      } // Do not include comment or processing instruction nodes\\n\\n\\n      return ret;\\n    };\\n\\n    Expr = Sizzle.selectors = {\\n      // Can be adjusted by the user\\n      cacheLength: 50,\\n      createPseudo: markFunction,\\n      match: matchExpr,\\n      attrHandle: {},\\n      find: {},\\n      relative: {\\n        \">\": {\\n          dir: \"parentNode\",\\n          first: true\\n        },\\n        \" \": {\\n          dir: \"parentNode\"\\n        },\\n        \"+\": {\\n          dir: \"previousSibling\",\\n          first: true\\n        },\\n        \"~\": {\\n          dir: \"previousSibling\"\\n        }\\n      },\\n      preFilter: {\\n        \"ATTR\": function ATTR(match) {\\n          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\\n\\n          match[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\\n\\n          if (match[2] === \"~=\") {\\n            match[3] = \" \" + match[3] + \" \";\\n          }\\n\\n          return match.slice(0, 4);\\n        },\\n        \"CHILD\": function CHILD(match) {\\n          /* matches from matchExpr[\"CHILD\"]\\n          1 type (only|nth|...)\\n          2 what (child|of-type)\\n          3 argument (even|odd|\\\\d*|\\\\d*n([+-]\\\\d+)?|...)\\n          4 xn-component of xn+y argument ([+-]?\\\\d*n|)\\n          5 sign of xn-component\\n          6 x of xn-component\\n          7 sign of y-component\\n          8 y of y-component\\n          */\\n          match[1] = match[1].toLowerCase();\\n\\n          if (match[1].slice(0, 3) === \"nth\") {\\n            // nth-* requires argument\\n            if (!match[3]) {\\n              Sizzle.error(match[0]);\\n            } // numeric x and y parameters for Expr.filter.CHILD\\n            // remember that false/true cast respectively to 0/1\\n\\n\\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\\n            match[5] = +(match[7] + match[8] || match[3] === \"odd\"); // other types prohibit arguments\\n          } else if (match[3]) {\\n            Sizzle.error(match[0]);\\n          }\\n\\n          return match;\\n        },\\n        \"PSEUDO\": function PSEUDO(match) {\\n          var excess,\\n              unquoted = !match[6] && match[2];\\n\\n          if (matchExpr[\"CHILD\"].test(match[0])) {\\n            return null;\\n          } // Accept quoted arguments as-is\\n\\n\\n          if (match[3]) {\\n            match[2] = match[4] || match[5] || \"\"; // Strip excess characters from unquoted arguments\\n          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\\n          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\\n          excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\\n            // excess is a negative index\\n            match[0] = match[0].slice(0, excess);\\n            match[2] = unquoted.slice(0, excess);\\n          } // Return only captures needed by the pseudo filter method (type and argument)\\n\\n\\n          return match.slice(0, 3);\\n        }\\n      },\\n      filter: {\\n        \"TAG\": function TAG(nodeNameSelector) {\\n          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\\n          return nodeNameSelector === \"*\" ? function () {\\n            return true;\\n          } : function (elem) {\\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\\n          };\\n        },\\n        \"CLASS\": function CLASS(className) {\\n          var pattern = classCache[className + \" \"];\\n          return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\\n            return pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\\n          });\\n        },\\n        \"ATTR\": function ATTR(name, operator, check) {\\n          return function (elem) {\\n            var result = Sizzle.attr(elem, name);\\n\\n            if (result == null) {\\n              return operator === \"!=\";\\n            }\\n\\n            if (!operator) {\\n              return true;\\n            }\\n\\n            result += \"\";\\n            return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\\n          };\\n        },\\n        \"CHILD\": function CHILD(type, what, argument, first, last) {\\n          var simple = type.slice(0, 3) !== \"nth\",\\n              forward = type.slice(-4) !== \"last\",\\n              ofType = what === \"of-type\";\\n          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\\n          function (elem) {\\n            return !!elem.parentNode;\\n          } : function (elem, context, xml) {\\n            var cache,\\n                uniqueCache,\\n                outerCache,\\n                node,\\n                nodeIndex,\\n                start,\\n                dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\\n                parent = elem.parentNode,\\n                name = ofType && elem.nodeName.toLowerCase(),\\n                useCache = !xml && !ofType,\\n                diff = false;\\n\\n            if (parent) {\\n              // :(first|last|only)-(child|of-type)\\n              if (simple) {\\n                while (dir) {\\n                  node = elem;\\n\\n                  while (node = node[dir]) {\\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\\n                      return false;\\n                    }\\n                  } // Reverse direction for :only-* (if we haven\\'t yet done so)\\n\\n\\n                  start = dir = type === \"only\" && !start && \"nextSibling\";\\n                }\\n\\n                return true;\\n              }\\n\\n              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\\n\\n              if (forward && useCache) {\\n                // Seek `elem` from a previously-cached index\\n                // ...in a gzip-friendly way\\n                node = parent;\\n                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\\n                // Defend against cloned attroperties (jQuery gh-1709)\\n\\n                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\\n                cache = uniqueCache[type] || [];\\n                nodeIndex = cache[0] === dirruns && cache[1];\\n                diff = nodeIndex && cache[2];\\n                node = nodeIndex && parent.childNodes[nodeIndex];\\n\\n                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\\n                diff = nodeIndex = 0) || start.pop()) {\\n                  // When found, cache indexes on `parent` and break\\n                  if (node.nodeType === 1 && ++diff && node === elem) {\\n                    uniqueCache[type] = [dirruns, nodeIndex, diff];\\n                    break;\\n                  }\\n                }\\n              } else {\\n                // Use previously-cached element index if available\\n                if (useCache) {\\n                  // ...in a gzip-friendly way\\n                  node = elem;\\n                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\\n                  // Defend against cloned attroperties (jQuery gh-1709)\\n\\n                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\\n                  cache = uniqueCache[type] || [];\\n                  nodeIndex = cache[0] === dirruns && cache[1];\\n                  diff = nodeIndex;\\n                } // xml :nth-child(...)\\n                // or :nth-last-child(...) or :nth(-last)?-of-type(...)\\n\\n\\n                if (diff === false) {\\n                  // Use the same loop as above to seek `elem` from the start\\n                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\\n                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\\n                      // Cache the index of each encountered element\\n                      if (useCache) {\\n                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\\n                        // Defend against cloned attroperties (jQuery gh-1709)\\n\\n                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\\n                        uniqueCache[type] = [dirruns, diff];\\n                      }\\n\\n                      if (node === elem) {\\n                        break;\\n                      }\\n                    }\\n                  }\\n                }\\n              } // Incorporate the offset, then check against cycle size\\n\\n\\n              diff -= last;\\n              return diff === first || diff % first === 0 && diff / first >= 0;\\n            }\\n          };\\n        },\\n        \"PSEUDO\": function PSEUDO(pseudo, argument) {\\n          // pseudo-class names are case-insensitive\\n          // http://www.w3.org/TR/selectors/#pseudo-classes\\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\\n          // Remember that setFilters inherits from pseudos\\n          var args,\\n              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo); // The user may use createPseudo to indicate that\\n          // arguments are needed to create the filter function\\n          // just as Sizzle does\\n\\n          if (fn[expando]) {\\n            return fn(argument);\\n          } // But maintain support for old signatures\\n\\n\\n          if (fn.length > 1) {\\n            args = [pseudo, pseudo, \"\", argument];\\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\\n              var idx,\\n                  matched = fn(seed, argument),\\n                  i = matched.length;\\n\\n              while (i--) {\\n                idx = indexOf(seed, matched[i]);\\n                seed[idx] = !(matches[idx] = matched[i]);\\n              }\\n            }) : function (elem) {\\n              return fn(elem, 0, args);\\n            };\\n          }\\n\\n          return fn;\\n        }\\n      },\\n      pseudos: {\\n        // Potentially complex pseudos\\n        \"not\": markFunction(function (selector) {\\n          // Trim the selector passed to compile\\n          // to avoid treating leading and trailing\\n          // spaces as combinators\\n          var input = [],\\n              results = [],\\n              matcher = compile(selector.replace(rtrim, \"$1\"));\\n          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {\\n            var elem,\\n                unmatched = matcher(seed, null, xml, []),\\n                i = seed.length; // Match elements unmatched by `matcher`\\n\\n            while (i--) {\\n              if (elem = unmatched[i]) {\\n                seed[i] = !(matches[i] = elem);\\n              }\\n            }\\n          }) : function (elem, context, xml) {\\n            input[0] = elem;\\n            matcher(input, null, xml, results); // Don\\'t keep the element (issue #299)\\n\\n            input[0] = null;\\n            return !results.pop();\\n          };\\n        }),\\n        \"has\": markFunction(function (selector) {\\n          return function (elem) {\\n            return Sizzle(selector, elem).length > 0;\\n          };\\n        }),\\n        \"contains\": markFunction(function (text) {\\n          text = text.replace(runescape, funescape);\\n          return function (elem) {\\n            return (elem.textContent || getText(elem)).indexOf(text) > -1;\\n          };\\n        }),\\n        // \"Whether an element is represented by a :lang() selector\\n        // is based solely on the element\\'s language value\\n        // being equal to the identifier C,\\n        // or beginning with the identifier C immediately followed by \"-\".\\n        // The matching of C against the element\\'s language value is performed case-insensitively.\\n        // The identifier C does not have to be a valid language name.\"\\n        // http://www.w3.org/TR/selectors/#lang-pseudo\\n        \"lang\": markFunction(function (lang) {\\n          // lang value must be a valid identifier\\n          if (!ridentifier.test(lang || \"\")) {\\n            Sizzle.error(\"unsupported lang: \" + lang);\\n          }\\n\\n          lang = lang.replace(runescape, funescape).toLowerCase();\\n          return function (elem) {\\n            var elemLang;\\n\\n            do {\\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\\n                elemLang = elemLang.toLowerCase();\\n                return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\\n              }\\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\\n\\n            return false;\\n          };\\n        }),\\n        // Miscellaneous\\n        \"target\": function target(elem) {\\n          var hash = window.location && window.location.hash;\\n          return hash && hash.slice(1) === elem.id;\\n        },\\n        \"root\": function root(elem) {\\n          return elem === docElem;\\n        },\\n        \"focus\": function focus(elem) {\\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\\n        },\\n        // Boolean properties\\n        \"enabled\": createDisabledPseudo(false),\\n        \"disabled\": createDisabledPseudo(true),\\n        \"checked\": function checked(elem) {\\n          // In CSS3, :checked should return both checked and selected elements\\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\\n          var nodeName = elem.nodeName.toLowerCase();\\n          return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\\n        },\\n        \"selected\": function selected(elem) {\\n          // Accessing this property makes selected-by-default\\n          // options in Safari work properly\\n          if (elem.parentNode) {\\n            elem.parentNode.selectedIndex;\\n          }\\n\\n          return elem.selected === true;\\n        },\\n        // Contents\\n        \"empty\": function empty(elem) {\\n          // http://www.w3.org/TR/selectors/#empty-pseudo\\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\\n          // nodeType < 6 works because attributes (2) do not appear as children\\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\\n            if (elem.nodeType < 6) {\\n              return false;\\n            }\\n          }\\n\\n          return true;\\n        },\\n        \"parent\": function parent(elem) {\\n          return !Expr.pseudos[\"empty\"](elem);\\n        },\\n        // Element/input types\\n        \"header\": function header(elem) {\\n          return rheader.test(elem.nodeName);\\n        },\\n        \"input\": function input(elem) {\\n          return rinputs.test(elem.nodeName);\\n        },\\n        \"button\": function button(elem) {\\n          var name = elem.nodeName.toLowerCase();\\n          return name === \"input\" && elem.type === \"button\" || name === \"button\";\\n        },\\n        \"text\": function text(elem) {\\n          var attr;\\n          return elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && ( // Support: IE<8\\n          // New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\\n          (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\\n        },\\n        // Position-in-collection\\n        \"first\": createPositionalPseudo(function () {\\n          return [0];\\n        }),\\n        \"last\": createPositionalPseudo(function (matchIndexes, length) {\\n          return [length - 1];\\n        }),\\n        \"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n          return [argument < 0 ? argument + length : argument];\\n        }),\\n        \"even\": createPositionalPseudo(function (matchIndexes, length) {\\n          var i = 0;\\n\\n          for (; i < length; i += 2) {\\n            matchIndexes.push(i);\\n          }\\n\\n          return matchIndexes;\\n        }),\\n        \"odd\": createPositionalPseudo(function (matchIndexes, length) {\\n          var i = 1;\\n\\n          for (; i < length; i += 2) {\\n            matchIndexes.push(i);\\n          }\\n\\n          return matchIndexes;\\n        }),\\n        \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n          var i = argument < 0 ? argument + length : argument > length ? length : argument;\\n\\n          for (; --i >= 0;) {\\n            matchIndexes.push(i);\\n          }\\n\\n          return matchIndexes;\\n        }),\\n        \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n          var i = argument < 0 ? argument + length : argument;\\n\\n          for (; ++i < length;) {\\n            matchIndexes.push(i);\\n          }\\n\\n          return matchIndexes;\\n        })\\n      }\\n    };\\n    Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"]; // Add button/input type pseudos\\n\\n    for (i in {\\n      radio: true,\\n      checkbox: true,\\n      file: true,\\n      password: true,\\n      image: true\\n    }) {\\n      Expr.pseudos[i] = createInputPseudo(i);\\n    }\\n\\n    for (i in {\\n      submit: true,\\n      reset: true\\n    }) {\\n      Expr.pseudos[i] = createButtonPseudo(i);\\n    } // Easy API for creating new setFilters\\n\\n\\n    function setFilters() {}\\n\\n    setFilters.prototype = Expr.filters = Expr.pseudos;\\n    Expr.setFilters = new setFilters();\\n\\n    tokenize = Sizzle.tokenize = function (selector, parseOnly) {\\n      var matched,\\n          match,\\n          tokens,\\n          type,\\n          soFar,\\n          groups,\\n          preFilters,\\n          cached = tokenCache[selector + \" \"];\\n\\n      if (cached) {\\n        return parseOnly ? 0 : cached.slice(0);\\n      }\\n\\n      soFar = selector;\\n      groups = [];\\n      preFilters = Expr.preFilter;\\n\\n      while (soFar) {\\n        // Comma and first run\\n        if (!matched || (match = rcomma.exec(soFar))) {\\n          if (match) {\\n            // Don\\'t consume trailing commas as valid\\n            soFar = soFar.slice(match[0].length) || soFar;\\n          }\\n\\n          groups.push(tokens = []);\\n        }\\n\\n        matched = false; // Combinators\\n\\n        if (match = rcombinators.exec(soFar)) {\\n          matched = match.shift();\\n          tokens.push({\\n            value: matched,\\n            // Cast descendant combinators to space\\n            type: match[0].replace(rtrim, \" \")\\n          });\\n          soFar = soFar.slice(matched.length);\\n        } // Filters\\n\\n\\n        for (type in Expr.filter) {\\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\\n            matched = match.shift();\\n            tokens.push({\\n              value: matched,\\n              type: type,\\n              matches: match\\n            });\\n            soFar = soFar.slice(matched.length);\\n          }\\n        }\\n\\n        if (!matched) {\\n          break;\\n        }\\n      } // Return the length of the invalid excess\\n      // if we\\'re just parsing\\n      // Otherwise, throw an error or return tokens\\n\\n\\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\\n      tokenCache(selector, groups).slice(0);\\n    };\\n\\n    function toSelector(tokens) {\\n      var i = 0,\\n          len = tokens.length,\\n          selector = \"\";\\n\\n      for (; i < len; i++) {\\n        selector += tokens[i].value;\\n      }\\n\\n      return selector;\\n    }\\n\\n    function addCombinator(matcher, combinator, base) {\\n      var dir = combinator.dir,\\n          skip = combinator.next,\\n          key = skip || dir,\\n          checkNonElements = base && key === \"parentNode\",\\n          doneName = done++;\\n      return combinator.first ? // Check against closest ancestor/preceding element\\n      function (elem, context, xml) {\\n        while (elem = elem[dir]) {\\n          if (elem.nodeType === 1 || checkNonElements) {\\n            return matcher(elem, context, xml);\\n          }\\n        }\\n\\n        return false;\\n      } : // Check against all ancestor/preceding elements\\n      function (elem, context, xml) {\\n        var oldCache,\\n            uniqueCache,\\n            outerCache,\\n            newCache = [dirruns, doneName]; // We can\\'t set arbitrary data on XML nodes, so they don\\'t benefit from combinator caching\\n\\n        if (xml) {\\n          while (elem = elem[dir]) {\\n            if (elem.nodeType === 1 || checkNonElements) {\\n              if (matcher(elem, context, xml)) {\\n                return true;\\n              }\\n            }\\n          }\\n        } else {\\n          while (elem = elem[dir]) {\\n            if (elem.nodeType === 1 || checkNonElements) {\\n              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\\n              // Defend against cloned attroperties (jQuery gh-1709)\\n\\n              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\\n\\n              if (skip && skip === elem.nodeName.toLowerCase()) {\\n                elem = elem[dir] || elem;\\n              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\\n                // Assign to newCache so results back-propagate to previous elements\\n                return newCache[2] = oldCache[2];\\n              } else {\\n                // Reuse newcache so results back-propagate to previous elements\\n                uniqueCache[key] = newCache; // A match means we\\'re done; a fail means we have to keep checking\\n\\n                if (newCache[2] = matcher(elem, context, xml)) {\\n                  return true;\\n                }\\n              }\\n            }\\n          }\\n        }\\n\\n        return false;\\n      };\\n    }\\n\\n    function elementMatcher(matchers) {\\n      return matchers.length > 1 ? function (elem, context, xml) {\\n        var i = matchers.length;\\n\\n        while (i--) {\\n          if (!matchers[i](elem, context, xml)) {\\n            return false;\\n          }\\n        }\\n\\n        return true;\\n      } : matchers[0];\\n    }\\n\\n    function multipleContexts(selector, contexts, results) {\\n      var i = 0,\\n          len = contexts.length;\\n\\n      for (; i < len; i++) {\\n        Sizzle(selector, contexts[i], results);\\n      }\\n\\n      return results;\\n    }\\n\\n    function condense(unmatched, map, filter, context, xml) {\\n      var elem,\\n          newUnmatched = [],\\n          i = 0,\\n          len = unmatched.length,\\n          mapped = map != null;\\n\\n      for (; i < len; i++) {\\n        if (elem = unmatched[i]) {\\n          if (!filter || filter(elem, context, xml)) {\\n            newUnmatched.push(elem);\\n\\n            if (mapped) {\\n              map.push(i);\\n            }\\n          }\\n        }\\n      }\\n\\n      return newUnmatched;\\n    }\\n\\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\\n      if (postFilter && !postFilter[expando]) {\\n        postFilter = setMatcher(postFilter);\\n      }\\n\\n      if (postFinder && !postFinder[expando]) {\\n        postFinder = setMatcher(postFinder, postSelector);\\n      }\\n\\n      return markFunction(function (seed, results, context, xml) {\\n        var temp,\\n            i,\\n            elem,\\n            preMap = [],\\n            postMap = [],\\n            preexisting = results.length,\\n            // Get initial elements from seed or context\\n        elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\\n        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\\n            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\\n        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\\n        [] : // ...otherwise use results directly\\n        results : matcherIn; // Find primary matches\\n\\n        if (matcher) {\\n          matcher(matcherIn, matcherOut, context, xml);\\n        } // Apply postFilter\\n\\n\\n        if (postFilter) {\\n          temp = condense(matcherOut, postMap);\\n          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\\n\\n          i = temp.length;\\n\\n          while (i--) {\\n            if (elem = temp[i]) {\\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\\n            }\\n          }\\n        }\\n\\n        if (seed) {\\n          if (postFinder || preFilter) {\\n            if (postFinder) {\\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\\n              temp = [];\\n              i = matcherOut.length;\\n\\n              while (i--) {\\n                if (elem = matcherOut[i]) {\\n                  // Restore matcherIn since elem is not yet a final match\\n                  temp.push(matcherIn[i] = elem);\\n                }\\n              }\\n\\n              postFinder(null, matcherOut = [], temp, xml);\\n            } // Move matched elements from seed to results to keep them synchronized\\n\\n\\n            i = matcherOut.length;\\n\\n            while (i--) {\\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\\n                seed[temp] = !(results[temp] = elem);\\n              }\\n            }\\n          } // Add elements to results, through postFinder if defined\\n\\n        } else {\\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\\n\\n          if (postFinder) {\\n            postFinder(null, results, matcherOut, xml);\\n          } else {\\n            push.apply(results, matcherOut);\\n          }\\n        }\\n      });\\n    }\\n\\n    function matcherFromTokens(tokens) {\\n      var checkContext,\\n          matcher,\\n          j,\\n          len = tokens.length,\\n          leadingRelative = Expr.relative[tokens[0].type],\\n          implicitRelative = leadingRelative || Expr.relative[\" \"],\\n          i = leadingRelative ? 1 : 0,\\n          // The foundational matcher ensures that elements are reachable from top-level context(s)\\n      matchContext = addCombinator(function (elem) {\\n        return elem === checkContext;\\n      }, implicitRelative, true),\\n          matchAnyContext = addCombinator(function (elem) {\\n        return indexOf(checkContext, elem) > -1;\\n      }, implicitRelative, true),\\n          matchers = [function (elem, context, xml) {\\n        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\\n\\n        checkContext = null;\\n        return ret;\\n      }];\\n\\n      for (; i < len; i++) {\\n        if (matcher = Expr.relative[tokens[i].type]) {\\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\\n        } else {\\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\\n\\n          if (matcher[expando]) {\\n            // Find the next relative operator (if any) for proper handling\\n            j = ++i;\\n\\n            for (; j < len; j++) {\\n              if (Expr.relative[tokens[j].type]) {\\n                break;\\n              }\\n            }\\n\\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\\n            tokens.slice(0, i - 1).concat({\\n              value: tokens[i - 2].type === \" \" ? \"*\" : \"\"\\n            })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\\n          }\\n\\n          matchers.push(matcher);\\n        }\\n      }\\n\\n      return elementMatcher(matchers);\\n    }\\n\\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\\n      var bySet = setMatchers.length > 0,\\n          byElement = elementMatchers.length > 0,\\n          superMatcher = function superMatcher(seed, context, xml, results, outermost) {\\n        var elem,\\n            j,\\n            matcher,\\n            matchedCount = 0,\\n            i = \"0\",\\n            unmatched = seed && [],\\n            setMatched = [],\\n            contextBackup = outermostContext,\\n            // We must always have either seed elements or outermost context\\n        elems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\\n            // Use integer dirruns iff this is the outermost matcher\\n        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\\n            len = elems.length;\\n\\n        if (outermost) {\\n          outermostContext = context === document || context || outermost;\\n        } // Add elements passing elementMatchers directly to results\\n        // Support: IE<9, Safari\\n        // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\\n\\n\\n        for (; i !== len && (elem = elems[i]) != null; i++) {\\n          if (byElement && elem) {\\n            j = 0;\\n\\n            if (!context && elem.ownerDocument !== document) {\\n              setDocument(elem);\\n              xml = !documentIsHTML;\\n            }\\n\\n            while (matcher = elementMatchers[j++]) {\\n              if (matcher(elem, context || document, xml)) {\\n                results.push(elem);\\n                break;\\n              }\\n            }\\n\\n            if (outermost) {\\n              dirruns = dirrunsUnique;\\n            }\\n          } // Track unmatched elements for set filters\\n\\n\\n          if (bySet) {\\n            // They will have gone through all possible matchers\\n            if (elem = !matcher && elem) {\\n              matchedCount--;\\n            } // Lengthen the array for every element, matched or not\\n\\n\\n            if (seed) {\\n              unmatched.push(elem);\\n            }\\n          }\\n        } // `i` is now the count of elements visited above, and adding it to `matchedCount`\\n        // makes the latter nonnegative.\\n\\n\\n        matchedCount += i; // Apply set filters to unmatched elements\\n        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\\n        // equals `i`), unless we didn\\'t visit _any_ elements in the above loop because we have\\n        // no element matchers and no seed.\\n        // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\\n        // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\\n        // numerically zero.\\n\\n        if (bySet && i !== matchedCount) {\\n          j = 0;\\n\\n          while (matcher = setMatchers[j++]) {\\n            matcher(unmatched, setMatched, context, xml);\\n          }\\n\\n          if (seed) {\\n            // Reintegrate element matches to eliminate the need for sorting\\n            if (matchedCount > 0) {\\n              while (i--) {\\n                if (!(unmatched[i] || setMatched[i])) {\\n                  setMatched[i] = pop.call(results);\\n                }\\n              }\\n            } // Discard index placeholder values to get only actual matches\\n\\n\\n            setMatched = condense(setMatched);\\n          } // Add matches to results\\n\\n\\n          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\\n\\n          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\\n            Sizzle.uniqueSort(results);\\n          }\\n        } // Override manipulation of globals by nested matchers\\n\\n\\n        if (outermost) {\\n          dirruns = dirrunsUnique;\\n          outermostContext = contextBackup;\\n        }\\n\\n        return unmatched;\\n      };\\n\\n      return bySet ? markFunction(superMatcher) : superMatcher;\\n    }\\n\\n    compile = Sizzle.compile = function (selector, match\\n    /* Internal Use Only */\\n    ) {\\n      var i,\\n          setMatchers = [],\\n          elementMatchers = [],\\n          cached = compilerCache[selector + \" \"];\\n\\n      if (!cached) {\\n        // Generate a function of recursive functions that can be used to check each element\\n        if (!match) {\\n          match = tokenize(selector);\\n        }\\n\\n        i = match.length;\\n\\n        while (i--) {\\n          cached = matcherFromTokens(match[i]);\\n\\n          if (cached[expando]) {\\n            setMatchers.push(cached);\\n          } else {\\n            elementMatchers.push(cached);\\n          }\\n        } // Cache the compiled function\\n\\n\\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\\n\\n        cached.selector = selector;\\n      }\\n\\n      return cached;\\n    };\\n    /**\\n     * A low-level selection function that works with Sizzle\\'s compiled\\n     *  selector functions\\n     * @param {String|Function} selector A selector or a pre-compiled\\n     *  selector function built with Sizzle.compile\\n     * @param {Element} context\\n     * @param {Array} [results]\\n     * @param {Array} [seed] A set of elements to match against\\n     */\\n\\n\\n    select = Sizzle.select = function (selector, context, results, seed) {\\n      var i,\\n          tokens,\\n          token,\\n          type,\\n          find,\\n          compiled = typeof selector === \"function\" && selector,\\n          match = !seed && tokenize(selector = compiled.selector || selector);\\n      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\\n      // (the latter of which guarantees us context)\\n\\n      if (match.length === 1) {\\n        // Reduce context if the leading compound selector is an ID\\n        tokens = match[0] = match[0].slice(0);\\n\\n        if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\\n          context = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\\n\\n          if (!context) {\\n            return results; // Precompiled matchers will still verify ancestry, so step up a level\\n          } else if (compiled) {\\n            context = context.parentNode;\\n          }\\n\\n          selector = selector.slice(tokens.shift().value.length);\\n        } // Fetch a seed set for right-to-left matching\\n\\n\\n        i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\\n\\n        while (i--) {\\n          token = tokens[i]; // Abort if we hit a combinator\\n\\n          if (Expr.relative[type = token.type]) {\\n            break;\\n          }\\n\\n          if (find = Expr.find[type]) {\\n            // Search, expanding context for leading sibling combinators\\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\\n              // If seed is empty or no tokens remain, we can return early\\n              tokens.splice(i, 1);\\n              selector = seed.length && toSelector(tokens);\\n\\n              if (!selector) {\\n                push.apply(results, seed);\\n                return results;\\n              }\\n\\n              break;\\n            }\\n          }\\n        }\\n      } // Compile and execute a filtering function if one is not provided\\n      // Provide `match` to avoid retokenization if we modified the selector above\\n\\n\\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\\n      return results;\\n    }; // One-time assignments\\n    // Sort stability\\n\\n\\n    support.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando; // Support: Chrome 14-35+\\n    // Always assume duplicates if they aren\\'t passed to the comparison function\\n\\n    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\\n\\n    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\\n    // Detached nodes confoundingly follow *each other*\\n\\n    support.sortDetached = assert(function (el) {\\n      // Should return 1, but returns 4 (following)\\n      return el.compareDocumentPosition(document.createElement(\"fieldset\")) & 1;\\n    }); // Support: IE<8\\n    // Prevent attribute/property \"interpolation\"\\n    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\\n\\n    if (!assert(function (el) {\\n      el.innerHTML = \"<a href=\\'#\\'></a>\";\\n      return el.firstChild.getAttribute(\"href\") === \"#\";\\n    })) {\\n      addHandle(\"type|href|height|width\", function (elem, name, isXML) {\\n        if (!isXML) {\\n          return elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\\n        }\\n      });\\n    } // Support: IE<9\\n    // Use defaultValue in place of getAttribute(\"value\")\\n\\n\\n    if (!support.attributes || !assert(function (el) {\\n      el.innerHTML = \"<input/>\";\\n      el.firstChild.setAttribute(\"value\", \"\");\\n      return el.firstChild.getAttribute(\"value\") === \"\";\\n    })) {\\n      addHandle(\"value\", function (elem, name, isXML) {\\n        if (!isXML && elem.nodeName.toLowerCase() === \"input\") {\\n          return elem.defaultValue;\\n        }\\n      });\\n    } // Support: IE<9\\n    // Use getAttributeNode to fetch booleans when getAttribute lies\\n\\n\\n    if (!assert(function (el) {\\n      return el.getAttribute(\"disabled\") == null;\\n    })) {\\n      addHandle(booleans, function (elem, name, isXML) {\\n        var val;\\n\\n        if (!isXML) {\\n          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\\n        }\\n      });\\n    }\\n\\n    return Sizzle;\\n  }(window);\\n\\n  jQuery.find = Sizzle;\\n  jQuery.expr = Sizzle.selectors; // Deprecated\\n\\n  jQuery.expr[\":\"] = jQuery.expr.pseudos;\\n  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\\n  jQuery.text = Sizzle.getText;\\n  jQuery.isXMLDoc = Sizzle.isXML;\\n  jQuery.contains = Sizzle.contains;\\n  jQuery.escapeSelector = Sizzle.escape;\\n\\n  var dir = function dir(elem, _dir, until) {\\n    var matched = [],\\n        truncate = until !== undefined;\\n\\n    while ((elem = elem[_dir]) && elem.nodeType !== 9) {\\n      if (elem.nodeType === 1) {\\n        if (truncate && jQuery(elem).is(until)) {\\n          break;\\n        }\\n\\n        matched.push(elem);\\n      }\\n    }\\n\\n    return matched;\\n  };\\n\\n  var _siblings = function siblings(n, elem) {\\n    var matched = [];\\n\\n    for (; n; n = n.nextSibling) {\\n      if (n.nodeType === 1 && n !== elem) {\\n        matched.push(n);\\n      }\\n    }\\n\\n    return matched;\\n  };\\n\\n  var rneedsContext = jQuery.expr.match.needsContext;\\n\\n  function nodeName(elem, name) {\\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\\n  }\\n\\n  ;\\n  var rsingleTag = /^<([a-z][^\\\\/\\\\0>:\\\\x20\\\\t\\\\r\\\\n\\\\f]*)[\\\\x20\\\\t\\\\r\\\\n\\\\f]*\\\\/?>(?:<\\\\/\\\\1>|)$/i; // Implement the identical functionality for filter and not\\n\\n  function winnow(elements, qualifier, not) {\\n    if (isFunction(qualifier)) {\\n      return jQuery.grep(elements, function (elem, i) {\\n        return !!qualifier.call(elem, i, elem) !== not;\\n      });\\n    } // Single element\\n\\n\\n    if (qualifier.nodeType) {\\n      return jQuery.grep(elements, function (elem) {\\n        return elem === qualifier !== not;\\n      });\\n    } // Arraylike of elements (jQuery, arguments, Array)\\n\\n\\n    if (typeof qualifier !== \"string\") {\\n      return jQuery.grep(elements, function (elem) {\\n        return indexOf.call(qualifier, elem) > -1 !== not;\\n      });\\n    } // Filtered directly for both simple and complex selectors\\n\\n\\n    return jQuery.filter(qualifier, elements, not);\\n  }\\n\\n  jQuery.filter = function (expr, elems, not) {\\n    var elem = elems[0];\\n\\n    if (not) {\\n      expr = \":not(\" + expr + \")\";\\n    }\\n\\n    if (elems.length === 1 && elem.nodeType === 1) {\\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\\n    }\\n\\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\\n      return elem.nodeType === 1;\\n    }));\\n  };\\n\\n  jQuery.fn.extend({\\n    find: function find(selector) {\\n      var i,\\n          ret,\\n          len = this.length,\\n          self = this;\\n\\n      if (typeof selector !== \"string\") {\\n        return this.pushStack(jQuery(selector).filter(function () {\\n          for (i = 0; i < len; i++) {\\n            if (jQuery.contains(self[i], this)) {\\n              return true;\\n            }\\n          }\\n        }));\\n      }\\n\\n      ret = this.pushStack([]);\\n\\n      for (i = 0; i < len; i++) {\\n        jQuery.find(selector, self[i], ret);\\n      }\\n\\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\\n    },\\n    filter: function filter(selector) {\\n      return this.pushStack(winnow(this, selector || [], false));\\n    },\\n    not: function not(selector) {\\n      return this.pushStack(winnow(this, selector || [], true));\\n    },\\n    is: function is(selector) {\\n      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\\n      // so $(\"p:first\").is(\"p:last\") won\\'t return true for a doc with two \"p\".\\n      typeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\\n    }\\n  }); // Initialize a jQuery object\\n  // A central reference to the root jQuery(document)\\n\\n  var rootjQuery,\\n      // A simple way to check for HTML strings\\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\\n  // Strict HTML recognition (#11290: must start with <)\\n  // Shortcut simple #id case for speed\\n  rquickExpr = /^(?:\\\\s*(<[\\\\w\\\\W]+>)[^>]*|#([\\\\w-]+))$/,\\n      init = jQuery.fn.init = function (selector, context, root) {\\n    var match, elem; // HANDLE: $(\"\"), $(null), $(undefined), $(false)\\n\\n    if (!selector) {\\n      return this;\\n    } // Method init() accepts an alternate rootjQuery\\n    // so migrate can support jQuery.sub (gh-2101)\\n\\n\\n    root = root || rootjQuery; // Handle HTML strings\\n\\n    if (typeof selector === \"string\") {\\n      if (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\\n        // Assume that strings that start and end with <> are HTML and skip the regex check\\n        match = [null, selector, null];\\n      } else {\\n        match = rquickExpr.exec(selector);\\n      } // Match html or make sure no context is specified for #id\\n\\n\\n      if (match && (match[1] || !context)) {\\n        // HANDLE: $(html) -> $(array)\\n        if (match[1]) {\\n          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\\n          // Intentionally let the error be thrown if parseHTML is not present\\n\\n          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\\n\\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\\n            for (match in context) {\\n              // Properties of context are called as methods if possible\\n              if (isFunction(this[match])) {\\n                this[match](context[match]); // ...and otherwise set as attributes\\n              } else {\\n                this.attr(match, context[match]);\\n              }\\n            }\\n          }\\n\\n          return this; // HANDLE: $(#id)\\n        } else {\\n          elem = document.getElementById(match[2]);\\n\\n          if (elem) {\\n            // Inject the element directly into the jQuery object\\n            this[0] = elem;\\n            this.length = 1;\\n          }\\n\\n          return this;\\n        } // HANDLE: $(expr, $(...))\\n\\n      } else if (!context || context.jquery) {\\n        return (context || root).find(selector); // HANDLE: $(expr, context)\\n        // (which is just equivalent to: $(context).find(expr)\\n      } else {\\n        return this.constructor(context).find(selector);\\n      } // HANDLE: $(DOMElement)\\n\\n    } else if (selector.nodeType) {\\n      this[0] = selector;\\n      this.length = 1;\\n      return this; // HANDLE: $(function)\\n      // Shortcut for document ready\\n    } else if (isFunction(selector)) {\\n      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present\\n      selector(jQuery);\\n    }\\n\\n    return jQuery.makeArray(selector, this);\\n  }; // Give the init function the jQuery prototype for later instantiation\\n\\n\\n  init.prototype = jQuery.fn; // Initialize central reference\\n\\n  rootjQuery = jQuery(document);\\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\\n      // Methods guaranteed to produce a unique set when starting from a unique set\\n  guaranteedUnique = {\\n    children: true,\\n    contents: true,\\n    next: true,\\n    prev: true\\n  };\\n  jQuery.fn.extend({\\n    has: function has(target) {\\n      var targets = jQuery(target, this),\\n          l = targets.length;\\n      return this.filter(function () {\\n        var i = 0;\\n\\n        for (; i < l; i++) {\\n          if (jQuery.contains(this, targets[i])) {\\n            return true;\\n          }\\n        }\\n      });\\n    },\\n    closest: function closest(selectors, context) {\\n      var cur,\\n          i = 0,\\n          l = this.length,\\n          matched = [],\\n          targets = typeof selectors !== \"string\" && jQuery(selectors); // Positional selectors never match, since there\\'s no _selection_ context\\n\\n      if (!rneedsContext.test(selectors)) {\\n        for (; i < l; i++) {\\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\\n            // Always skip document fragments\\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don\\'t pass non-elements to Sizzle\\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\\n              matched.push(cur);\\n              break;\\n            }\\n          }\\n        }\\n      }\\n\\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\\n    },\\n    // Determine the position of an element within the set\\n    index: function index(elem) {\\n      // No argument, return index in parent\\n      if (!elem) {\\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\\n      } // Index in selector\\n\\n\\n      if (typeof elem === \"string\") {\\n        return indexOf.call(jQuery(elem), this[0]);\\n      } // Locate the position of the desired element\\n\\n\\n      return indexOf.call(this, // If it receives a jQuery object, the first element is used\\n      elem.jquery ? elem[0] : elem);\\n    },\\n    add: function add(selector, context) {\\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\\n    },\\n    addBack: function addBack(selector) {\\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\\n    }\\n  });\\n\\n  function sibling(cur, dir) {\\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\\n\\n    return cur;\\n  }\\n\\n  jQuery.each({\\n    parent: function parent(elem) {\\n      var parent = elem.parentNode;\\n      return parent && parent.nodeType !== 11 ? parent : null;\\n    },\\n    parents: function parents(elem) {\\n      return dir(elem, \"parentNode\");\\n    },\\n    parentsUntil: function parentsUntil(elem, i, until) {\\n      return dir(elem, \"parentNode\", until);\\n    },\\n    next: function next(elem) {\\n      return sibling(elem, \"nextSibling\");\\n    },\\n    prev: function prev(elem) {\\n      return sibling(elem, \"previousSibling\");\\n    },\\n    nextAll: function nextAll(elem) {\\n      return dir(elem, \"nextSibling\");\\n    },\\n    prevAll: function prevAll(elem) {\\n      return dir(elem, \"previousSibling\");\\n    },\\n    nextUntil: function nextUntil(elem, i, until) {\\n      return dir(elem, \"nextSibling\", until);\\n    },\\n    prevUntil: function prevUntil(elem, i, until) {\\n      return dir(elem, \"previousSibling\", until);\\n    },\\n    siblings: function siblings(elem) {\\n      return _siblings((elem.parentNode || {}).firstChild, elem);\\n    },\\n    children: function children(elem) {\\n      return _siblings(elem.firstChild);\\n    },\\n    contents: function contents(elem) {\\n      if (typeof elem.contentDocument !== \"undefined\") {\\n        return elem.contentDocument;\\n      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\\n      // Treat the template element as a regular one in browsers that\\n      // don\\'t support it.\\n\\n\\n      if (nodeName(elem, \"template\")) {\\n        elem = elem.content || elem;\\n      }\\n\\n      return jQuery.merge([], elem.childNodes);\\n    }\\n  }, function (name, fn) {\\n    jQuery.fn[name] = function (until, selector) {\\n      var matched = jQuery.map(this, fn, until);\\n\\n      if (name.slice(-5) !== \"Until\") {\\n        selector = until;\\n      }\\n\\n      if (selector && typeof selector === \"string\") {\\n        matched = jQuery.filter(selector, matched);\\n      }\\n\\n      if (this.length > 1) {\\n        // Remove duplicates\\n        if (!guaranteedUnique[name]) {\\n          jQuery.uniqueSort(matched);\\n        } // Reverse order for parents* and prev-derivatives\\n\\n\\n        if (rparentsprev.test(name)) {\\n          matched.reverse();\\n        }\\n      }\\n\\n      return this.pushStack(matched);\\n    };\\n  });\\n  var rnothtmlwhite = /[^\\\\x20\\\\t\\\\r\\\\n\\\\f]+/g; // Convert String-formatted options into Object-formatted ones\\n\\n  function createOptions(options) {\\n    var object = {};\\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\\n      object[flag] = true;\\n    });\\n    return object;\\n  }\\n  /*\\n  * Create a callback list using the following parameters:\\n  *\\n  *\\toptions: an optional list of space-separated options that will change how\\n  *\\t\\t\\tthe callback list behaves or a more traditional option object\\n  *\\n  * By default a callback list will act like an event callback list and can be\\n  * \"fired\" multiple times.\\n  *\\n  * Possible options:\\n  *\\n  *\\tonce:\\t\\t\\twill ensure the callback list can only be fired once (like a Deferred)\\n  *\\n  *\\tmemory:\\t\\t\\twill keep track of previous values and will call any callback added\\n  *\\t\\t\\t\\t\\tafter the list has been fired right away with the latest \"memorized\"\\n  *\\t\\t\\t\\t\\tvalues (like a Deferred)\\n  *\\n  *\\tunique:\\t\\t\\twill ensure a callback can only be added once (no duplicate in the list)\\n  *\\n  *\\tstopOnFalse:\\tinterrupt callings when a callback returns false\\n  *\\n  */\\n\\n\\n  jQuery.Callbacks = function (options) {\\n    // Convert options from String-formatted to Object-formatted if needed\\n    // (we check in cache first)\\n    options = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\\n\\n    var // Flag to know if list is currently firing\\n    firing,\\n        // Last fire value for non-forgettable lists\\n    memory,\\n        // Flag to know if list was already fired\\n    _fired,\\n        // Flag to prevent firing\\n    _locked,\\n        // Actual callback list\\n    list = [],\\n        // Queue of execution data for repeatable lists\\n    queue = [],\\n        // Index of currently firing callback (modified by add/remove as needed)\\n    firingIndex = -1,\\n        // Fire callbacks\\n    fire = function fire() {\\n      // Enforce single-firing\\n      _locked = _locked || options.once; // Execute callbacks for all pending executions,\\n      // respecting firingIndex overrides and runtime changes\\n\\n      _fired = firing = true;\\n\\n      for (; queue.length; firingIndex = -1) {\\n        memory = queue.shift();\\n\\n        while (++firingIndex < list.length) {\\n          // Run callback and check for early termination\\n          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\\n            // Jump to end and forget the data so .add doesn\\'t re-fire\\n            firingIndex = list.length;\\n            memory = false;\\n          }\\n        }\\n      } // Forget the data if we\\'re done with it\\n\\n\\n      if (!options.memory) {\\n        memory = false;\\n      }\\n\\n      firing = false; // Clean up if we\\'re done firing for good\\n\\n      if (_locked) {\\n        // Keep an empty list if we have data for future add calls\\n        if (memory) {\\n          list = []; // Otherwise, this object is spent\\n        } else {\\n          list = \"\";\\n        }\\n      }\\n    },\\n        // Actual Callbacks object\\n    self = {\\n      // Add a callback or a collection of callbacks to the list\\n      add: function add() {\\n        if (list) {\\n          // If we have memory from a past run, we should fire after adding\\n          if (memory && !firing) {\\n            firingIndex = list.length - 1;\\n            queue.push(memory);\\n          }\\n\\n          (function add(args) {\\n            jQuery.each(args, function (_, arg) {\\n              if (isFunction(arg)) {\\n                if (!options.unique || !self.has(arg)) {\\n                  list.push(arg);\\n                }\\n              } else if (arg && arg.length && toType(arg) !== \"string\") {\\n                // Inspect recursively\\n                add(arg);\\n              }\\n            });\\n          })(arguments);\\n\\n          if (memory && !firing) {\\n            fire();\\n          }\\n        }\\n\\n        return this;\\n      },\\n      // Remove a callback from the list\\n      remove: function remove() {\\n        jQuery.each(arguments, function (_, arg) {\\n          var index;\\n\\n          while ((index = jQuery.inArray(arg, list, index)) > -1) {\\n            list.splice(index, 1); // Handle firing indexes\\n\\n            if (index <= firingIndex) {\\n              firingIndex--;\\n            }\\n          }\\n        });\\n        return this;\\n      },\\n      // Check if a given callback is in the list.\\n      // If no argument is given, return whether or not list has callbacks attached.\\n      has: function has(fn) {\\n        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\\n      },\\n      // Remove all callbacks from the list\\n      empty: function empty() {\\n        if (list) {\\n          list = [];\\n        }\\n\\n        return this;\\n      },\\n      // Disable .fire and .add\\n      // Abort any current/pending executions\\n      // Clear all callbacks and values\\n      disable: function disable() {\\n        _locked = queue = [];\\n        list = memory = \"\";\\n        return this;\\n      },\\n      disabled: function disabled() {\\n        return !list;\\n      },\\n      // Disable .fire\\n      // Also disable .add unless we have memory (since it would have no effect)\\n      // Abort any pending executions\\n      lock: function lock() {\\n        _locked = queue = [];\\n\\n        if (!memory && !firing) {\\n          list = memory = \"\";\\n        }\\n\\n        return this;\\n      },\\n      locked: function locked() {\\n        return !!_locked;\\n      },\\n      // Call all callbacks with the given context and arguments\\n      fireWith: function fireWith(context, args) {\\n        if (!_locked) {\\n          args = args || [];\\n          args = [context, args.slice ? args.slice() : args];\\n          queue.push(args);\\n\\n          if (!firing) {\\n            fire();\\n          }\\n        }\\n\\n        return this;\\n      },\\n      // Call all the callbacks with the given arguments\\n      fire: function fire() {\\n        self.fireWith(this, arguments);\\n        return this;\\n      },\\n      // To know if the callbacks have already been called at least once\\n      fired: function fired() {\\n        return !!_fired;\\n      }\\n    };\\n\\n    return self;\\n  };\\n\\n  function Identity(v) {\\n    return v;\\n  }\\n\\n  function Thrower(ex) {\\n    throw ex;\\n  }\\n\\n  function adoptValue(value, resolve, reject, noValue) {\\n    var method;\\n\\n    try {\\n      // Check for promise aspect first to privilege synchronous behavior\\n      if (value && isFunction(method = value.promise)) {\\n        method.call(value).done(resolve).fail(reject); // Other thenables\\n      } else if (value && isFunction(method = value.then)) {\\n        method.call(value, resolve, reject); // Other non-thenables\\n      } else {\\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\\n        // * false: [ value ].slice( 0 ) => resolve( value )\\n        // * true: [ value ].slice( 1 ) => resolve()\\n        resolve.apply(undefined, [value].slice(noValue));\\n      } // For Promises/A+, convert exceptions into rejections\\n      // Since jQuery.when doesn\\'t unwrap thenables, we can skip the extra checks appearing in\\n      // Deferred#then to conditionally suppress rejection.\\n\\n    } catch (value) {\\n      // Support: Android 4.0 only\\n      // Strict mode functions invoked without .call/.apply get global-object context\\n      reject.apply(undefined, [value]);\\n    }\\n  }\\n\\n  jQuery.extend({\\n    Deferred: function Deferred(func) {\\n      var tuples = [// action, add listener, callbacks,\\n      // ... .then handlers, argument index, [final state]\\n      [\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 1, \"rejected\"]],\\n          _state = \"pending\",\\n          _promise = {\\n        state: function state() {\\n          return _state;\\n        },\\n        always: function always() {\\n          deferred.done(arguments).fail(arguments);\\n          return this;\\n        },\\n        \"catch\": function _catch(fn) {\\n          return _promise.then(null, fn);\\n        },\\n        // Keep pipe for back-compat\\n        pipe: function pipe()\\n        /* fnDone, fnFail, fnProgress */\\n        {\\n          var fns = arguments;\\n          return jQuery.Deferred(function (newDefer) {\\n            jQuery.each(tuples, function (i, tuple) {\\n              // Map tuples (progress, done, fail) to arguments (done, fail, progress)\\n              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })\\n              // deferred.done(function() { bind to newDefer or newDefer.resolve })\\n              // deferred.fail(function() { bind to newDefer or newDefer.reject })\\n\\n              deferred[tuple[1]](function () {\\n                var returned = fn && fn.apply(this, arguments);\\n\\n                if (returned && isFunction(returned.promise)) {\\n                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\\n                } else {\\n                  newDefer[tuple[0] + \"With\"](this, fn ? [returned] : arguments);\\n                }\\n              });\\n            });\\n            fns = null;\\n          }).promise();\\n        },\\n        then: function then(onFulfilled, onRejected, onProgress) {\\n          var maxDepth = 0;\\n\\n          function resolve(depth, deferred, handler, special) {\\n            return function () {\\n              var that = this,\\n                  args = arguments,\\n                  mightThrow = function mightThrow() {\\n                var returned, then; // Support: Promises/A+ section 2.3.3.3.3\\n                // https://promisesaplus.com/#point-59\\n                // Ignore double-resolution attempts\\n\\n                if (depth < maxDepth) {\\n                  return;\\n                }\\n\\n                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1\\n                // https://promisesaplus.com/#point-48\\n\\n                if (returned === deferred.promise()) {\\n                  throw new TypeError(\"Thenable self-resolution\");\\n                } // Support: Promises/A+ sections 2.3.3.1, 3.5\\n                // https://promisesaplus.com/#point-54\\n                // https://promisesaplus.com/#point-75\\n                // Retrieve `then` only once\\n\\n\\n                then = returned && ( // Support: Promises/A+ section 2.3.4\\n                // https://promisesaplus.com/#point-64\\n                // Only check objects and functions for thenability\\n                _typeof(returned) === \"object\" || typeof returned === \"function\") && returned.then; // Handle a returned thenable\\n\\n                if (isFunction(then)) {\\n                  // Special processors (notify) just wait for resolution\\n                  if (special) {\\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress\\n                  } else {\\n                    // ...and disregard older resolution values\\n                    maxDepth++;\\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\\n                  } // Handle all other returned values\\n\\n                } else {\\n                  // Only substitute handlers pass on context\\n                  // and multiple values (non-spec behavior)\\n                  if (handler !== Identity) {\\n                    that = undefined;\\n                    args = [returned];\\n                  } // Process the value(s)\\n                  // Default process is resolve\\n\\n\\n                  (special || deferred.resolveWith)(that, args);\\n                }\\n              },\\n                  // Only normal processors (resolve) catch and reject exceptions\\n              process = special ? mightThrow : function () {\\n                try {\\n                  mightThrow();\\n                } catch (e) {\\n                  if (jQuery.Deferred.exceptionHook) {\\n                    jQuery.Deferred.exceptionHook(e, process.stackTrace);\\n                  } // Support: Promises/A+ section 2.3.3.3.4.1\\n                  // https://promisesaplus.com/#point-61\\n                  // Ignore post-resolution exceptions\\n\\n\\n                  if (depth + 1 >= maxDepth) {\\n                    // Only substitute handlers pass on context\\n                    // and multiple values (non-spec behavior)\\n                    if (handler !== Thrower) {\\n                      that = undefined;\\n                      args = [e];\\n                    }\\n\\n                    deferred.rejectWith(that, args);\\n                  }\\n                }\\n              }; // Support: Promises/A+ section 2.3.3.3.1\\n              // https://promisesaplus.com/#point-57\\n              // Re-resolve promises immediately to dodge false rejection from\\n              // subsequent errors\\n\\n\\n              if (depth) {\\n                process();\\n              } else {\\n                // Call an optional hook to record the stack, in case of exception\\n                // since it\\'s otherwise lost when execution goes async\\n                if (jQuery.Deferred.getStackHook) {\\n                  process.stackTrace = jQuery.Deferred.getStackHook();\\n                }\\n\\n                window.setTimeout(process);\\n              }\\n            };\\n          }\\n\\n          return jQuery.Deferred(function (newDefer) {\\n            // progress_handlers.add( ... )\\n            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )\\n\\n            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )\\n\\n            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\\n          }).promise();\\n        },\\n        // Get a promise for this deferred\\n        // If obj is provided, the promise aspect is added to the object\\n        promise: function promise(obj) {\\n          return obj != null ? jQuery.extend(obj, _promise) : _promise;\\n        }\\n      },\\n          deferred = {}; // Add list-specific methods\\n\\n      jQuery.each(tuples, function (i, tuple) {\\n        var list = tuple[2],\\n            stateString = tuple[5]; // promise.progress = list.add\\n        // promise.done = list.add\\n        // promise.fail = list.add\\n\\n        _promise[tuple[1]] = list.add; // Handle state\\n\\n        if (stateString) {\\n          list.add(function () {\\n            // state = \"resolved\" (i.e., fulfilled)\\n            // state = \"rejected\"\\n            _state = stateString;\\n          }, // rejected_callbacks.disable\\n          // fulfilled_callbacks.disable\\n          tuples[3 - i][2].disable, // rejected_handlers.disable\\n          // fulfilled_handlers.disable\\n          tuples[3 - i][3].disable, // progress_callbacks.lock\\n          tuples[0][2].lock, // progress_handlers.lock\\n          tuples[0][3].lock);\\n        } // progress_handlers.fire\\n        // fulfilled_handlers.fire\\n        // rejected_handlers.fire\\n\\n\\n        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }\\n        // deferred.resolve = function() { deferred.resolveWith(...) }\\n        // deferred.reject = function() { deferred.rejectWith(...) }\\n\\n        deferred[tuple[0]] = function () {\\n          deferred[tuple[0] + \"With\"](this === deferred ? undefined : this, arguments);\\n          return this;\\n        }; // deferred.notifyWith = list.fireWith\\n        // deferred.resolveWith = list.fireWith\\n        // deferred.rejectWith = list.fireWith\\n\\n\\n        deferred[tuple[0] + \"With\"] = list.fireWith;\\n      }); // Make the deferred a promise\\n\\n      _promise.promise(deferred); // Call given func if any\\n\\n\\n      if (func) {\\n        func.call(deferred, deferred);\\n      } // All done!\\n\\n\\n      return deferred;\\n    },\\n    // Deferred helper\\n    when: function when(singleValue) {\\n      var // count of uncompleted subordinates\\n      remaining = arguments.length,\\n          // count of unprocessed arguments\\n      i = remaining,\\n          // subordinate fulfillment data\\n      resolveContexts = Array(i),\\n          resolveValues = _slice.call(arguments),\\n          // the master Deferred\\n      master = jQuery.Deferred(),\\n          // subordinate callback factory\\n      updateFunc = function updateFunc(i) {\\n        return function (value) {\\n          resolveContexts[i] = this;\\n          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\\n\\n          if (! --remaining) {\\n            master.resolveWith(resolveContexts, resolveValues);\\n          }\\n        };\\n      }; // Single- and empty arguments are adopted like Promise.resolve\\n\\n\\n      if (remaining <= 1) {\\n        adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)\\n\\n        if (master.state() === \"pending\" || isFunction(resolveValues[i] && resolveValues[i].then)) {\\n          return master.then();\\n        }\\n      } // Multiple arguments are aggregated like Promise.all array elements\\n\\n\\n      while (i--) {\\n        adoptValue(resolveValues[i], updateFunc(i), master.reject);\\n      }\\n\\n      return master.promise();\\n    }\\n  }); // These usually indicate a programmer mistake during development,\\n  // warn about them ASAP rather than swallowing them by default.\\n\\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\\n\\n  jQuery.Deferred.exceptionHook = function (error, stack) {\\n    // Support: IE 8 - 9 only\\n    // Console exists when dev tools are open, which can happen at any time\\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\\n      window.console.warn(\"jQuery.Deferred exception: \" + error.message, error.stack, stack);\\n    }\\n  };\\n\\n  jQuery.readyException = function (error) {\\n    window.setTimeout(function () {\\n      throw error;\\n    });\\n  }; // The deferred used on DOM ready\\n\\n\\n  var readyList = jQuery.Deferred();\\n\\n  jQuery.fn.ready = function (fn) {\\n    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup\\n    // happens at the time of error handling instead of callback\\n    // registration.\\n    [\"catch\"](function (error) {\\n      jQuery.readyException(error);\\n    });\\n    return this;\\n  };\\n\\n  jQuery.extend({\\n    // Is the DOM ready to be used? Set to true once it occurs.\\n    isReady: false,\\n    // A counter to track how many items to wait for before\\n    // the ready event fires. See #6781\\n    readyWait: 1,\\n    // Handle when the DOM is ready\\n    ready: function ready(wait) {\\n      // Abort if there are pending holds or we\\'re already ready\\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\\n        return;\\n      } // Remember that the DOM is ready\\n\\n\\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\\n\\n      if (wait !== true && --jQuery.readyWait > 0) {\\n        return;\\n      } // If there are functions bound, to execute\\n\\n\\n      readyList.resolveWith(document, [jQuery]);\\n    }\\n  });\\n  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method\\n\\n  function completed() {\\n    document.removeEventListener(\"DOMContentLoaded\", completed);\\n    window.removeEventListener(\"load\", completed);\\n    jQuery.ready();\\n  } // Catch cases where $(document).ready() is called\\n  // after the browser event has already occurred.\\n  // Support: IE <=9 - 10 only\\n  // Older IE sometimes signals \"interactive\" too soon\\n\\n\\n  if (document.readyState === \"complete\" || document.readyState !== \"loading\" && !document.documentElement.doScroll) {\\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\\n    window.setTimeout(jQuery.ready);\\n  } else {\\n    // Use the handy event callback\\n    document.addEventListener(\"DOMContentLoaded\", completed); // A fallback to window.onload, that will always work\\n\\n    window.addEventListener(\"load\", completed);\\n  } // Multifunctional method to get and set values of a collection\\n  // The value/s can optionally be executed if it\\'s a function\\n\\n\\n  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\\n    var i = 0,\\n        len = elems.length,\\n        bulk = key == null; // Sets many values\\n\\n    if (toType(key) === \"object\") {\\n      chainable = true;\\n\\n      for (i in key) {\\n        access(elems, fn, i, key[i], true, emptyGet, raw);\\n      } // Sets one value\\n\\n    } else if (value !== undefined) {\\n      chainable = true;\\n\\n      if (!isFunction(value)) {\\n        raw = true;\\n      }\\n\\n      if (bulk) {\\n        // Bulk operations run against the entire set\\n        if (raw) {\\n          fn.call(elems, value);\\n          fn = null; // ...except when executing function values\\n        } else {\\n          bulk = fn;\\n\\n          fn = function fn(elem, key, value) {\\n            return bulk.call(jQuery(elem), value);\\n          };\\n        }\\n      }\\n\\n      if (fn) {\\n        for (; i < len; i++) {\\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\\n        }\\n      }\\n    }\\n\\n    if (chainable) {\\n      return elems;\\n    } // Gets\\n\\n\\n    if (bulk) {\\n      return fn.call(elems);\\n    }\\n\\n    return len ? fn(elems[0], key) : emptyGet;\\n  }; // Matches dashed string for camelizing\\n\\n\\n  var rmsPrefix = /^-ms-/,\\n      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()\\n\\n  function fcamelCase(all, letter) {\\n    return letter.toUpperCase();\\n  } // Convert dashed to camelCase; used by the css and data modules\\n  // Support: IE <=9 - 11, Edge 12 - 15\\n  // Microsoft forgot to hump their vendor prefix (#9572)\\n\\n\\n  function camelCase(string) {\\n    return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\\n  }\\n\\n  var acceptData = function acceptData(owner) {\\n    // Accepts only:\\n    //  - Node\\n    //    - Node.ELEMENT_NODE\\n    //    - Node.DOCUMENT_NODE\\n    //  - Object\\n    //    - Any\\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\\n  };\\n\\n  function Data() {\\n    this.expando = jQuery.expando + Data.uid++;\\n  }\\n\\n  Data.uid = 1;\\n  Data.prototype = {\\n    cache: function cache(owner) {\\n      // Check if the owner object already has a cache\\n      var value = owner[this.expando]; // If not, create one\\n\\n      if (!value) {\\n        value = {}; // We can accept data for non-element nodes in modern browsers,\\n        // but we should not, see #8335.\\n        // Always return an empty object.\\n\\n        if (acceptData(owner)) {\\n          // If it is a node unlikely to be stringify-ed or looped over\\n          // use plain assignment\\n          if (owner.nodeType) {\\n            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\\n            // configurable must be true to allow the property to be\\n            // deleted when data is removed\\n          } else {\\n            Object.defineProperty(owner, this.expando, {\\n              value: value,\\n              configurable: true\\n            });\\n          }\\n        }\\n      }\\n\\n      return value;\\n    },\\n    set: function set(owner, data, value) {\\n      var prop,\\n          cache = this.cache(owner); // Handle: [ owner, key, value ] args\\n      // Always use camelCase key (gh-2257)\\n\\n      if (typeof data === \"string\") {\\n        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args\\n      } else {\\n        // Copy the properties one-by-one to the cache object\\n        for (prop in data) {\\n          cache[camelCase(prop)] = data[prop];\\n        }\\n      }\\n\\n      return cache;\\n    },\\n    get: function get(owner, key) {\\n      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\\n      owner[this.expando] && owner[this.expando][camelCase(key)];\\n    },\\n    access: function access(owner, key, value) {\\n      // In cases where either:\\n      //\\n      //   1. No key was specified\\n      //   2. A string key was specified, but no value provided\\n      //\\n      // Take the \"read\" path and allow the get method to determine\\n      // which value to return, respectively either:\\n      //\\n      //   1. The entire cache object\\n      //   2. The data stored at the key\\n      //\\n      if (key === undefined || key && typeof key === \"string\" && value === undefined) {\\n        return this.get(owner, key);\\n      } // When the key is not a string, or both a key and value\\n      // are specified, set or extend (existing objects) with either:\\n      //\\n      //   1. An object of properties\\n      //   2. A key and value\\n      //\\n\\n\\n      this.set(owner, key, value); // Since the \"set\" path can have two possible entry points\\n      // return the expected data based on which path was taken[*]\\n\\n      return value !== undefined ? value : key;\\n    },\\n    remove: function remove(owner, key) {\\n      var i,\\n          cache = owner[this.expando];\\n\\n      if (cache === undefined) {\\n        return;\\n      }\\n\\n      if (key !== undefined) {\\n        // Support array or space separated string of keys\\n        if (Array.isArray(key)) {\\n          // If key is an array of keys...\\n          // We always set camelCase keys, so remove that.\\n          key = key.map(camelCase);\\n        } else {\\n          key = camelCase(key); // If a key with the spaces exists, use it.\\n          // Otherwise, create an array by matching non-whitespace\\n\\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\\n        }\\n\\n        i = key.length;\\n\\n        while (i--) {\\n          delete cache[key[i]];\\n        }\\n      } // Remove the expando if there\\'s no more data\\n\\n\\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\\n        // Support: Chrome <=35 - 45\\n        // Webkit & Blink performance suffers when deleting properties\\n        // from DOM nodes, so set to undefined instead\\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\\n        if (owner.nodeType) {\\n          owner[this.expando] = undefined;\\n        } else {\\n          delete owner[this.expando];\\n        }\\n      }\\n    },\\n    hasData: function hasData(owner) {\\n      var cache = owner[this.expando];\\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\\n    }\\n  };\\n  var dataPriv = new Data();\\n  var dataUser = new Data(); //\\tImplementation Summary\\n  //\\n  //\\t1. Enforce API surface and semantic compatibility with 1.9.x branch\\n  //\\t2. Improve the module\\'s maintainability by reducing the storage\\n  //\\t\\tpaths to a single mechanism.\\n  //\\t3. Use the same single mechanism to support \"private\" and \"user\" data.\\n  //\\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\\n  //\\t5. Avoid exposing implementation details on user objects (eg. expando properties)\\n  //\\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\\n\\n  var rbrace = /^(?:\\\\{[\\\\w\\\\W]*\\\\}|\\\\[[\\\\w\\\\W]*\\\\])$/,\\n      rmultiDash = /[A-Z]/g;\\n\\n  function getData(data) {\\n    if (data === \"true\") {\\n      return true;\\n    }\\n\\n    if (data === \"false\") {\\n      return false;\\n    }\\n\\n    if (data === \"null\") {\\n      return null;\\n    } // Only convert to a number if it doesn\\'t change the string\\n\\n\\n    if (data === +data + \"\") {\\n      return +data;\\n    }\\n\\n    if (rbrace.test(data)) {\\n      return JSON.parse(data);\\n    }\\n\\n    return data;\\n  }\\n\\n  function dataAttr(elem, key, data) {\\n    var name; // If nothing was found internally, try to fetch any\\n    // data from the HTML5 data-* attribute\\n\\n    if (data === undefined && elem.nodeType === 1) {\\n      name = \"data-\" + key.replace(rmultiDash, \"-$&\").toLowerCase();\\n      data = elem.getAttribute(name);\\n\\n      if (typeof data === \"string\") {\\n        try {\\n          data = getData(data);\\n        } catch (e) {} // Make sure we set the data so it isn\\'t changed later\\n\\n\\n        dataUser.set(elem, key, data);\\n      } else {\\n        data = undefined;\\n      }\\n    }\\n\\n    return data;\\n  }\\n\\n  jQuery.extend({\\n    hasData: function hasData(elem) {\\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\\n    },\\n    data: function data(elem, name, _data) {\\n      return dataUser.access(elem, name, _data);\\n    },\\n    removeData: function removeData(elem, name) {\\n      dataUser.remove(elem, name);\\n    },\\n    // TODO: Now that all calls to _data and _removeData have been replaced\\n    // with direct calls to dataPriv methods, these can be deprecated.\\n    _data: function _data(elem, name, data) {\\n      return dataPriv.access(elem, name, data);\\n    },\\n    _removeData: function _removeData(elem, name) {\\n      dataPriv.remove(elem, name);\\n    }\\n  });\\n  jQuery.fn.extend({\\n    data: function data(key, value) {\\n      var i,\\n          name,\\n          data,\\n          elem = this[0],\\n          attrs = elem && elem.attributes; // Gets all values\\n\\n      if (key === undefined) {\\n        if (this.length) {\\n          data = dataUser.get(elem);\\n\\n          if (elem.nodeType === 1 && !dataPriv.get(elem, \"hasDataAttrs\")) {\\n            i = attrs.length;\\n\\n            while (i--) {\\n              // Support: IE 11 only\\n              // The attrs elements can be null (#14894)\\n              if (attrs[i]) {\\n                name = attrs[i].name;\\n\\n                if (name.indexOf(\"data-\") === 0) {\\n                  name = camelCase(name.slice(5));\\n                  dataAttr(elem, name, data[name]);\\n                }\\n              }\\n            }\\n\\n            dataPriv.set(elem, \"hasDataAttrs\", true);\\n          }\\n        }\\n\\n        return data;\\n      } // Sets multiple values\\n\\n\\n      if (_typeof(key) === \"object\") {\\n        return this.each(function () {\\n          dataUser.set(this, key);\\n        });\\n      }\\n\\n      return access(this, function (value) {\\n        var data; // The calling jQuery object (element matches) is not empty\\n        // (and therefore has an element appears at this[ 0 ]) and the\\n        // `value` parameter was not undefined. An empty jQuery object\\n        // will result in `undefined` for elem = this[ 0 ] which will\\n        // throw an exception if an attempt to read a data cache is made.\\n\\n        if (elem && value === undefined) {\\n          // Attempt to get data from the cache\\n          // The key will always be camelCased in Data\\n          data = dataUser.get(elem, key);\\n\\n          if (data !== undefined) {\\n            return data;\\n          } // Attempt to \"discover\" the data in\\n          // HTML5 custom data-* attrs\\n\\n\\n          data = dataAttr(elem, key);\\n\\n          if (data !== undefined) {\\n            return data;\\n          } // We tried really hard, but the data doesn\\'t exist.\\n\\n\\n          return;\\n        } // Set the data...\\n\\n\\n        this.each(function () {\\n          // We always store the camelCased key\\n          dataUser.set(this, key, value);\\n        });\\n      }, null, value, arguments.length > 1, null, true);\\n    },\\n    removeData: function removeData(key) {\\n      return this.each(function () {\\n        dataUser.remove(this, key);\\n      });\\n    }\\n  });\\n  jQuery.extend({\\n    queue: function queue(elem, type, data) {\\n      var queue;\\n\\n      if (elem) {\\n        type = (type || \"fx\") + \"queue\";\\n        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\\n\\n        if (data) {\\n          if (!queue || Array.isArray(data)) {\\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\\n          } else {\\n            queue.push(data);\\n          }\\n        }\\n\\n        return queue || [];\\n      }\\n    },\\n    dequeue: function dequeue(elem, type) {\\n      type = type || \"fx\";\\n\\n      var queue = jQuery.queue(elem, type),\\n          startLength = queue.length,\\n          fn = queue.shift(),\\n          hooks = jQuery._queueHooks(elem, type),\\n          next = function next() {\\n        jQuery.dequeue(elem, type);\\n      }; // If the fx queue is dequeued, always remove the progress sentinel\\n\\n\\n      if (fn === \"inprogress\") {\\n        fn = queue.shift();\\n        startLength--;\\n      }\\n\\n      if (fn) {\\n        // Add a progress sentinel to prevent the fx queue from being\\n        // automatically dequeued\\n        if (type === \"fx\") {\\n          queue.unshift(\"inprogress\");\\n        } // Clear up the last queue stop function\\n\\n\\n        delete hooks.stop;\\n        fn.call(elem, next, hooks);\\n      }\\n\\n      if (!startLength && hooks) {\\n        hooks.empty.fire();\\n      }\\n    },\\n    // Not public - generate a queueHooks object, or return the current one\\n    _queueHooks: function _queueHooks(elem, type) {\\n      var key = type + \"queueHooks\";\\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\\n        empty: jQuery.Callbacks(\"once memory\").add(function () {\\n          dataPriv.remove(elem, [type + \"queue\", key]);\\n        })\\n      });\\n    }\\n  });\\n  jQuery.fn.extend({\\n    queue: function queue(type, data) {\\n      var setter = 2;\\n\\n      if (typeof type !== \"string\") {\\n        data = type;\\n        type = \"fx\";\\n        setter--;\\n      }\\n\\n      if (arguments.length < setter) {\\n        return jQuery.queue(this[0], type);\\n      }\\n\\n      return data === undefined ? this : this.each(function () {\\n        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\\n\\n        jQuery._queueHooks(this, type);\\n\\n        if (type === \"fx\" && queue[0] !== \"inprogress\") {\\n          jQuery.dequeue(this, type);\\n        }\\n      });\\n    },\\n    dequeue: function dequeue(type) {\\n      return this.each(function () {\\n        jQuery.dequeue(this, type);\\n      });\\n    },\\n    clearQueue: function clearQueue(type) {\\n      return this.queue(type || \"fx\", []);\\n    },\\n    // Get a promise resolved when queues of a certain type\\n    // are emptied (fx is the type by default)\\n    promise: function promise(type, obj) {\\n      var tmp,\\n          count = 1,\\n          defer = jQuery.Deferred(),\\n          elements = this,\\n          i = this.length,\\n          resolve = function resolve() {\\n        if (! --count) {\\n          defer.resolveWith(elements, [elements]);\\n        }\\n      };\\n\\n      if (typeof type !== \"string\") {\\n        obj = type;\\n        type = undefined;\\n      }\\n\\n      type = type || \"fx\";\\n\\n      while (i--) {\\n        tmp = dataPriv.get(elements[i], type + \"queueHooks\");\\n\\n        if (tmp && tmp.empty) {\\n          count++;\\n          tmp.empty.add(resolve);\\n        }\\n      }\\n\\n      resolve();\\n      return defer.promise(obj);\\n    }\\n  });\\n  var pnum = /[+-]?(?:\\\\d*\\\\.|)\\\\d+(?:[eE][+-]?\\\\d+|)/.source;\\n  var rcssNum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\");\\n  var cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\\n  var documentElement = document.documentElement;\\n\\n  var isAttached = function isAttached(elem) {\\n    return jQuery.contains(elem.ownerDocument, elem);\\n  },\\n      composed = {\\n    composed: true\\n  }; // Check attachment across shadow DOM boundaries when possible (gh-3504)\\n\\n\\n  if (documentElement.attachShadow) {\\n    isAttached = function isAttached(elem) {\\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\\n    };\\n  }\\n\\n  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {\\n    // isHiddenWithinTree might be called from jQuery#filter function;\\n    // in that case, element will be second argument\\n    elem = el || elem; // Inline style trumps all\\n\\n    return elem.style.display === \"none\" || elem.style.display === \"\" && // Otherwise, check computed style\\n    // Support: Firefox <=43 - 45\\n    // Disconnected elements can have computed display: none, so first confirm that elem is\\n    // in the document.\\n    isAttached(elem) && jQuery.css(elem, \"display\") === \"none\";\\n  };\\n\\n  var swap = function swap(elem, options, callback, args) {\\n    var ret,\\n        name,\\n        old = {}; // Remember the old values, and insert the new ones\\n\\n    for (name in options) {\\n      old[name] = elem.style[name];\\n      elem.style[name] = options[name];\\n    }\\n\\n    ret = callback.apply(elem, args || []); // Revert the old values\\n\\n    for (name in options) {\\n      elem.style[name] = old[name];\\n    }\\n\\n    return ret;\\n  };\\n\\n  function adjustCSS(elem, prop, valueParts, tween) {\\n    var adjusted,\\n        scale,\\n        maxIterations = 20,\\n        currentValue = tween ? function () {\\n      return tween.cur();\\n    } : function () {\\n      return jQuery.css(elem, prop, \"\");\\n    },\\n        initial = currentValue(),\\n        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\\n        // Starting value computation is required for potential unit mismatches\\n    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== \"px\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\\n\\n    if (initialInUnit && initialInUnit[3] !== unit) {\\n      // Support: Firefox <=54\\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\\n      initial = initial / 2; // Trust units reported by jQuery.css\\n\\n      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point\\n\\n      initialInUnit = +initial || 1;\\n\\n      while (maxIterations--) {\\n        // Evaluate and update our best guess (doubling guesses that zero out).\\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\\n        jQuery.style(elem, prop, initialInUnit + unit);\\n\\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\\n          maxIterations = 0;\\n        }\\n\\n        initialInUnit = initialInUnit / scale;\\n      }\\n\\n      initialInUnit = initialInUnit * 2;\\n      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on\\n\\n      valueParts = valueParts || [];\\n    }\\n\\n    if (valueParts) {\\n      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified\\n\\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\\n\\n      if (tween) {\\n        tween.unit = unit;\\n        tween.start = initialInUnit;\\n        tween.end = adjusted;\\n      }\\n    }\\n\\n    return adjusted;\\n  }\\n\\n  var defaultDisplayMap = {};\\n\\n  function getDefaultDisplay(elem) {\\n    var temp,\\n        doc = elem.ownerDocument,\\n        nodeName = elem.nodeName,\\n        display = defaultDisplayMap[nodeName];\\n\\n    if (display) {\\n      return display;\\n    }\\n\\n    temp = doc.body.appendChild(doc.createElement(nodeName));\\n    display = jQuery.css(temp, \"display\");\\n    temp.parentNode.removeChild(temp);\\n\\n    if (display === \"none\") {\\n      display = \"block\";\\n    }\\n\\n    defaultDisplayMap[nodeName] = display;\\n    return display;\\n  }\\n\\n  function showHide(elements, show) {\\n    var display,\\n        elem,\\n        values = [],\\n        index = 0,\\n        length = elements.length; // Determine new display value for elements that need to change\\n\\n    for (; index < length; index++) {\\n      elem = elements[index];\\n\\n      if (!elem.style) {\\n        continue;\\n      }\\n\\n      display = elem.style.display;\\n\\n      if (show) {\\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\\n        // check is required in this first loop unless we have a nonempty display value (either\\n        // inline or about-to-be-restored)\\n        if (display === \"none\") {\\n          values[index] = dataPriv.get(elem, \"display\") || null;\\n\\n          if (!values[index]) {\\n            elem.style.display = \"\";\\n          }\\n        }\\n\\n        if (elem.style.display === \"\" && isHiddenWithinTree(elem)) {\\n          values[index] = getDefaultDisplay(elem);\\n        }\\n      } else {\\n        if (display !== \"none\") {\\n          values[index] = \"none\"; // Remember what we\\'re overwriting\\n\\n          dataPriv.set(elem, \"display\", display);\\n        }\\n      }\\n    } // Set the display of the elements in a second loop to avoid constant reflow\\n\\n\\n    for (index = 0; index < length; index++) {\\n      if (values[index] != null) {\\n        elements[index].style.display = values[index];\\n      }\\n    }\\n\\n    return elements;\\n  }\\n\\n  jQuery.fn.extend({\\n    show: function show() {\\n      return showHide(this, true);\\n    },\\n    hide: function hide() {\\n      return showHide(this);\\n    },\\n    toggle: function toggle(state) {\\n      if (typeof state === \"boolean\") {\\n        return state ? this.show() : this.hide();\\n      }\\n\\n      return this.each(function () {\\n        if (isHiddenWithinTree(this)) {\\n          jQuery(this).show();\\n        } else {\\n          jQuery(this).hide();\\n        }\\n      });\\n    }\\n  });\\n  var rcheckableType = /^(?:checkbox|radio)$/i;\\n  var rtagName = /<([a-z][^\\\\/\\\\0>\\\\x20\\\\t\\\\r\\\\n\\\\f]*)/i;\\n  var rscriptType = /^$|^module$|\\\\/(?:java|ecma)script/i; // We have to close these tags to support XHTML (#13200)\\n\\n  var wrapMap = {\\n    // Support: IE <=9 only\\n    option: [1, \"<select multiple=\\'multiple\\'>\", \"</select>\"],\\n    // XHTML parsers do not magically insert elements in the\\n    // same way that tag soup parsers do. So we cannot shorten\\n    // this by omitting <tbody> or other required elements.\\n    thead: [1, \"<table>\", \"</table>\"],\\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\\n    _default: [0, \"\", \"\"]\\n  }; // Support: IE <=9 only\\n\\n  wrapMap.optgroup = wrapMap.option;\\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\\n  wrapMap.th = wrapMap.td;\\n\\n  function getAll(context, tag) {\\n    // Support: IE <=9 - 11 only\\n    // Use typeof to avoid zero-argument method invocation on host objects (#15151)\\n    var ret;\\n\\n    if (typeof context.getElementsByTagName !== \"undefined\") {\\n      ret = context.getElementsByTagName(tag || \"*\");\\n    } else if (typeof context.querySelectorAll !== \"undefined\") {\\n      ret = context.querySelectorAll(tag || \"*\");\\n    } else {\\n      ret = [];\\n    }\\n\\n    if (tag === undefined || tag && nodeName(context, tag)) {\\n      return jQuery.merge([context], ret);\\n    }\\n\\n    return ret;\\n  } // Mark scripts as having already been evaluated\\n\\n\\n  function setGlobalEval(elems, refElements) {\\n    var i = 0,\\n        l = elems.length;\\n\\n    for (; i < l; i++) {\\n      dataPriv.set(elems[i], \"globalEval\", !refElements || dataPriv.get(refElements[i], \"globalEval\"));\\n    }\\n  }\\n\\n  var rhtml = /<|&#?\\\\w+;/;\\n\\n  function buildFragment(elems, context, scripts, selection, ignored) {\\n    var elem,\\n        tmp,\\n        tag,\\n        wrap,\\n        attached,\\n        j,\\n        fragment = context.createDocumentFragment(),\\n        nodes = [],\\n        i = 0,\\n        l = elems.length;\\n\\n    for (; i < l; i++) {\\n      elem = elems[i];\\n\\n      if (elem || elem === 0) {\\n        // Add nodes directly\\n        if (toType(elem) === \"object\") {\\n          // Support: Android <=4.0 only, PhantomJS 1 only\\n          // push.apply(_, arraylike) throws on ancient WebKit\\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\\n        } else if (!rhtml.test(elem)) {\\n          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\\n        } else {\\n          tmp = tmp || fragment.appendChild(context.createElement(\"div\")); // Deserialize a standard representation\\n\\n          tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\\n          wrap = wrapMap[tag] || wrapMap._default;\\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content\\n\\n          j = wrap[0];\\n\\n          while (j--) {\\n            tmp = tmp.lastChild;\\n          } // Support: Android <=4.0 only, PhantomJS 1 only\\n          // push.apply(_, arraylike) throws on ancient WebKit\\n\\n\\n          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\\n\\n          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\\n\\n          tmp.textContent = \"\";\\n        }\\n      }\\n    } // Remove wrapper from fragment\\n\\n\\n    fragment.textContent = \"\";\\n    i = 0;\\n\\n    while (elem = nodes[i++]) {\\n      // Skip elements already in the context collection (trac-4087)\\n      if (selection && jQuery.inArray(elem, selection) > -1) {\\n        if (ignored) {\\n          ignored.push(elem);\\n        }\\n\\n        continue;\\n      }\\n\\n      attached = isAttached(elem); // Append to fragment\\n\\n      tmp = getAll(fragment.appendChild(elem), \"script\"); // Preserve script evaluation history\\n\\n      if (attached) {\\n        setGlobalEval(tmp);\\n      } // Capture executables\\n\\n\\n      if (scripts) {\\n        j = 0;\\n\\n        while (elem = tmp[j++]) {\\n          if (rscriptType.test(elem.type || \"\")) {\\n            scripts.push(elem);\\n          }\\n        }\\n      }\\n    }\\n\\n    return fragment;\\n  }\\n\\n  (function () {\\n    var fragment = document.createDocumentFragment(),\\n        div = fragment.appendChild(document.createElement(\"div\")),\\n        input = document.createElement(\"input\"); // Support: Android 4.0 - 4.3 only\\n    // Check state lost if the name is set (#11217)\\n    // Support: Windows Web Apps (WWA)\\n    // `name` and `type` must use .setAttribute for WWA (#14901)\\n\\n    input.setAttribute(\"type\", \"radio\");\\n    input.setAttribute(\"checked\", \"checked\");\\n    input.setAttribute(\"name\", \"t\");\\n    div.appendChild(input); // Support: Android <=4.1 only\\n    // Older WebKit doesn\\'t clone checked state correctly in fragments\\n\\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only\\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\\n\\n    div.innerHTML = \"<textarea>x</textarea>\";\\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\\n  })();\\n\\n  var rkeyEvent = /^key/,\\n      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\\n      rtypenamespace = /^([^.]*)(?:\\\\.(.+)|)/;\\n\\n  function returnTrue() {\\n    return true;\\n  }\\n\\n  function returnFalse() {\\n    return false;\\n  } // Support: IE <=9 - 11+\\n  // focus() and blur() are asynchronous, except when they are no-op.\\n  // So expect focus to be synchronous when the element is already active,\\n  // and blur to be synchronous when the element is not already active.\\n  // (focus and blur are always synchronous in other supported browsers,\\n  // this just defines when we can count on it).\\n\\n\\n  function expectSync(elem, type) {\\n    return elem === safeActiveElement() === (type === \"focus\");\\n  } // Support: IE <=9 only\\n  // Accessing document.activeElement can throw unexpectedly\\n  // https://bugs.jquery.com/ticket/13393\\n\\n\\n  function safeActiveElement() {\\n    try {\\n      return document.activeElement;\\n    } catch (err) {}\\n  }\\n\\n  function _on(elem, types, selector, data, fn, one) {\\n    var origFn, type; // Types can be a map of types/handlers\\n\\n    if (_typeof(types) === \"object\") {\\n      // ( types-Object, selector, data )\\n      if (typeof selector !== \"string\") {\\n        // ( types-Object, data )\\n        data = data || selector;\\n        selector = undefined;\\n      }\\n\\n      for (type in types) {\\n        _on(elem, type, selector, data, types[type], one);\\n      }\\n\\n      return elem;\\n    }\\n\\n    if (data == null && fn == null) {\\n      // ( types, fn )\\n      fn = selector;\\n      data = selector = undefined;\\n    } else if (fn == null) {\\n      if (typeof selector === \"string\") {\\n        // ( types, selector, fn )\\n        fn = data;\\n        data = undefined;\\n      } else {\\n        // ( types, data, fn )\\n        fn = data;\\n        data = selector;\\n        selector = undefined;\\n      }\\n    }\\n\\n    if (fn === false) {\\n      fn = returnFalse;\\n    } else if (!fn) {\\n      return elem;\\n    }\\n\\n    if (one === 1) {\\n      origFn = fn;\\n\\n      fn = function fn(event) {\\n        // Can use an empty set, since event contains the info\\n        jQuery().off(event);\\n        return origFn.apply(this, arguments);\\n      }; // Use same guid so caller can remove using origFn\\n\\n\\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\\n    }\\n\\n    return elem.each(function () {\\n      jQuery.event.add(this, types, fn, data, selector);\\n    });\\n  }\\n  /*\\n  * Helper functions for managing events -- not part of the public interface.\\n  * Props to Dean Edwards\\' addEvent library for many of the ideas.\\n  */\\n\\n\\n  jQuery.event = {\\n    global: {},\\n    add: function add(elem, types, handler, data, selector) {\\n      var handleObjIn,\\n          eventHandle,\\n          tmp,\\n          events,\\n          t,\\n          handleObj,\\n          special,\\n          handlers,\\n          type,\\n          namespaces,\\n          origType,\\n          elemData = dataPriv.get(elem); // Don\\'t attach events to noData or text/comment nodes (but allow plain objects)\\n\\n      if (!elemData) {\\n        return;\\n      } // Caller can pass in an object of custom data in lieu of the handler\\n\\n\\n      if (handler.handler) {\\n        handleObjIn = handler;\\n        handler = handleObjIn.handler;\\n        selector = handleObjIn.selector;\\n      } // Ensure that invalid selectors throw exceptions at attach time\\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\\n\\n\\n      if (selector) {\\n        jQuery.find.matchesSelector(documentElement, selector);\\n      } // Make sure that the handler has a unique ID, used to find/remove it later\\n\\n\\n      if (!handler.guid) {\\n        handler.guid = jQuery.guid++;\\n      } // Init the element\\'s event structure and main handler, if this is the first\\n\\n\\n      if (!(events = elemData.events)) {\\n        events = elemData.events = {};\\n      }\\n\\n      if (!(eventHandle = elemData.handle)) {\\n        eventHandle = elemData.handle = function (e) {\\n          // Discard the second event of a jQuery.event.trigger() and\\n          // when an event is called after a page has unloaded\\n          return typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\\n        };\\n      } // Handle multiple events separated by a space\\n\\n\\n      types = (types || \"\").match(rnothtmlwhite) || [\"\"];\\n      t = types.length;\\n\\n      while (t--) {\\n        tmp = rtypenamespace.exec(types[t]) || [];\\n        type = origType = tmp[1];\\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // There *must* be a type, no attaching namespace-only handlers\\n\\n        if (!type) {\\n          continue;\\n        } // If event changes its type, use the special event handlers for the changed type\\n\\n\\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\\n\\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\\n\\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\\n\\n        handleObj = jQuery.extend({\\n          type: type,\\n          origType: origType,\\n          data: data,\\n          handler: handler,\\n          guid: handler.guid,\\n          selector: selector,\\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\\n          namespace: namespaces.join(\".\")\\n        }, handleObjIn); // Init the event handler queue if we\\'re the first\\n\\n        if (!(handlers = events[type])) {\\n          handlers = events[type] = [];\\n          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\\n\\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\\n            if (elem.addEventListener) {\\n              elem.addEventListener(type, eventHandle);\\n            }\\n          }\\n        }\\n\\n        if (special.add) {\\n          special.add.call(elem, handleObj);\\n\\n          if (!handleObj.handler.guid) {\\n            handleObj.handler.guid = handler.guid;\\n          }\\n        } // Add to the element\\'s handler list, delegates in front\\n\\n\\n        if (selector) {\\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\\n        } else {\\n          handlers.push(handleObj);\\n        } // Keep track of which events have ever been used, for event optimization\\n\\n\\n        jQuery.event.global[type] = true;\\n      }\\n    },\\n    // Detach an event or set of events from an element\\n    remove: function remove(elem, types, handler, selector, mappedTypes) {\\n      var j,\\n          origCount,\\n          tmp,\\n          events,\\n          t,\\n          handleObj,\\n          special,\\n          handlers,\\n          type,\\n          namespaces,\\n          origType,\\n          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\\n\\n      if (!elemData || !(events = elemData.events)) {\\n        return;\\n      } // Once for each type.namespace in types; type may be omitted\\n\\n\\n      types = (types || \"\").match(rnothtmlwhite) || [\"\"];\\n      t = types.length;\\n\\n      while (t--) {\\n        tmp = rtypenamespace.exec(types[t]) || [];\\n        type = origType = tmp[1];\\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // Unbind all events (on this namespace, if provided) for the element\\n\\n        if (!type) {\\n          for (type in events) {\\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\\n          }\\n\\n          continue;\\n        }\\n\\n        special = jQuery.event.special[type] || {};\\n        type = (selector ? special.delegateType : special.bindType) || type;\\n        handlers = events[type] || [];\\n        tmp = tmp[2] && new RegExp(\"(^|\\\\\\\\.)\" + namespaces.join(\"\\\\\\\\.(?:.*\\\\\\\\.|)\") + \"(\\\\\\\\.|$)\"); // Remove matching events\\n\\n        origCount = j = handlers.length;\\n\\n        while (j--) {\\n          handleObj = handlers[j];\\n\\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\\n            handlers.splice(j, 1);\\n\\n            if (handleObj.selector) {\\n              handlers.delegateCount--;\\n            }\\n\\n            if (special.remove) {\\n              special.remove.call(elem, handleObj);\\n            }\\n          }\\n        } // Remove generic event handler if we removed something and no more handlers exist\\n        // (avoids potential for endless recursion during removal of special event handlers)\\n\\n\\n        if (origCount && !handlers.length) {\\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\\n            jQuery.removeEvent(elem, type, elemData.handle);\\n          }\\n\\n          delete events[type];\\n        }\\n      } // Remove data and the expando if it\\'s no longer used\\n\\n\\n      if (jQuery.isEmptyObject(events)) {\\n        dataPriv.remove(elem, \"handle events\");\\n      }\\n    },\\n    dispatch: function dispatch(nativeEvent) {\\n      // Make a writable jQuery.Event from the native event object\\n      var event = jQuery.event.fix(nativeEvent);\\n      var i,\\n          j,\\n          ret,\\n          matched,\\n          handleObj,\\n          handlerQueue,\\n          args = new Array(arguments.length),\\n          handlers = (dataPriv.get(this, \"events\") || {})[event.type] || [],\\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\\n\\n      args[0] = event;\\n\\n      for (i = 1; i < arguments.length; i++) {\\n        args[i] = arguments[i];\\n      }\\n\\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\\n\\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\\n        return;\\n      } // Determine handlers\\n\\n\\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\\n\\n      i = 0;\\n\\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\\n        event.currentTarget = matched.elem;\\n        j = 0;\\n\\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\\n          // If the event is namespaced, then each handler is only invoked if it is\\n          // specially universal or its namespaces are a superset of the event\\'s.\\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\\n            event.handleObj = handleObj;\\n            event.data = handleObj.data;\\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\\n\\n            if (ret !== undefined) {\\n              if ((event.result = ret) === false) {\\n                event.preventDefault();\\n                event.stopPropagation();\\n              }\\n            }\\n          }\\n        }\\n      } // Call the postDispatch hook for the mapped type\\n\\n\\n      if (special.postDispatch) {\\n        special.postDispatch.call(this, event);\\n      }\\n\\n      return event.result;\\n    },\\n    handlers: function handlers(event, _handlers) {\\n      var i,\\n          handleObj,\\n          sel,\\n          matchedHandlers,\\n          matchedSelectors,\\n          handlerQueue = [],\\n          delegateCount = _handlers.delegateCount,\\n          cur = event.target; // Find delegate handlers\\n\\n      if (delegateCount && // Support: IE <=9\\n      // Black-hole SVG <use> instance trees (trac-13180)\\n      cur.nodeType && // Support: Firefox <=42\\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\\n      // Support: IE 11 only\\n      // ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\\n      !(event.type === \"click\" && event.button >= 1)) {\\n        for (; cur !== this; cur = cur.parentNode || this) {\\n          // Don\\'t check non-elements (#13208)\\n          // Don\\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\\n          if (cur.nodeType === 1 && !(event.type === \"click\" && cur.disabled === true)) {\\n            matchedHandlers = [];\\n            matchedSelectors = {};\\n\\n            for (i = 0; i < delegateCount; i++) {\\n              handleObj = _handlers[i]; // Don\\'t conflict with Object.prototype properties (#13203)\\n\\n              sel = handleObj.selector + \" \";\\n\\n              if (matchedSelectors[sel] === undefined) {\\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\\n              }\\n\\n              if (matchedSelectors[sel]) {\\n                matchedHandlers.push(handleObj);\\n              }\\n            }\\n\\n            if (matchedHandlers.length) {\\n              handlerQueue.push({\\n                elem: cur,\\n                handlers: matchedHandlers\\n              });\\n            }\\n          }\\n        }\\n      } // Add the remaining (directly-bound) handlers\\n\\n\\n      cur = this;\\n\\n      if (delegateCount < _handlers.length) {\\n        handlerQueue.push({\\n          elem: cur,\\n          handlers: _handlers.slice(delegateCount)\\n        });\\n      }\\n\\n      return handlerQueue;\\n    },\\n    addProp: function addProp(name, hook) {\\n      Object.defineProperty(jQuery.Event.prototype, name, {\\n        enumerable: true,\\n        configurable: true,\\n        get: isFunction(hook) ? function () {\\n          if (this.originalEvent) {\\n            return hook(this.originalEvent);\\n          }\\n        } : function () {\\n          if (this.originalEvent) {\\n            return this.originalEvent[name];\\n          }\\n        },\\n        set: function set(value) {\\n          Object.defineProperty(this, name, {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: value\\n          });\\n        }\\n      });\\n    },\\n    fix: function fix(originalEvent) {\\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\\n    },\\n    special: {\\n      load: {\\n        // Prevent triggered image.load events from bubbling to window.load\\n        noBubble: true\\n      },\\n      click: {\\n        // Utilize native event to ensure correct state for checkable inputs\\n        setup: function setup(data) {\\n          // For mutual compressibility with _default, replace `this` access with a local var.\\n          // `|| data` is dead code meant only to preserve the variable through minification.\\n          var el = this || data; // Claim the first handler\\n\\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, \"input\") && dataPriv.get(el, \"click\") === undefined) {\\n            // dataPriv.set( el, \"click\", ... )\\n            leverageNative(el, \"click\", returnTrue);\\n          } // Return false to allow normal processing in the caller\\n\\n\\n          return false;\\n        },\\n        trigger: function trigger(data) {\\n          // For mutual compressibility with _default, replace `this` access with a local var.\\n          // `|| data` is dead code meant only to preserve the variable through minification.\\n          var el = this || data; // Force setup before triggering a click\\n\\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, \"input\") && dataPriv.get(el, \"click\") === undefined) {\\n            leverageNative(el, \"click\");\\n          } // Return non-false to allow normal event-path propagation\\n\\n\\n          return true;\\n        },\\n        // For cross-browser consistency, suppress native .click() on links\\n        // Also prevent it if we\\'re currently inside a leveraged native-event stack\\n        _default: function _default(event) {\\n          var target = event.target;\\n          return rcheckableType.test(target.type) && target.click && nodeName(target, \"input\") && dataPriv.get(target, \"click\") || nodeName(target, \"a\");\\n        }\\n      },\\n      beforeunload: {\\n        postDispatch: function postDispatch(event) {\\n          // Support: Firefox 20+\\n          // Firefox doesn\\'t alert if the returnValue field is not set.\\n          if (event.result !== undefined && event.originalEvent) {\\n            event.originalEvent.returnValue = event.result;\\n          }\\n        }\\n      }\\n    }\\n  }; // Ensure the presence of an event listener that handles manually-triggered\\n  // synthetic events by interrupting progress until reinvoked in response to\\n  // *native* events that it fires directly, ensuring that state changes have\\n  // already occurred before other listeners are invoked.\\n\\n  function leverageNative(el, type, expectSync) {\\n    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\\n    if (!expectSync) {\\n      jQuery.event.add(el, type, returnTrue);\\n      return;\\n    } // Register the controller as a special universal handler for all event namespaces\\n\\n\\n    dataPriv.set(el, type, false);\\n    jQuery.event.add(el, type, {\\n      namespace: false,\\n      handler: function handler(event) {\\n        var notAsync,\\n            result,\\n            saved = dataPriv.get(this, type);\\n\\n        if (event.isTrigger & 1 && this[type]) {\\n          // Interrupt processing of the outer synthetic .trigger()ed event\\n          if (!saved) {\\n            // Store arguments for use when handling the inner native event\\n            saved = _slice.call(arguments);\\n            dataPriv.set(this, type, saved); // Trigger the native event and capture its result\\n            // Support: IE <=9 - 11+\\n            // focus() and blur() are asynchronous\\n\\n            notAsync = expectSync(this, type);\\n            this[type]();\\n            result = dataPriv.get(this, type);\\n\\n            if (saved !== result || notAsync) {\\n              dataPriv.set(this, type, false);\\n            } else {\\n              result = undefined;\\n            }\\n\\n            if (saved !== result) {\\n              // Cancel the outer synthetic event\\n              event.stopImmediatePropagation();\\n              event.preventDefault();\\n              return result;\\n            } // If this is an inner synthetic event for an event with a bubbling surrogate\\n            // (focus or blur), assume that the surrogate already propagated from triggering the\\n            // native event and prevent that from happening again here.\\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\\n            // less bad than duplication.\\n\\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\\n            event.stopPropagation();\\n          } // If this is a native event triggered above, everything is now in order\\n          // Fire an inner synthetic event with the original arguments\\n\\n        } else if (saved) {\\n          // ...and capture the result\\n          dataPriv.set(this, type, jQuery.event.trigger( // Support: IE <=9 - 11+\\n          // Extend with the prototype to reset the above stopImmediatePropagation()\\n          jQuery.extend(saved.shift(), jQuery.Event.prototype), saved, this)); // Abort handling of the native event\\n\\n          event.stopImmediatePropagation();\\n        }\\n      }\\n    });\\n  }\\n\\n  jQuery.removeEvent = function (elem, type, handle) {\\n    // This \"if\" is needed for plain objects\\n    if (elem.removeEventListener) {\\n      elem.removeEventListener(type, handle);\\n    }\\n  };\\n\\n  jQuery.Event = function (src, props) {\\n    // Allow instantiation without the \\'new\\' keyword\\n    if (!(this instanceof jQuery.Event)) {\\n      return new jQuery.Event(src, props);\\n    } // Event object\\n\\n\\n    if (src && src.type) {\\n      this.originalEvent = src;\\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\\n      // by a handler lower down the tree; reflect the correct value.\\n\\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only\\n      src.returnValue === false ? returnTrue : returnFalse; // Create target properties\\n      // Support: Safari <=6 - 7 only\\n      // Target should not be a text node (#504, #13143)\\n\\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\\n      this.currentTarget = src.currentTarget;\\n      this.relatedTarget = src.relatedTarget; // Event type\\n    } else {\\n      this.type = src;\\n    } // Put explicitly provided properties onto the event object\\n\\n\\n    if (props) {\\n      jQuery.extend(this, props);\\n    } // Create a timestamp if incoming event doesn\\'t have one\\n\\n\\n    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed\\n\\n    this[jQuery.expando] = true;\\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\\n\\n\\n  jQuery.Event.prototype = {\\n    constructor: jQuery.Event,\\n    isDefaultPrevented: returnFalse,\\n    isPropagationStopped: returnFalse,\\n    isImmediatePropagationStopped: returnFalse,\\n    isSimulated: false,\\n    preventDefault: function preventDefault() {\\n      var e = this.originalEvent;\\n      this.isDefaultPrevented = returnTrue;\\n\\n      if (e && !this.isSimulated) {\\n        e.preventDefault();\\n      }\\n    },\\n    stopPropagation: function stopPropagation() {\\n      var e = this.originalEvent;\\n      this.isPropagationStopped = returnTrue;\\n\\n      if (e && !this.isSimulated) {\\n        e.stopPropagation();\\n      }\\n    },\\n    stopImmediatePropagation: function stopImmediatePropagation() {\\n      var e = this.originalEvent;\\n      this.isImmediatePropagationStopped = returnTrue;\\n\\n      if (e && !this.isSimulated) {\\n        e.stopImmediatePropagation();\\n      }\\n\\n      this.stopPropagation();\\n    }\\n  }; // Includes all common event props including KeyEvent and MouseEvent specific props\\n\\n  jQuery.each({\\n    altKey: true,\\n    bubbles: true,\\n    cancelable: true,\\n    changedTouches: true,\\n    ctrlKey: true,\\n    detail: true,\\n    eventPhase: true,\\n    metaKey: true,\\n    pageX: true,\\n    pageY: true,\\n    shiftKey: true,\\n    view: true,\\n    \"char\": true,\\n    code: true,\\n    charCode: true,\\n    key: true,\\n    keyCode: true,\\n    button: true,\\n    buttons: true,\\n    clientX: true,\\n    clientY: true,\\n    offsetX: true,\\n    offsetY: true,\\n    pointerId: true,\\n    pointerType: true,\\n    screenX: true,\\n    screenY: true,\\n    targetTouches: true,\\n    toElement: true,\\n    touches: true,\\n    which: function which(event) {\\n      var button = event.button; // Add which for key events\\n\\n      if (event.which == null && rkeyEvent.test(event.type)) {\\n        return event.charCode != null ? event.charCode : event.keyCode;\\n      } // Add which for click: 1 === left; 2 === middle; 3 === right\\n\\n\\n      if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {\\n        if (button & 1) {\\n          return 1;\\n        }\\n\\n        if (button & 2) {\\n          return 3;\\n        }\\n\\n        if (button & 4) {\\n          return 2;\\n        }\\n\\n        return 0;\\n      }\\n\\n      return event.which;\\n    }\\n  }, jQuery.event.addProp);\\n  jQuery.each({\\n    focus: \"focusin\",\\n    blur: \"focusout\"\\n  }, function (type, delegateType) {\\n    jQuery.event.special[type] = {\\n      // Utilize native event if possible so blur/focus sequence is correct\\n      setup: function setup() {\\n        // Claim the first handler\\n        // dataPriv.set( this, \"focus\", ... )\\n        // dataPriv.set( this, \"blur\", ... )\\n        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller\\n\\n        return false;\\n      },\\n      trigger: function trigger() {\\n        // Force setup before trigger\\n        leverageNative(this, type); // Return non-false to allow normal event-path propagation\\n\\n        return true;\\n      },\\n      delegateType: delegateType\\n    };\\n  }); // Create mouseenter/leave events using mouseover/out and event-time checks\\n  // so that event delegation works in jQuery.\\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\\n  //\\n  // Support: Safari 7 only\\n  // Safari sends mouseenter too often; see:\\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\\n  // for the description of the bug (it existed in older Chrome versions as well).\\n\\n  jQuery.each({\\n    mouseenter: \"mouseover\",\\n    mouseleave: \"mouseout\",\\n    pointerenter: \"pointerover\",\\n    pointerleave: \"pointerout\"\\n  }, function (orig, fix) {\\n    jQuery.event.special[orig] = {\\n      delegateType: fix,\\n      bindType: fix,\\n      handle: function handle(event) {\\n        var ret,\\n            target = this,\\n            related = event.relatedTarget,\\n            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.\\n        // NB: No relatedTarget if the mouse left/entered the browser window\\n\\n        if (!related || related !== target && !jQuery.contains(target, related)) {\\n          event.type = handleObj.origType;\\n          ret = handleObj.handler.apply(this, arguments);\\n          event.type = fix;\\n        }\\n\\n        return ret;\\n      }\\n    };\\n  });\\n  jQuery.fn.extend({\\n    on: function on(types, selector, data, fn) {\\n      return _on(this, types, selector, data, fn);\\n    },\\n    one: function one(types, selector, data, fn) {\\n      return _on(this, types, selector, data, fn, 1);\\n    },\\n    off: function off(types, selector, fn) {\\n      var handleObj, type;\\n\\n      if (types && types.preventDefault && types.handleObj) {\\n        // ( event )  dispatched jQuery.Event\\n        handleObj = types.handleObj;\\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\\n        return this;\\n      }\\n\\n      if (_typeof(types) === \"object\") {\\n        // ( types-object [, selector] )\\n        for (type in types) {\\n          this.off(type, selector, types[type]);\\n        }\\n\\n        return this;\\n      }\\n\\n      if (selector === false || typeof selector === \"function\") {\\n        // ( types [, fn] )\\n        fn = selector;\\n        selector = undefined;\\n      }\\n\\n      if (fn === false) {\\n        fn = returnFalse;\\n      }\\n\\n      return this.each(function () {\\n        jQuery.event.remove(this, types, fn, selector);\\n      });\\n    }\\n  });\\n  var\\n  /* eslint-disable max-len */\\n  // See https://github.com/eslint/eslint/issues/3229\\n  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\\\/\\\\0>\\\\x20\\\\t\\\\r\\\\n\\\\f]*)[^>]*)\\\\/>/gi,\\n\\n  /* eslint-enable */\\n  // Support: IE <=10 - 11, Edge 12 - 13 only\\n  // In IE/Edge using regex groups here causes severe slowdowns.\\n  // See https://connect.microsoft.com/IE/feedback/details/1736512/\\n  rnoInnerhtml = /<script|<style|<link/i,\\n      // checked=\"checked\" or checked\\n  rchecked = /checked\\\\s*(?:[^=]|=\\\\s*.checked.)/i,\\n      rcleanScript = /^\\\\s*<!(?:\\\\[CDATA\\\\[|--)|(?:\\\\]\\\\]|--)>\\\\s*$/g; // Prefer a tbody over its parent table for containing new rows\\n\\n  function manipulationTarget(elem, content) {\\n    if (nodeName(elem, \"table\") && nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\")) {\\n      return jQuery(elem).children(\"tbody\")[0] || elem;\\n    }\\n\\n    return elem;\\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\\n\\n\\n  function disableScript(elem) {\\n    elem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\\n    return elem;\\n  }\\n\\n  function restoreScript(elem) {\\n    if ((elem.type || \"\").slice(0, 5) === \"true/\") {\\n      elem.type = elem.type.slice(5);\\n    } else {\\n      elem.removeAttribute(\"type\");\\n    }\\n\\n    return elem;\\n  }\\n\\n  function cloneCopyEvent(src, dest) {\\n    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\\n\\n    if (dest.nodeType !== 1) {\\n      return;\\n    } // 1. Copy private data: events, handlers, etc.\\n\\n\\n    if (dataPriv.hasData(src)) {\\n      pdataOld = dataPriv.access(src);\\n      pdataCur = dataPriv.set(dest, pdataOld);\\n      events = pdataOld.events;\\n\\n      if (events) {\\n        delete pdataCur.handle;\\n        pdataCur.events = {};\\n\\n        for (type in events) {\\n          for (i = 0, l = events[type].length; i < l; i++) {\\n            jQuery.event.add(dest, type, events[type][i]);\\n          }\\n        }\\n      }\\n    } // 2. Copy user data\\n\\n\\n    if (dataUser.hasData(src)) {\\n      udataOld = dataUser.access(src);\\n      udataCur = jQuery.extend({}, udataOld);\\n      dataUser.set(dest, udataCur);\\n    }\\n  } // Fix IE bugs, see support tests\\n\\n\\n  function fixInput(src, dest) {\\n    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\\n\\n    if (nodeName === \"input\" && rcheckableType.test(src.type)) {\\n      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\\n    } else if (nodeName === \"input\" || nodeName === \"textarea\") {\\n      dest.defaultValue = src.defaultValue;\\n    }\\n  }\\n\\n  function domManip(collection, args, callback, ignored) {\\n    // Flatten any nested arrays\\n    args = concat.apply([], args);\\n    var fragment,\\n        first,\\n        scripts,\\n        hasScripts,\\n        node,\\n        doc,\\n        i = 0,\\n        l = collection.length,\\n        iNoClone = l - 1,\\n        value = args[0],\\n        valueIsFunction = isFunction(value); // We can\\'t cloneNode fragments that contain checked, in WebKit\\n\\n    if (valueIsFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\\n      return collection.each(function (index) {\\n        var self = collection.eq(index);\\n\\n        if (valueIsFunction) {\\n          args[0] = value.call(this, index, self.html());\\n        }\\n\\n        domManip(self, args, callback, ignored);\\n      });\\n    }\\n\\n    if (l) {\\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\\n      first = fragment.firstChild;\\n\\n      if (fragment.childNodes.length === 1) {\\n        fragment = first;\\n      } // Require either new content or an interest in ignored elements to invoke the callback\\n\\n\\n      if (first || ignored) {\\n        scripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\\n        hasScripts = scripts.length; // Use the original fragment for the last item\\n        // instead of the first because it can end up\\n        // being emptied incorrectly in certain situations (#8070).\\n\\n        for (; i < l; i++) {\\n          node = fragment;\\n\\n          if (i !== iNoClone) {\\n            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\\n\\n            if (hasScripts) {\\n              // Support: Android <=4.0 only, PhantomJS 1 only\\n              // push.apply(_, arraylike) throws on ancient WebKit\\n              jQuery.merge(scripts, getAll(node, \"script\"));\\n            }\\n          }\\n\\n          callback.call(collection[i], node, i);\\n        }\\n\\n        if (hasScripts) {\\n          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\\n\\n          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\\n\\n          for (i = 0; i < hasScripts; i++) {\\n            node = scripts[i];\\n\\n            if (rscriptType.test(node.type || \"\") && !dataPriv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\\n              if (node.src && (node.type || \"\").toLowerCase() !== \"module\") {\\n                // Optional AJAX dependency, but won\\'t run scripts if not present\\n                if (jQuery._evalUrl && !node.noModule) {\\n                  jQuery._evalUrl(node.src, {\\n                    nonce: node.nonce || node.getAttribute(\"nonce\")\\n                  });\\n                }\\n              } else {\\n                DOMEval(node.textContent.replace(rcleanScript, \"\"), node, doc);\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    return collection;\\n  }\\n\\n  function _remove(elem, selector, keepData) {\\n    var node,\\n        nodes = selector ? jQuery.filter(selector, elem) : elem,\\n        i = 0;\\n\\n    for (; (node = nodes[i]) != null; i++) {\\n      if (!keepData && node.nodeType === 1) {\\n        jQuery.cleanData(getAll(node));\\n      }\\n\\n      if (node.parentNode) {\\n        if (keepData && isAttached(node)) {\\n          setGlobalEval(getAll(node, \"script\"));\\n        }\\n\\n        node.parentNode.removeChild(node);\\n      }\\n    }\\n\\n    return elem;\\n  }\\n\\n  jQuery.extend({\\n    htmlPrefilter: function htmlPrefilter(html) {\\n      return html.replace(rxhtmlTag, \"<$1></$2>\");\\n    },\\n    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\\n      var i,\\n          l,\\n          srcElements,\\n          destElements,\\n          clone = elem.cloneNode(true),\\n          inPage = isAttached(elem); // Fix IE cloning issues\\n\\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\\n        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\\n        destElements = getAll(clone);\\n        srcElements = getAll(elem);\\n\\n        for (i = 0, l = srcElements.length; i < l; i++) {\\n          fixInput(srcElements[i], destElements[i]);\\n        }\\n      } // Copy the events from the original to the clone\\n\\n\\n      if (dataAndEvents) {\\n        if (deepDataAndEvents) {\\n          srcElements = srcElements || getAll(elem);\\n          destElements = destElements || getAll(clone);\\n\\n          for (i = 0, l = srcElements.length; i < l; i++) {\\n            cloneCopyEvent(srcElements[i], destElements[i]);\\n          }\\n        } else {\\n          cloneCopyEvent(elem, clone);\\n        }\\n      } // Preserve script evaluation history\\n\\n\\n      destElements = getAll(clone, \"script\");\\n\\n      if (destElements.length > 0) {\\n        setGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\\n      } // Return the cloned set\\n\\n\\n      return clone;\\n    },\\n    cleanData: function cleanData(elems) {\\n      var data,\\n          elem,\\n          type,\\n          special = jQuery.event.special,\\n          i = 0;\\n\\n      for (; (elem = elems[i]) !== undefined; i++) {\\n        if (acceptData(elem)) {\\n          if (data = elem[dataPriv.expando]) {\\n            if (data.events) {\\n              for (type in data.events) {\\n                if (special[type]) {\\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove\\'s overhead\\n                } else {\\n                  jQuery.removeEvent(elem, type, data.handle);\\n                }\\n              }\\n            } // Support: Chrome <=35 - 45+\\n            // Assign undefined instead of using delete, see Data#remove\\n\\n\\n            elem[dataPriv.expando] = undefined;\\n          }\\n\\n          if (elem[dataUser.expando]) {\\n            // Support: Chrome <=35 - 45+\\n            // Assign undefined instead of using delete, see Data#remove\\n            elem[dataUser.expando] = undefined;\\n          }\\n        }\\n      }\\n    }\\n  });\\n  jQuery.fn.extend({\\n    detach: function detach(selector) {\\n      return _remove(this, selector, true);\\n    },\\n    remove: function remove(selector) {\\n      return _remove(this, selector);\\n    },\\n    text: function text(value) {\\n      return access(this, function (value) {\\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n            this.textContent = value;\\n          }\\n        });\\n      }, null, value, arguments.length);\\n    },\\n    append: function append() {\\n      return domManip(this, arguments, function (elem) {\\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n          var target = manipulationTarget(this, elem);\\n          target.appendChild(elem);\\n        }\\n      });\\n    },\\n    prepend: function prepend() {\\n      return domManip(this, arguments, function (elem) {\\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n          var target = manipulationTarget(this, elem);\\n          target.insertBefore(elem, target.firstChild);\\n        }\\n      });\\n    },\\n    before: function before() {\\n      return domManip(this, arguments, function (elem) {\\n        if (this.parentNode) {\\n          this.parentNode.insertBefore(elem, this);\\n        }\\n      });\\n    },\\n    after: function after() {\\n      return domManip(this, arguments, function (elem) {\\n        if (this.parentNode) {\\n          this.parentNode.insertBefore(elem, this.nextSibling);\\n        }\\n      });\\n    },\\n    empty: function empty() {\\n      var elem,\\n          i = 0;\\n\\n      for (; (elem = this[i]) != null; i++) {\\n        if (elem.nodeType === 1) {\\n          // Prevent memory leaks\\n          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\\n\\n          elem.textContent = \"\";\\n        }\\n      }\\n\\n      return this;\\n    },\\n    clone: function clone(dataAndEvents, deepDataAndEvents) {\\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\\n      return this.map(function () {\\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\\n      });\\n    },\\n    html: function html(value) {\\n      return access(this, function (value) {\\n        var elem = this[0] || {},\\n            i = 0,\\n            l = this.length;\\n\\n        if (value === undefined && elem.nodeType === 1) {\\n          return elem.innerHTML;\\n        } // See if we can take a shortcut and just use innerHTML\\n\\n\\n        if (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\\n          value = jQuery.htmlPrefilter(value);\\n\\n          try {\\n            for (; i < l; i++) {\\n              elem = this[i] || {}; // Remove element nodes and prevent memory leaks\\n\\n              if (elem.nodeType === 1) {\\n                jQuery.cleanData(getAll(elem, false));\\n                elem.innerHTML = value;\\n              }\\n            }\\n\\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\\n          } catch (e) {}\\n        }\\n\\n        if (elem) {\\n          this.empty().append(value);\\n        }\\n      }, null, value, arguments.length);\\n    },\\n    replaceWith: function replaceWith() {\\n      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content\\n\\n      return domManip(this, arguments, function (elem) {\\n        var parent = this.parentNode;\\n\\n        if (jQuery.inArray(this, ignored) < 0) {\\n          jQuery.cleanData(getAll(this));\\n\\n          if (parent) {\\n            parent.replaceChild(elem, this);\\n          }\\n        } // Force callback invocation\\n\\n      }, ignored);\\n    }\\n  });\\n  jQuery.each({\\n    appendTo: \"append\",\\n    prependTo: \"prepend\",\\n    insertBefore: \"before\",\\n    insertAfter: \"after\",\\n    replaceAll: \"replaceWith\"\\n  }, function (name, original) {\\n    jQuery.fn[name] = function (selector) {\\n      var elems,\\n          ret = [],\\n          insert = jQuery(selector),\\n          last = insert.length - 1,\\n          i = 0;\\n\\n      for (; i <= last; i++) {\\n        elems = i === last ? this : this.clone(true);\\n        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only\\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\\n\\n        push.apply(ret, elems.get());\\n      }\\n\\n      return this.pushStack(ret);\\n    };\\n  });\\n  var rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\\n\\n  var getStyles = function getStyles(elem) {\\n    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\\n    // IE throws on elements created in popups\\n    // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\\n    var view = elem.ownerDocument.defaultView;\\n\\n    if (!view || !view.opener) {\\n      view = window;\\n    }\\n\\n    return view.getComputedStyle(elem);\\n  };\\n\\n  var rboxStyle = new RegExp(cssExpand.join(\"|\"), \"i\");\\n\\n  (function () {\\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\\n    // so they\\'re executed at the same time to save the second computation.\\n    function computeStyleTests() {\\n      // This is a singleton, we need to execute it only once\\n      if (!div) {\\n        return;\\n      }\\n\\n      container.style.cssText = \"position:absolute;left:-11111px;width:60px;\" + \"margin-top:1px;padding:0;border:0\";\\n      div.style.cssText = \"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" + \"margin:auto;border:1px;padding:1px;\" + \"width:60%;top:1%\";\\n      documentElement.appendChild(container).appendChild(div);\\n      var divStyle = window.getComputedStyle(div);\\n      pixelPositionVal = divStyle.top !== \"1%\"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\\n\\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\\n      // Some styles come back with percentage values, even though they shouldn\\'t\\n\\n      div.style.right = \"60%\";\\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only\\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\\n\\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only\\n      // Detect overflow:scroll screwiness (gh-3699)\\n      // Support: Chrome <=64\\n      // Don\\'t get tricked when zoom affects offsetWidth (gh-4029)\\n\\n      div.style.position = \"absolute\";\\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\\n      documentElement.removeChild(container); // Nullify the div so it wouldn\\'t be stored in the memory and\\n      // it will also be a sign that checks already performed\\n\\n      div = null;\\n    }\\n\\n    function roundPixelMeasures(measure) {\\n      return Math.round(parseFloat(measure));\\n    }\\n\\n    var pixelPositionVal,\\n        boxSizingReliableVal,\\n        scrollboxSizeVal,\\n        pixelBoxStylesVal,\\n        reliableMarginLeftVal,\\n        container = document.createElement(\"div\"),\\n        div = document.createElement(\"div\"); // Finish early in limited (non-browser) environments\\n\\n    if (!div.style) {\\n      return;\\n    } // Support: IE <=9 - 11 only\\n    // Style of cloned element affects source element cloned (#8908)\\n\\n\\n    div.style.backgroundClip = \"content-box\";\\n    div.cloneNode(true).style.backgroundClip = \"\";\\n    support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\\n    jQuery.extend(support, {\\n      boxSizingReliable: function boxSizingReliable() {\\n        computeStyleTests();\\n        return boxSizingReliableVal;\\n      },\\n      pixelBoxStyles: function pixelBoxStyles() {\\n        computeStyleTests();\\n        return pixelBoxStylesVal;\\n      },\\n      pixelPosition: function pixelPosition() {\\n        computeStyleTests();\\n        return pixelPositionVal;\\n      },\\n      reliableMarginLeft: function reliableMarginLeft() {\\n        computeStyleTests();\\n        return reliableMarginLeftVal;\\n      },\\n      scrollboxSize: function scrollboxSize() {\\n        computeStyleTests();\\n        return scrollboxSizeVal;\\n      }\\n    });\\n  })();\\n\\n  function curCSS(elem, name, computed) {\\n    var width,\\n        minWidth,\\n        maxWidth,\\n        ret,\\n        // Support: Firefox 51+\\n    // Retrieving style before computed somehow\\n    // fixes an issue with getting wrong values\\n    // on detached elements\\n    style = elem.style;\\n    computed = computed || getStyles(elem); // getPropertyValue is needed for:\\n    //   .css(\\'filter\\') (IE 9 only, #12537)\\n    //   .css(\\'--customProperty) (#3144)\\n\\n    if (computed) {\\n      ret = computed.getPropertyValue(name) || computed[name];\\n\\n      if (ret === \"\" && !isAttached(elem)) {\\n        ret = jQuery.style(elem, name);\\n      } // A tribute to the \"awesome hack by Dean Edwards\"\\n      // Android Browser returns percentage for some values,\\n      // but width seems to be reliably pixels.\\n      // This is against the CSSOM draft spec:\\n      // https://drafts.csswg.org/cssom/#resolved-values\\n\\n\\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\\n        // Remember the original values\\n        width = style.width;\\n        minWidth = style.minWidth;\\n        maxWidth = style.maxWidth; // Put in the new values to get a computed value out\\n\\n        style.minWidth = style.maxWidth = style.width = ret;\\n        ret = computed.width; // Revert the changed values\\n\\n        style.width = width;\\n        style.minWidth = minWidth;\\n        style.maxWidth = maxWidth;\\n      }\\n    }\\n\\n    return ret !== undefined ? // Support: IE <=9 - 11 only\\n    // IE returns zIndex value as an integer.\\n    ret + \"\" : ret;\\n  }\\n\\n  function addGetHookIf(conditionFn, hookFn) {\\n    // Define the hook, we\\'ll check on the first run if it\\'s really needed.\\n    return {\\n      get: function get() {\\n        if (conditionFn()) {\\n          // Hook not needed (or it\\'s not possible to use it due\\n          // to missing dependency), remove it.\\n          delete this.get;\\n          return;\\n        } // Hook needed; redefine it so that the support test is not executed again.\\n\\n\\n        return (this.get = hookFn).apply(this, arguments);\\n      }\\n    };\\n  }\\n\\n  var cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"],\\n      emptyStyle = document.createElement(\"div\").style,\\n      vendorProps = {}; // Return a vendor-prefixed property or undefined\\n\\n  function vendorPropName(name) {\\n    // Check for vendor prefixed names\\n    var capName = name[0].toUpperCase() + name.slice(1),\\n        i = cssPrefixes.length;\\n\\n    while (i--) {\\n      name = cssPrefixes[i] + capName;\\n\\n      if (name in emptyStyle) {\\n        return name;\\n      }\\n    }\\n  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\\n\\n\\n  function finalPropName(name) {\\n    var _final = jQuery.cssProps[name] || vendorProps[name];\\n\\n    if (_final) {\\n      return _final;\\n    }\\n\\n    if (name in emptyStyle) {\\n      return name;\\n    }\\n\\n    return vendorProps[name] = vendorPropName(name) || name;\\n  }\\n\\n  var // Swappable if display is none or starts with table\\n  // except \"table\", \"table-cell\", or \"table-caption\"\\n  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\\n      rcustomProp = /^--/,\\n      cssShow = {\\n    position: \"absolute\",\\n    visibility: \"hidden\",\\n    display: \"block\"\\n  },\\n      cssNormalTransform = {\\n    letterSpacing: \"0\",\\n    fontWeight: \"400\"\\n  };\\n\\n  function setPositiveNumber(elem, value, subtract) {\\n    // Any relative (+/-) values have already been\\n    // normalized at this point\\n    var matches = rcssNum.exec(value);\\n    return matches ? // Guard against undefined \"subtract\", e.g., when used as in cssHooks\\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || \"px\") : value;\\n  }\\n\\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\\n    var i = dimension === \"width\" ? 1 : 0,\\n        extra = 0,\\n        delta = 0; // Adjustment may not be necessary\\n\\n    if (box === (isBorderBox ? \"border\" : \"content\")) {\\n      return 0;\\n    }\\n\\n    for (; i < 4; i += 2) {\\n      // Both box models exclude margin\\n      if (box === \"margin\") {\\n        delta += jQuery.css(elem, box + cssExpand[i], true, styles);\\n      } // If we get here with a content-box, we\\'re seeking \"padding\" or \"border\" or \"margin\"\\n\\n\\n      if (!isBorderBox) {\\n        // Add padding\\n        delta += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles); // For \"border\" or \"margin\", add border\\n\\n        if (box !== \"padding\") {\\n          delta += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles); // But still keep track of it otherwise\\n        } else {\\n          extra += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\\n        } // If we get here with a border-box (content + padding + border), we\\'re seeking \"content\" or\\n        // \"padding\" or \"margin\"\\n\\n      } else {\\n        // For \"content\", subtract padding\\n        if (box === \"content\") {\\n          delta -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\\n        } // For \"content\" or \"padding\", subtract border\\n\\n\\n        if (box !== \"margin\") {\\n          delta -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\\n        }\\n      }\\n    } // Account for positive content-box scroll gutter when requested by providing computedVal\\n\\n\\n    if (!isBorderBox && computedVal >= 0) {\\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\\n      // Assuming integer scroll gutter, subtract the rest and round down\\n      delta += Math.max(0, Math.ceil(elem[\"offset\" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can\\'t determine content-box scroll gutter\\n      // Use an explicit zero to avoid NaN (gh-3964)\\n      )) || 0;\\n    }\\n\\n    return delta;\\n  }\\n\\n  function getWidthOrHeight(elem, dimension, extra) {\\n    // Start with computed style\\n    var styles = getStyles(elem),\\n        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\\n    // Fake content-box until we know it\\'s needed to know the true value.\\n    boxSizingNeeded = !support.boxSizingReliable() || extra,\\n        isBorderBox = boxSizingNeeded && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\",\\n        valueIsBorderBox = isBorderBox,\\n        val = curCSS(elem, dimension, styles),\\n        offsetProp = \"offset\" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54\\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\\n\\n    if (rnumnonpx.test(val)) {\\n      if (!extra) {\\n        return val;\\n      }\\n\\n      val = \"auto\";\\n    } // Fall back to offsetWidth/offsetHeight when value is \"auto\"\\n    // This happens for inline elements with no explicit setting (gh-3571)\\n    // Support: Android <=4.1 - 4.3 only\\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\\n    // Support: IE 9-11 only\\n    // Also use offsetWidth/offsetHeight for when box sizing is unreliable\\n    // We use getClientRects() to check for hidden/disconnected.\\n    // In those cases, the computed value can be trusted to be border-box\\n\\n\\n    if ((!support.boxSizingReliable() && isBorderBox || val === \"auto\" || !parseFloat(val) && jQuery.css(elem, \"display\", false, styles) === \"inline\") && elem.getClientRects().length) {\\n      isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.\\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\\n      // retrieved value as a content box dimension.\\n\\n      valueIsBorderBox = offsetProp in elem;\\n\\n      if (valueIsBorderBox) {\\n        val = elem[offsetProp];\\n      }\\n    } // Normalize \"\" and auto\\n\\n\\n    val = parseFloat(val) || 0; // Adjust for the element\\'s box model\\n\\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)\\n    val) + \"px\";\\n  }\\n\\n  jQuery.extend({\\n    // Add in style property hooks for overriding the default\\n    // behavior of getting and setting a style property\\n    cssHooks: {\\n      opacity: {\\n        get: function get(elem, computed) {\\n          if (computed) {\\n            // We should always get a number back from opacity\\n            var ret = curCSS(elem, \"opacity\");\\n            return ret === \"\" ? \"1\" : ret;\\n          }\\n        }\\n      }\\n    },\\n    // Don\\'t automatically add \"px\" to these possibly-unitless properties\\n    cssNumber: {\\n      \"animationIterationCount\": true,\\n      \"columnCount\": true,\\n      \"fillOpacity\": true,\\n      \"flexGrow\": true,\\n      \"flexShrink\": true,\\n      \"fontWeight\": true,\\n      \"gridArea\": true,\\n      \"gridColumn\": true,\\n      \"gridColumnEnd\": true,\\n      \"gridColumnStart\": true,\\n      \"gridRow\": true,\\n      \"gridRowEnd\": true,\\n      \"gridRowStart\": true,\\n      \"lineHeight\": true,\\n      \"opacity\": true,\\n      \"order\": true,\\n      \"orphans\": true,\\n      \"widows\": true,\\n      \"zIndex\": true,\\n      \"zoom\": true\\n    },\\n    // Add in properties whose names you wish to fix before\\n    // setting or getting the value\\n    cssProps: {},\\n    // Get and set the style property on a DOM Node\\n    style: function style(elem, name, value, extra) {\\n      // Don\\'t set styles on text and comment nodes\\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\\n        return;\\n      } // Make sure that we\\'re working with the right name\\n\\n\\n      var ret,\\n          type,\\n          hooks,\\n          origName = camelCase(name),\\n          isCustomProp = rcustomProp.test(name),\\n          style = elem.style; // Make sure that we\\'re working with the right name. We don\\'t\\n      // want to query the value if it is a CSS custom property\\n      // since they are user-defined.\\n\\n      if (!isCustomProp) {\\n        name = finalPropName(origName);\\n      } // Gets hook for the prefixed version, then unprefixed version\\n\\n\\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we\\'re setting a value\\n\\n      if (value !== undefined) {\\n        type = _typeof(value); // Convert \"+=\" or \"-=\" to relative numbers (#7345)\\n\\n        if (type === \"string\" && (ret = rcssNum.exec(value)) && ret[1]) {\\n          value = adjustCSS(elem, name, ret); // Fixes bug #9237\\n\\n          type = \"number\";\\n        } // Make sure that null and NaN values aren\\'t set (#7116)\\n\\n\\n        if (value == null || value !== value) {\\n          return;\\n        } // If a number was passed in, add the unit (except for certain CSS properties)\\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\\n        // \"px\" to a few hardcoded values.\\n\\n\\n        if (type === \"number\" && !isCustomProp) {\\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? \"\" : \"px\");\\n        } // background-* props affect original clone\\'s values\\n\\n\\n        if (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\\n          style[name] = \"inherit\";\\n        } // If a hook was provided, use that value, otherwise just set the specified value\\n\\n\\n        if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\\n          if (isCustomProp) {\\n            style.setProperty(name, value);\\n          } else {\\n            style[name] = value;\\n          }\\n        }\\n      } else {\\n        // If a hook was provided get the non-computed value from there\\n        if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\\n          return ret;\\n        } // Otherwise just get the value from the style object\\n\\n\\n        return style[name];\\n      }\\n    },\\n    css: function css(elem, name, extra, styles) {\\n      var val,\\n          num,\\n          hooks,\\n          origName = camelCase(name),\\n          isCustomProp = rcustomProp.test(name); // Make sure that we\\'re working with the right name. We don\\'t\\n      // want to modify the value if it is a CSS custom property\\n      // since they are user-defined.\\n\\n      if (!isCustomProp) {\\n        name = finalPropName(origName);\\n      } // Try prefixed name followed by the unprefixed name\\n\\n\\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\\n\\n      if (hooks && \"get\" in hooks) {\\n        val = hooks.get(elem, true, extra);\\n      } // Otherwise, if a way to get the computed value exists, use that\\n\\n\\n      if (val === undefined) {\\n        val = curCSS(elem, name, styles);\\n      } // Convert \"normal\" to computed value\\n\\n\\n      if (val === \"normal\" && name in cssNormalTransform) {\\n        val = cssNormalTransform[name];\\n      } // Make numeric if forced or a qualifier was provided and val looks numeric\\n\\n\\n      if (extra === \"\" || extra) {\\n        num = parseFloat(val);\\n        return extra === true || isFinite(num) ? num || 0 : val;\\n      }\\n\\n      return val;\\n    }\\n  });\\n  jQuery.each([\"height\", \"width\"], function (i, dimension) {\\n    jQuery.cssHooks[dimension] = {\\n      get: function get(elem, computed, extra) {\\n        if (computed) {\\n          // Certain elements can have dimension info if we invisibly show them\\n          // but it must have a current display style that would benefit\\n          return rdisplayswap.test(jQuery.css(elem, \"display\")) && ( // Support: Safari 8+\\n          // Table columns in Safari have non-zero offsetWidth & zero\\n          // getBoundingClientRect().width unless display is changed.\\n          // Support: IE <=11 only\\n          // Running getBoundingClientRect on a disconnected node\\n          // in IE throws an error.\\n          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\\n            return getWidthOrHeight(elem, dimension, extra);\\n          }) : getWidthOrHeight(elem, dimension, extra);\\n        }\\n      },\\n      set: function set(elem, value, extra) {\\n        var matches,\\n            styles = getStyles(elem),\\n            // Only read styles.position if the test has a chance to fail\\n        // to avoid forcing a reflow.\\n        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === \"absolute\",\\n            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\\n        boxSizingNeeded = scrollboxSizeBuggy || extra,\\n            isBorderBox = boxSizingNeeded && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\",\\n            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and\\n        // faking a content-box to get border and padding (gh-3699)\\n\\n        if (isBorderBox && scrollboxSizeBuggy) {\\n          subtract -= Math.ceil(elem[\"offset\" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, \"border\", false, styles) - 0.5);\\n        } // Convert to pixels if value adjustment is needed\\n\\n\\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || \"px\") !== \"px\") {\\n          elem.style[dimension] = value;\\n          value = jQuery.css(elem, dimension);\\n        }\\n\\n        return setPositiveNumber(elem, value, subtract);\\n      }\\n    };\\n  });\\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\\n    if (computed) {\\n      return (parseFloat(curCSS(elem, \"marginLeft\")) || elem.getBoundingClientRect().left - swap(elem, {\\n        marginLeft: 0\\n      }, function () {\\n        return elem.getBoundingClientRect().left;\\n      })) + \"px\";\\n    }\\n  }); // These hooks are used by animate to expand properties\\n\\n  jQuery.each({\\n    margin: \"\",\\n    padding: \"\",\\n    border: \"Width\"\\n  }, function (prefix, suffix) {\\n    jQuery.cssHooks[prefix + suffix] = {\\n      expand: function expand(value) {\\n        var i = 0,\\n            expanded = {},\\n            // Assumes a single number if not a string\\n        parts = typeof value === \"string\" ? value.split(\" \") : [value];\\n\\n        for (; i < 4; i++) {\\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\\n        }\\n\\n        return expanded;\\n      }\\n    };\\n\\n    if (prefix !== \"margin\") {\\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\\n    }\\n  });\\n  jQuery.fn.extend({\\n    css: function css(name, value) {\\n      return access(this, function (elem, name, value) {\\n        var styles,\\n            len,\\n            map = {},\\n            i = 0;\\n\\n        if (Array.isArray(name)) {\\n          styles = getStyles(elem);\\n          len = name.length;\\n\\n          for (; i < len; i++) {\\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\\n          }\\n\\n          return map;\\n        }\\n\\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\\n      }, name, value, arguments.length > 1);\\n    }\\n  });\\n\\n  function Tween(elem, options, prop, end, easing) {\\n    return new Tween.prototype.init(elem, options, prop, end, easing);\\n  }\\n\\n  jQuery.Tween = Tween;\\n  Tween.prototype = {\\n    constructor: Tween,\\n    init: function init(elem, options, prop, end, easing, unit) {\\n      this.elem = elem;\\n      this.prop = prop;\\n      this.easing = easing || jQuery.easing._default;\\n      this.options = options;\\n      this.start = this.now = this.cur();\\n      this.end = end;\\n      this.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\\n    },\\n    cur: function cur() {\\n      var hooks = Tween.propHooks[this.prop];\\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\\n    },\\n    run: function run(percent) {\\n      var eased,\\n          hooks = Tween.propHooks[this.prop];\\n\\n      if (this.options.duration) {\\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\\n      } else {\\n        this.pos = eased = percent;\\n      }\\n\\n      this.now = (this.end - this.start) * eased + this.start;\\n\\n      if (this.options.step) {\\n        this.options.step.call(this.elem, this.now, this);\\n      }\\n\\n      if (hooks && hooks.set) {\\n        hooks.set(this);\\n      } else {\\n        Tween.propHooks._default.set(this);\\n      }\\n\\n      return this;\\n    }\\n  };\\n  Tween.prototype.init.prototype = Tween.prototype;\\n  Tween.propHooks = {\\n    _default: {\\n      get: function get(tween) {\\n        var result; // Use a property on the element directly when it is not a DOM element,\\n        // or when there is no matching style property that exists.\\n\\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\\n          return tween.elem[tween.prop];\\n        } // Passing an empty string as a 3rd parameter to .css will automatically\\n        // attempt a parseFloat and fallback to a string if the parse fails.\\n        // Simple values such as \"10px\" are parsed to Float;\\n        // complex values such as \"rotate(1rad)\" are returned as-is.\\n\\n\\n        result = jQuery.css(tween.elem, tween.prop, \"\"); // Empty strings, null, undefined and \"auto\" are converted to 0.\\n\\n        return !result || result === \"auto\" ? 0 : result;\\n      },\\n      set: function set(tween) {\\n        // Use step hook for back compat.\\n        // Use cssHook if its there.\\n        // Use .style if available and use plain properties where available.\\n        if (jQuery.fx.step[tween.prop]) {\\n          jQuery.fx.step[tween.prop](tween);\\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\\n        } else {\\n          tween.elem[tween.prop] = tween.now;\\n        }\\n      }\\n    }\\n  }; // Support: IE <=9 only\\n  // Panic based approach to setting things on disconnected nodes\\n\\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\\n    set: function set(tween) {\\n      if (tween.elem.nodeType && tween.elem.parentNode) {\\n        tween.elem[tween.prop] = tween.now;\\n      }\\n    }\\n  };\\n  jQuery.easing = {\\n    linear: function linear(p) {\\n      return p;\\n    },\\n    swing: function swing(p) {\\n      return 0.5 - Math.cos(p * Math.PI) / 2;\\n    },\\n    _default: \"swing\"\\n  };\\n  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point\\n\\n  jQuery.fx.step = {};\\n  var fxNow,\\n      inProgress,\\n      rfxtypes = /^(?:toggle|show|hide)$/,\\n      rrun = /queueHooks$/;\\n\\n  function schedule() {\\n    if (inProgress) {\\n      if (document.hidden === false && window.requestAnimationFrame) {\\n        window.requestAnimationFrame(schedule);\\n      } else {\\n        window.setTimeout(schedule, jQuery.fx.interval);\\n      }\\n\\n      jQuery.fx.tick();\\n    }\\n  } // Animations created synchronously will run synchronously\\n\\n\\n  function createFxNow() {\\n    window.setTimeout(function () {\\n      fxNow = undefined;\\n    });\\n    return fxNow = Date.now();\\n  } // Generate parameters to create a standard animation\\n\\n\\n  function genFx(type, includeWidth) {\\n    var which,\\n        i = 0,\\n        attrs = {\\n      height: type\\n    }; // If we include width, step value is 1 to do all cssExpand values,\\n    // otherwise step value is 2 to skip over Left and Right\\n\\n    includeWidth = includeWidth ? 1 : 0;\\n\\n    for (; i < 4; i += 2 - includeWidth) {\\n      which = cssExpand[i];\\n      attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\\n    }\\n\\n    if (includeWidth) {\\n      attrs.opacity = attrs.width = type;\\n    }\\n\\n    return attrs;\\n  }\\n\\n  function createTween(value, prop, animation) {\\n    var tween,\\n        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners[\"*\"]),\\n        index = 0,\\n        length = collection.length;\\n\\n    for (; index < length; index++) {\\n      if (tween = collection[index].call(animation, prop, value)) {\\n        // We\\'re done with this property\\n        return tween;\\n      }\\n    }\\n  }\\n\\n  function defaultPrefilter(elem, props, opts) {\\n    var prop,\\n        value,\\n        toggle,\\n        hooks,\\n        oldfire,\\n        propTween,\\n        restoreDisplay,\\n        display,\\n        isBox = \"width\" in props || \"height\" in props,\\n        anim = this,\\n        orig = {},\\n        style = elem.style,\\n        hidden = elem.nodeType && isHiddenWithinTree(elem),\\n        dataShow = dataPriv.get(elem, \"fxshow\"); // Queue-skipping animations hijack the fx hooks\\n\\n    if (!opts.queue) {\\n      hooks = jQuery._queueHooks(elem, \"fx\");\\n\\n      if (hooks.unqueued == null) {\\n        hooks.unqueued = 0;\\n        oldfire = hooks.empty.fire;\\n\\n        hooks.empty.fire = function () {\\n          if (!hooks.unqueued) {\\n            oldfire();\\n          }\\n        };\\n      }\\n\\n      hooks.unqueued++;\\n      anim.always(function () {\\n        // Ensure the complete handler is called before this completes\\n        anim.always(function () {\\n          hooks.unqueued--;\\n\\n          if (!jQuery.queue(elem, \"fx\").length) {\\n            hooks.empty.fire();\\n          }\\n        });\\n      });\\n    } // Detect show/hide animations\\n\\n\\n    for (prop in props) {\\n      value = props[prop];\\n\\n      if (rfxtypes.test(value)) {\\n        delete props[prop];\\n        toggle = toggle || value === \"toggle\";\\n\\n        if (value === (hidden ? \"hide\" : \"show\")) {\\n          // Pretend to be hidden if this is a \"show\" and\\n          // there is still data from a stopped show/hide\\n          if (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\\n            hidden = true; // Ignore all other no-op show/hide data\\n          } else {\\n            continue;\\n          }\\n        }\\n\\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\\n      }\\n    } // Bail out if this is a no-op like .hide().hide()\\n\\n\\n    propTween = !jQuery.isEmptyObject(props);\\n\\n    if (!propTween && jQuery.isEmptyObject(orig)) {\\n      return;\\n    } // Restrict \"overflow\" and \"display\" styles during box animations\\n\\n\\n    if (isBox && elem.nodeType === 1) {\\n      // Support: IE <=9 - 11, Edge 12 - 15\\n      // Record all 3 overflow attributes because IE does not infer the shorthand\\n      // from identically-valued overflowX and overflowY and Edge just mirrors\\n      // the overflowX value there.\\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade\\n\\n      restoreDisplay = dataShow && dataShow.display;\\n\\n      if (restoreDisplay == null) {\\n        restoreDisplay = dataPriv.get(elem, \"display\");\\n      }\\n\\n      display = jQuery.css(elem, \"display\");\\n\\n      if (display === \"none\") {\\n        if (restoreDisplay) {\\n          display = restoreDisplay;\\n        } else {\\n          // Get nonempty value(s) by temporarily forcing visibility\\n          showHide([elem], true);\\n          restoreDisplay = elem.style.display || restoreDisplay;\\n          display = jQuery.css(elem, \"display\");\\n          showHide([elem]);\\n        }\\n      } // Animate inline elements as inline-block\\n\\n\\n      if (display === \"inline\" || display === \"inline-block\" && restoreDisplay != null) {\\n        if (jQuery.css(elem, \"float\") === \"none\") {\\n          // Restore the original display value at the end of pure show/hide animations\\n          if (!propTween) {\\n            anim.done(function () {\\n              style.display = restoreDisplay;\\n            });\\n\\n            if (restoreDisplay == null) {\\n              display = style.display;\\n              restoreDisplay = display === \"none\" ? \"\" : display;\\n            }\\n          }\\n\\n          style.display = \"inline-block\";\\n        }\\n      }\\n    }\\n\\n    if (opts.overflow) {\\n      style.overflow = \"hidden\";\\n      anim.always(function () {\\n        style.overflow = opts.overflow[0];\\n        style.overflowX = opts.overflow[1];\\n        style.overflowY = opts.overflow[2];\\n      });\\n    } // Implement show/hide animations\\n\\n\\n    propTween = false;\\n\\n    for (prop in orig) {\\n      // General show/hide setup for this element animation\\n      if (!propTween) {\\n        if (dataShow) {\\n          if (\"hidden\" in dataShow) {\\n            hidden = dataShow.hidden;\\n          }\\n        } else {\\n          dataShow = dataPriv.access(elem, \"fxshow\", {\\n            display: restoreDisplay\\n          });\\n        } // Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\\n\\n\\n        if (toggle) {\\n          dataShow.hidden = !hidden;\\n        } // Show elements before animating them\\n\\n\\n        if (hidden) {\\n          showHide([elem], true);\\n        }\\n        /* eslint-disable no-loop-func */\\n\\n\\n        anim.done(function () {\\n          /* eslint-enable no-loop-func */\\n          // The final step of a \"hide\" animation is actually hiding the element\\n          if (!hidden) {\\n            showHide([elem]);\\n          }\\n\\n          dataPriv.remove(elem, \"fxshow\");\\n\\n          for (prop in orig) {\\n            jQuery.style(elem, prop, orig[prop]);\\n          }\\n        });\\n      } // Per-property setup\\n\\n\\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\\n\\n      if (!(prop in dataShow)) {\\n        dataShow[prop] = propTween.start;\\n\\n        if (hidden) {\\n          propTween.end = propTween.start;\\n          propTween.start = 0;\\n        }\\n      }\\n    }\\n  }\\n\\n  function propFilter(props, specialEasing) {\\n    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\\n\\n    for (index in props) {\\n      name = camelCase(index);\\n      easing = specialEasing[name];\\n      value = props[index];\\n\\n      if (Array.isArray(value)) {\\n        easing = value[1];\\n        value = props[index] = value[0];\\n      }\\n\\n      if (index !== name) {\\n        props[name] = value;\\n        delete props[index];\\n      }\\n\\n      hooks = jQuery.cssHooks[name];\\n\\n      if (hooks && \"expand\" in hooks) {\\n        value = hooks.expand(value);\\n        delete props[name]; // Not quite $.extend, this won\\'t overwrite existing keys.\\n        // Reusing \\'index\\' because we have the correct \"name\"\\n\\n        for (index in value) {\\n          if (!(index in props)) {\\n            props[index] = value[index];\\n            specialEasing[index] = easing;\\n          }\\n        }\\n      } else {\\n        specialEasing[name] = easing;\\n      }\\n    }\\n  }\\n\\n  function Animation(elem, properties, options) {\\n    var result,\\n        stopped,\\n        index = 0,\\n        length = Animation.prefilters.length,\\n        deferred = jQuery.Deferred().always(function () {\\n      // Don\\'t match elem in the :animated selector\\n      delete tick.elem;\\n    }),\\n        tick = function tick() {\\n      if (stopped) {\\n        return false;\\n      }\\n\\n      var currentTime = fxNow || createFxNow(),\\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\\n          // Support: Android 2.3 only\\n      // Archaic crash bug won\\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\\n      temp = remaining / animation.duration || 0,\\n          percent = 1 - temp,\\n          index = 0,\\n          length = animation.tweens.length;\\n\\n      for (; index < length; index++) {\\n        animation.tweens[index].run(percent);\\n      }\\n\\n      deferred.notifyWith(elem, [animation, percent, remaining]); // If there\\'s more to do, yield\\n\\n      if (percent < 1 && length) {\\n        return remaining;\\n      } // If this was an empty animation, synthesize a final progress notification\\n\\n\\n      if (!length) {\\n        deferred.notifyWith(elem, [animation, 1, 0]);\\n      } // Resolve the animation and report its conclusion\\n\\n\\n      deferred.resolveWith(elem, [animation]);\\n      return false;\\n    },\\n        animation = deferred.promise({\\n      elem: elem,\\n      props: jQuery.extend({}, properties),\\n      opts: jQuery.extend(true, {\\n        specialEasing: {},\\n        easing: jQuery.easing._default\\n      }, options),\\n      originalProperties: properties,\\n      originalOptions: options,\\n      startTime: fxNow || createFxNow(),\\n      duration: options.duration,\\n      tweens: [],\\n      createTween: function createTween(prop, end) {\\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\\n        animation.tweens.push(tween);\\n        return tween;\\n      },\\n      stop: function stop(gotoEnd) {\\n        var index = 0,\\n            // If we are going to the end, we want to run all the tweens\\n        // otherwise we skip this part\\n        length = gotoEnd ? animation.tweens.length : 0;\\n\\n        if (stopped) {\\n          return this;\\n        }\\n\\n        stopped = true;\\n\\n        for (; index < length; index++) {\\n          animation.tweens[index].run(1);\\n        } // Resolve when we played the last frame; otherwise, reject\\n\\n\\n        if (gotoEnd) {\\n          deferred.notifyWith(elem, [animation, 1, 0]);\\n          deferred.resolveWith(elem, [animation, gotoEnd]);\\n        } else {\\n          deferred.rejectWith(elem, [animation, gotoEnd]);\\n        }\\n\\n        return this;\\n      }\\n    }),\\n        props = animation.props;\\n\\n    propFilter(props, animation.opts.specialEasing);\\n\\n    for (; index < length; index++) {\\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\\n\\n      if (result) {\\n        if (isFunction(result.stop)) {\\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\\n        }\\n\\n        return result;\\n      }\\n    }\\n\\n    jQuery.map(props, createTween, animation);\\n\\n    if (isFunction(animation.opts.start)) {\\n      animation.opts.start.call(elem, animation);\\n    } // Attach callbacks from options\\n\\n\\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\\n    jQuery.fx.timer(jQuery.extend(tick, {\\n      elem: elem,\\n      anim: animation,\\n      queue: animation.opts.queue\\n    }));\\n    return animation;\\n  }\\n\\n  jQuery.Animation = jQuery.extend(Animation, {\\n    tweeners: {\\n      \"*\": [function (prop, value) {\\n        var tween = this.createTween(prop, value);\\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\\n        return tween;\\n      }]\\n    },\\n    tweener: function tweener(props, callback) {\\n      if (isFunction(props)) {\\n        callback = props;\\n        props = [\"*\"];\\n      } else {\\n        props = props.match(rnothtmlwhite);\\n      }\\n\\n      var prop,\\n          index = 0,\\n          length = props.length;\\n\\n      for (; index < length; index++) {\\n        prop = props[index];\\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\\n        Animation.tweeners[prop].unshift(callback);\\n      }\\n    },\\n    prefilters: [defaultPrefilter],\\n    prefilter: function prefilter(callback, prepend) {\\n      if (prepend) {\\n        Animation.prefilters.unshift(callback);\\n      } else {\\n        Animation.prefilters.push(callback);\\n      }\\n    }\\n  });\\n\\n  jQuery.speed = function (speed, easing, fn) {\\n    var opt = speed && _typeof(speed) === \"object\" ? jQuery.extend({}, speed) : {\\n      complete: fn || !fn && easing || isFunction(speed) && speed,\\n      duration: speed,\\n      easing: fn && easing || easing && !isFunction(easing) && easing\\n    }; // Go to the end state if fx are off\\n\\n    if (jQuery.fx.off) {\\n      opt.duration = 0;\\n    } else {\\n      if (typeof opt.duration !== \"number\") {\\n        if (opt.duration in jQuery.fx.speeds) {\\n          opt.duration = jQuery.fx.speeds[opt.duration];\\n        } else {\\n          opt.duration = jQuery.fx.speeds._default;\\n        }\\n      }\\n    } // Normalize opt.queue - true/undefined/null -> \"fx\"\\n\\n\\n    if (opt.queue == null || opt.queue === true) {\\n      opt.queue = \"fx\";\\n    } // Queueing\\n\\n\\n    opt.old = opt.complete;\\n\\n    opt.complete = function () {\\n      if (isFunction(opt.old)) {\\n        opt.old.call(this);\\n      }\\n\\n      if (opt.queue) {\\n        jQuery.dequeue(this, opt.queue);\\n      }\\n    };\\n\\n    return opt;\\n  };\\n\\n  jQuery.fn.extend({\\n    fadeTo: function fadeTo(speed, to, easing, callback) {\\n      // Show any hidden elements after setting opacity to 0\\n      return this.filter(isHiddenWithinTree).css(\"opacity\", 0).show() // Animate to the value specified\\n      .end().animate({\\n        opacity: to\\n      }, speed, easing, callback);\\n    },\\n    animate: function animate(prop, speed, easing, callback) {\\n      var empty = jQuery.isEmptyObject(prop),\\n          optall = jQuery.speed(speed, easing, callback),\\n          doAnimation = function doAnimation() {\\n        // Operate on a copy of prop so per-property easing won\\'t be lost\\n        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\\n\\n        if (empty || dataPriv.get(this, \"finish\")) {\\n          anim.stop(true);\\n        }\\n      };\\n\\n      doAnimation.finish = doAnimation;\\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\\n    },\\n    stop: function stop(type, clearQueue, gotoEnd) {\\n      var stopQueue = function stopQueue(hooks) {\\n        var stop = hooks.stop;\\n        delete hooks.stop;\\n        stop(gotoEnd);\\n      };\\n\\n      if (typeof type !== \"string\") {\\n        gotoEnd = clearQueue;\\n        clearQueue = type;\\n        type = undefined;\\n      }\\n\\n      if (clearQueue && type !== false) {\\n        this.queue(type || \"fx\", []);\\n      }\\n\\n      return this.each(function () {\\n        var dequeue = true,\\n            index = type != null && type + \"queueHooks\",\\n            timers = jQuery.timers,\\n            data = dataPriv.get(this);\\n\\n        if (index) {\\n          if (data[index] && data[index].stop) {\\n            stopQueue(data[index]);\\n          }\\n        } else {\\n          for (index in data) {\\n            if (data[index] && data[index].stop && rrun.test(index)) {\\n              stopQueue(data[index]);\\n            }\\n          }\\n        }\\n\\n        for (index = timers.length; index--;) {\\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\\n            timers[index].anim.stop(gotoEnd);\\n            dequeue = false;\\n            timers.splice(index, 1);\\n          }\\n        } // Start the next in the queue if the last step wasn\\'t forced.\\n        // Timers currently will call their complete callbacks, which\\n        // will dequeue but only if they were gotoEnd.\\n\\n\\n        if (dequeue || !gotoEnd) {\\n          jQuery.dequeue(this, type);\\n        }\\n      });\\n    },\\n    finish: function finish(type) {\\n      if (type !== false) {\\n        type = type || \"fx\";\\n      }\\n\\n      return this.each(function () {\\n        var index,\\n            data = dataPriv.get(this),\\n            queue = data[type + \"queue\"],\\n            hooks = data[type + \"queueHooks\"],\\n            timers = jQuery.timers,\\n            length = queue ? queue.length : 0; // Enable finishing flag on private data\\n\\n        data.finish = true; // Empty the queue first\\n\\n        jQuery.queue(this, type, []);\\n\\n        if (hooks && hooks.stop) {\\n          hooks.stop.call(this, true);\\n        } // Look for any active animations, and finish them\\n\\n\\n        for (index = timers.length; index--;) {\\n          if (timers[index].elem === this && timers[index].queue === type) {\\n            timers[index].anim.stop(true);\\n            timers.splice(index, 1);\\n          }\\n        } // Look for any animations in the old queue and finish them\\n\\n\\n        for (index = 0; index < length; index++) {\\n          if (queue[index] && queue[index].finish) {\\n            queue[index].finish.call(this);\\n          }\\n        } // Turn off finishing flag\\n\\n\\n        delete data.finish;\\n      });\\n    }\\n  });\\n  jQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\\n    var cssFn = jQuery.fn[name];\\n\\n    jQuery.fn[name] = function (speed, easing, callback) {\\n      return speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\\n    };\\n  }); // Generate shortcuts for custom animations\\n\\n  jQuery.each({\\n    slideDown: genFx(\"show\"),\\n    slideUp: genFx(\"hide\"),\\n    slideToggle: genFx(\"toggle\"),\\n    fadeIn: {\\n      opacity: \"show\"\\n    },\\n    fadeOut: {\\n      opacity: \"hide\"\\n    },\\n    fadeToggle: {\\n      opacity: \"toggle\"\\n    }\\n  }, function (name, props) {\\n    jQuery.fn[name] = function (speed, easing, callback) {\\n      return this.animate(props, speed, easing, callback);\\n    };\\n  });\\n  jQuery.timers = [];\\n\\n  jQuery.fx.tick = function () {\\n    var timer,\\n        i = 0,\\n        timers = jQuery.timers;\\n    fxNow = Date.now();\\n\\n    for (; i < timers.length; i++) {\\n      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)\\n\\n      if (!timer() && timers[i] === timer) {\\n        timers.splice(i--, 1);\\n      }\\n    }\\n\\n    if (!timers.length) {\\n      jQuery.fx.stop();\\n    }\\n\\n    fxNow = undefined;\\n  };\\n\\n  jQuery.fx.timer = function (timer) {\\n    jQuery.timers.push(timer);\\n    jQuery.fx.start();\\n  };\\n\\n  jQuery.fx.interval = 13;\\n\\n  jQuery.fx.start = function () {\\n    if (inProgress) {\\n      return;\\n    }\\n\\n    inProgress = true;\\n    schedule();\\n  };\\n\\n  jQuery.fx.stop = function () {\\n    inProgress = null;\\n  };\\n\\n  jQuery.fx.speeds = {\\n    slow: 600,\\n    fast: 200,\\n    // Default speed\\n    _default: 400\\n  }; // Based off of the plugin by Clint Helfers, with permission.\\n  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\\n\\n  jQuery.fn.delay = function (time, type) {\\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\\n    type = type || \"fx\";\\n    return this.queue(type, function (next, hooks) {\\n      var timeout = window.setTimeout(next, time);\\n\\n      hooks.stop = function () {\\n        window.clearTimeout(timeout);\\n      };\\n    });\\n  };\\n\\n  (function () {\\n    var input = document.createElement(\"input\"),\\n        select = document.createElement(\"select\"),\\n        opt = select.appendChild(document.createElement(\"option\"));\\n    input.type = \"checkbox\"; // Support: Android <=4.3 only\\n    // Default value for a checkbox should be \"on\"\\n\\n    support.checkOn = input.value !== \"\"; // Support: IE <=11 only\\n    // Must access selectedIndex to make default options select\\n\\n    support.optSelected = opt.selected; // Support: IE <=11 only\\n    // An input loses its value after becoming a radio\\n\\n    input = document.createElement(\"input\");\\n    input.value = \"t\";\\n    input.type = \"radio\";\\n    support.radioValue = input.value === \"t\";\\n  })();\\n\\n  var boolHook,\\n      attrHandle = jQuery.expr.attrHandle;\\n  jQuery.fn.extend({\\n    attr: function attr(name, value) {\\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\\n    },\\n    removeAttr: function removeAttr(name) {\\n      return this.each(function () {\\n        jQuery.removeAttr(this, name);\\n      });\\n    }\\n  });\\n  jQuery.extend({\\n    attr: function attr(elem, name, value) {\\n      var ret,\\n          hooks,\\n          nType = elem.nodeType; // Don\\'t get/set attributes on text, comment and attribute nodes\\n\\n      if (nType === 3 || nType === 8 || nType === 2) {\\n        return;\\n      } // Fallback to prop when attributes are not supported\\n\\n\\n      if (typeof elem.getAttribute === \"undefined\") {\\n        return jQuery.prop(elem, name, value);\\n      } // Attribute hooks are determined by the lowercase version\\n      // Grab necessary hook if one is defined\\n\\n\\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\\n      }\\n\\n      if (value !== undefined) {\\n        if (value === null) {\\n          jQuery.removeAttr(elem, name);\\n          return;\\n        }\\n\\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\\n          return ret;\\n        }\\n\\n        elem.setAttribute(name, value + \"\");\\n        return value;\\n      }\\n\\n      if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\\n        return ret;\\n      }\\n\\n      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\\n\\n      return ret == null ? undefined : ret;\\n    },\\n    attrHooks: {\\n      type: {\\n        set: function set(elem, value) {\\n          if (!support.radioValue && value === \"radio\" && nodeName(elem, \"input\")) {\\n            var val = elem.value;\\n            elem.setAttribute(\"type\", value);\\n\\n            if (val) {\\n              elem.value = val;\\n            }\\n\\n            return value;\\n          }\\n        }\\n      }\\n    },\\n    removeAttr: function removeAttr(elem, value) {\\n      var name,\\n          i = 0,\\n          // Attribute names can contain non-HTML whitespace characters\\n      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\\n      attrNames = value && value.match(rnothtmlwhite);\\n\\n      if (attrNames && elem.nodeType === 1) {\\n        while (name = attrNames[i++]) {\\n          elem.removeAttribute(name);\\n        }\\n      }\\n    }\\n  }); // Hooks for boolean attributes\\n\\n  boolHook = {\\n    set: function set(elem, value, name) {\\n      if (value === false) {\\n        // Remove boolean attributes when set to false\\n        jQuery.removeAttr(elem, name);\\n      } else {\\n        elem.setAttribute(name, name);\\n      }\\n\\n      return name;\\n    }\\n  };\\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\\\w+/g), function (i, name) {\\n    var getter = attrHandle[name] || jQuery.find.attr;\\n\\n    attrHandle[name] = function (elem, name, isXML) {\\n      var ret,\\n          handle,\\n          lowercaseName = name.toLowerCase();\\n\\n      if (!isXML) {\\n        // Avoid an infinite loop by temporarily removing this function from the getter\\n        handle = attrHandle[lowercaseName];\\n        attrHandle[lowercaseName] = ret;\\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\\n        attrHandle[lowercaseName] = handle;\\n      }\\n\\n      return ret;\\n    };\\n  });\\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\\n      rclickable = /^(?:a|area)$/i;\\n  jQuery.fn.extend({\\n    prop: function prop(name, value) {\\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\\n    },\\n    removeProp: function removeProp(name) {\\n      return this.each(function () {\\n        delete this[jQuery.propFix[name] || name];\\n      });\\n    }\\n  });\\n  jQuery.extend({\\n    prop: function prop(elem, name, value) {\\n      var ret,\\n          hooks,\\n          nType = elem.nodeType; // Don\\'t get/set properties on text, comment and attribute nodes\\n\\n      if (nType === 3 || nType === 8 || nType === 2) {\\n        return;\\n      }\\n\\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\\n        // Fix name and attach hooks\\n        name = jQuery.propFix[name] || name;\\n        hooks = jQuery.propHooks[name];\\n      }\\n\\n      if (value !== undefined) {\\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\\n          return ret;\\n        }\\n\\n        return elem[name] = value;\\n      }\\n\\n      if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\\n        return ret;\\n      }\\n\\n      return elem[name];\\n    },\\n    propHooks: {\\n      tabIndex: {\\n        get: function get(elem) {\\n          // Support: IE <=9 - 11 only\\n          // elem.tabIndex doesn\\'t always return the\\n          // correct value when it hasn\\'t been explicitly set\\n          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\\n          // Use proper attribute retrieval(#12072)\\n          var tabindex = jQuery.find.attr(elem, \"tabindex\");\\n\\n          if (tabindex) {\\n            return parseInt(tabindex, 10);\\n          }\\n\\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\\n            return 0;\\n          }\\n\\n          return -1;\\n        }\\n      }\\n    },\\n    propFix: {\\n      \"for\": \"htmlFor\",\\n      \"class\": \"className\"\\n    }\\n  }); // Support: IE <=11 only\\n  // Accessing the selectedIndex property\\n  // forces the browser to respect setting selected\\n  // on the option\\n  // The getter ensures a default option is selected\\n  // when in an optgroup\\n  // eslint rule \"no-unused-expressions\" is disabled for this code\\n  // since it considers such accessions noop\\n\\n  if (!support.optSelected) {\\n    jQuery.propHooks.selected = {\\n      get: function get(elem) {\\n        /* eslint no-unused-expressions: \"off\" */\\n        var parent = elem.parentNode;\\n\\n        if (parent && parent.parentNode) {\\n          parent.parentNode.selectedIndex;\\n        }\\n\\n        return null;\\n      },\\n      set: function set(elem) {\\n        /* eslint no-unused-expressions: \"off\" */\\n        var parent = elem.parentNode;\\n\\n        if (parent) {\\n          parent.selectedIndex;\\n\\n          if (parent.parentNode) {\\n            parent.parentNode.selectedIndex;\\n          }\\n        }\\n      }\\n    };\\n  }\\n\\n  jQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\\n    jQuery.propFix[this.toLowerCase()] = this;\\n  }); // Strip and collapse whitespace according to HTML spec\\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\\n\\n  function stripAndCollapse(value) {\\n    var tokens = value.match(rnothtmlwhite) || [];\\n    return tokens.join(\" \");\\n  }\\n\\n  function getClass(elem) {\\n    return elem.getAttribute && elem.getAttribute(\"class\") || \"\";\\n  }\\n\\n  function classesToArray(value) {\\n    if (Array.isArray(value)) {\\n      return value;\\n    }\\n\\n    if (typeof value === \"string\") {\\n      return value.match(rnothtmlwhite) || [];\\n    }\\n\\n    return [];\\n  }\\n\\n  jQuery.fn.extend({\\n    addClass: function addClass(value) {\\n      var classes,\\n          elem,\\n          cur,\\n          curValue,\\n          clazz,\\n          j,\\n          finalValue,\\n          i = 0;\\n\\n      if (isFunction(value)) {\\n        return this.each(function (j) {\\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\\n        });\\n      }\\n\\n      classes = classesToArray(value);\\n\\n      if (classes.length) {\\n        while (elem = this[i++]) {\\n          curValue = getClass(elem);\\n          cur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\\n\\n          if (cur) {\\n            j = 0;\\n\\n            while (clazz = classes[j++]) {\\n              if (cur.indexOf(\" \" + clazz + \" \") < 0) {\\n                cur += clazz + \" \";\\n              }\\n            } // Only assign if different to avoid unneeded rendering.\\n\\n\\n            finalValue = stripAndCollapse(cur);\\n\\n            if (curValue !== finalValue) {\\n              elem.setAttribute(\"class\", finalValue);\\n            }\\n          }\\n        }\\n      }\\n\\n      return this;\\n    },\\n    removeClass: function removeClass(value) {\\n      var classes,\\n          elem,\\n          cur,\\n          curValue,\\n          clazz,\\n          j,\\n          finalValue,\\n          i = 0;\\n\\n      if (isFunction(value)) {\\n        return this.each(function (j) {\\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\\n        });\\n      }\\n\\n      if (!arguments.length) {\\n        return this.attr(\"class\", \"\");\\n      }\\n\\n      classes = classesToArray(value);\\n\\n      if (classes.length) {\\n        while (elem = this[i++]) {\\n          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)\\n\\n          cur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\\n\\n          if (cur) {\\n            j = 0;\\n\\n            while (clazz = classes[j++]) {\\n              // Remove *all* instances\\n              while (cur.indexOf(\" \" + clazz + \" \") > -1) {\\n                cur = cur.replace(\" \" + clazz + \" \", \" \");\\n              }\\n            } // Only assign if different to avoid unneeded rendering.\\n\\n\\n            finalValue = stripAndCollapse(cur);\\n\\n            if (curValue !== finalValue) {\\n              elem.setAttribute(\"class\", finalValue);\\n            }\\n          }\\n        }\\n      }\\n\\n      return this;\\n    },\\n    toggleClass: function toggleClass(value, stateVal) {\\n      var type = _typeof(value),\\n          isValidValue = type === \"string\" || Array.isArray(value);\\n\\n      if (typeof stateVal === \"boolean\" && isValidValue) {\\n        return stateVal ? this.addClass(value) : this.removeClass(value);\\n      }\\n\\n      if (isFunction(value)) {\\n        return this.each(function (i) {\\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\\n        });\\n      }\\n\\n      return this.each(function () {\\n        var className, i, self, classNames;\\n\\n        if (isValidValue) {\\n          // Toggle individual class names\\n          i = 0;\\n          self = jQuery(this);\\n          classNames = classesToArray(value);\\n\\n          while (className = classNames[i++]) {\\n            // Check each className given, space separated list\\n            if (self.hasClass(className)) {\\n              self.removeClass(className);\\n            } else {\\n              self.addClass(className);\\n            }\\n          } // Toggle whole class name\\n\\n        } else if (value === undefined || type === \"boolean\") {\\n          className = getClass(this);\\n\\n          if (className) {\\n            // Store className if set\\n            dataPriv.set(this, \"__className__\", className);\\n          } // If the element has a class name or if we\\'re passed `false`,\\n          // then remove the whole classname (if there was one, the above saved it).\\n          // Otherwise bring back whatever was previously saved (if anything),\\n          // falling back to the empty string if nothing was stored.\\n\\n\\n          if (this.setAttribute) {\\n            this.setAttribute(\"class\", className || value === false ? \"\" : dataPriv.get(this, \"__className__\") || \"\");\\n          }\\n        }\\n      });\\n    },\\n    hasClass: function hasClass(selector) {\\n      var className,\\n          elem,\\n          i = 0;\\n      className = \" \" + selector + \" \";\\n\\n      while (elem = this[i++]) {\\n        if (elem.nodeType === 1 && (\" \" + stripAndCollapse(getClass(elem)) + \" \").indexOf(className) > -1) {\\n          return true;\\n        }\\n      }\\n\\n      return false;\\n    }\\n  });\\n  var rreturn = /\\\\r/g;\\n  jQuery.fn.extend({\\n    val: function val(value) {\\n      var hooks,\\n          ret,\\n          valueIsFunction,\\n          elem = this[0];\\n\\n      if (!arguments.length) {\\n        if (elem) {\\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\\n\\n          if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\\n            return ret;\\n          }\\n\\n          ret = elem.value; // Handle most common string cases\\n\\n          if (typeof ret === \"string\") {\\n            return ret.replace(rreturn, \"\");\\n          } // Handle cases where value is null/undef or number\\n\\n\\n          return ret == null ? \"\" : ret;\\n        }\\n\\n        return;\\n      }\\n\\n      valueIsFunction = isFunction(value);\\n      return this.each(function (i) {\\n        var val;\\n\\n        if (this.nodeType !== 1) {\\n          return;\\n        }\\n\\n        if (valueIsFunction) {\\n          val = value.call(this, i, jQuery(this).val());\\n        } else {\\n          val = value;\\n        } // Treat null/undefined as \"\"; convert numbers to string\\n\\n\\n        if (val == null) {\\n          val = \"\";\\n        } else if (typeof val === \"number\") {\\n          val += \"\";\\n        } else if (Array.isArray(val)) {\\n          val = jQuery.map(val, function (value) {\\n            return value == null ? \"\" : value + \"\";\\n          });\\n        }\\n\\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\\n\\n        if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\\n          this.value = val;\\n        }\\n      });\\n    }\\n  });\\n  jQuery.extend({\\n    valHooks: {\\n      option: {\\n        get: function get(elem) {\\n          var val = jQuery.find.attr(elem, \"value\");\\n          return val != null ? val : // Support: IE <=10 - 11 only\\n          // option.text throws exceptions (#14686, #14858)\\n          // Strip and collapse whitespace\\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\\n          stripAndCollapse(jQuery.text(elem));\\n        }\\n      },\\n      select: {\\n        get: function get(elem) {\\n          var value,\\n              option,\\n              i,\\n              options = elem.options,\\n              index = elem.selectedIndex,\\n              one = elem.type === \"select-one\",\\n              values = one ? null : [],\\n              max = one ? index + 1 : options.length;\\n\\n          if (index < 0) {\\n            i = max;\\n          } else {\\n            i = one ? index : 0;\\n          } // Loop through all the selected options\\n\\n\\n          for (; i < max; i++) {\\n            option = options[i]; // Support: IE <=9 only\\n            // IE8-9 doesn\\'t update selected after form reset (#2551)\\n\\n            if ((option.selected || i === index) && // Don\\'t return options that are disabled or in a disabled optgroup\\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, \"optgroup\"))) {\\n              // Get the specific value for the option\\n              value = jQuery(option).val(); // We don\\'t need an array for one selects\\n\\n              if (one) {\\n                return value;\\n              } // Multi-Selects return an array\\n\\n\\n              values.push(value);\\n            }\\n          }\\n\\n          return values;\\n        },\\n        set: function set(elem, value) {\\n          var optionSet,\\n              option,\\n              options = elem.options,\\n              values = jQuery.makeArray(value),\\n              i = options.length;\\n\\n          while (i--) {\\n            option = options[i];\\n            /* eslint-disable no-cond-assign */\\n\\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\\n              optionSet = true;\\n            }\\n            /* eslint-enable no-cond-assign */\\n\\n          } // Force browsers to behave consistently when non-matching value is set\\n\\n\\n          if (!optionSet) {\\n            elem.selectedIndex = -1;\\n          }\\n\\n          return values;\\n        }\\n      }\\n    }\\n  }); // Radios and checkboxes getter/setter\\n\\n  jQuery.each([\"radio\", \"checkbox\"], function () {\\n    jQuery.valHooks[this] = {\\n      set: function set(elem, value) {\\n        if (Array.isArray(value)) {\\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\\n        }\\n      }\\n    };\\n\\n    if (!support.checkOn) {\\n      jQuery.valHooks[this].get = function (elem) {\\n        return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\\n      };\\n    }\\n  }); // Return jQuery for attributes-only inclusion\\n\\n  support.focusin = \"onfocusin\" in window;\\n\\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\\n      stopPropagationCallback = function stopPropagationCallback(e) {\\n    e.stopPropagation();\\n  };\\n\\n  jQuery.extend(jQuery.event, {\\n    trigger: function trigger(event, data, elem, onlyHandlers) {\\n      var i,\\n          cur,\\n          tmp,\\n          bubbleType,\\n          ontype,\\n          handle,\\n          special,\\n          lastElement,\\n          eventPath = [elem || document],\\n          type = hasOwn.call(event, \"type\") ? event.type : event,\\n          namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\\n      cur = lastElement = tmp = elem = elem || document; // Don\\'t do events on text and comment nodes\\n\\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\\n        return;\\n      } // focus/blur morphs to focusin/out; ensure we\\'re not firing them right now\\n\\n\\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\\n        return;\\n      }\\n\\n      if (type.indexOf(\".\") > -1) {\\n        // Namespaced trigger; create a regexp to match event type in handle()\\n        namespaces = type.split(\".\");\\n        type = namespaces.shift();\\n        namespaces.sort();\\n      }\\n\\n      ontype = type.indexOf(\":\") < 0 && \"on\" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\\n\\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === \"object\" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\\n\\n      event.isTrigger = onlyHandlers ? 2 : 3;\\n      event.namespace = namespaces.join(\".\");\\n      event.rnamespace = event.namespace ? new RegExp(\"(^|\\\\\\\\.)\" + namespaces.join(\"\\\\\\\\.(?:.*\\\\\\\\.|)\") + \"(\\\\\\\\.|$)\") : null; // Clean up the event in case it is being reused\\n\\n      event.result = undefined;\\n\\n      if (!event.target) {\\n        event.target = elem;\\n      } // Clone any incoming data and prepend the event, creating the handler arg list\\n\\n\\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\\n\\n      special = jQuery.event.special[type] || {};\\n\\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\\n        return;\\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\\n\\n\\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\\n        bubbleType = special.delegateType || type;\\n\\n        if (!rfocusMorph.test(bubbleType + type)) {\\n          cur = cur.parentNode;\\n        }\\n\\n        for (; cur; cur = cur.parentNode) {\\n          eventPath.push(cur);\\n          tmp = cur;\\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\\n\\n\\n        if (tmp === (elem.ownerDocument || document)) {\\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\\n        }\\n      } // Fire handlers on the event path\\n\\n\\n      i = 0;\\n\\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\\n        lastElement = cur;\\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\\n\\n        handle = (dataPriv.get(cur, \"events\") || {})[event.type] && dataPriv.get(cur, \"handle\");\\n\\n        if (handle) {\\n          handle.apply(cur, data);\\n        } // Native handler\\n\\n\\n        handle = ontype && cur[ontype];\\n\\n        if (handle && handle.apply && acceptData(cur)) {\\n          event.result = handle.apply(cur, data);\\n\\n          if (event.result === false) {\\n            event.preventDefault();\\n          }\\n        }\\n      }\\n\\n      event.type = type; // If nobody prevented the default action, do it now\\n\\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\\n          // Call a native DOM method on the target with the same name as the event.\\n          // Don\\'t do default actions on window, that\\'s where global variables be (#6170)\\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\\n            // Don\\'t re-trigger an onFOO event when we call its FOO() method\\n            tmp = elem[ontype];\\n\\n            if (tmp) {\\n              elem[ontype] = null;\\n            } // Prevent re-triggering of the same event, since we already bubbled it above\\n\\n\\n            jQuery.event.triggered = type;\\n\\n            if (event.isPropagationStopped()) {\\n              lastElement.addEventListener(type, stopPropagationCallback);\\n            }\\n\\n            elem[type]();\\n\\n            if (event.isPropagationStopped()) {\\n              lastElement.removeEventListener(type, stopPropagationCallback);\\n            }\\n\\n            jQuery.event.triggered = undefined;\\n\\n            if (tmp) {\\n              elem[ontype] = tmp;\\n            }\\n          }\\n        }\\n      }\\n\\n      return event.result;\\n    },\\n    // Piggyback on a donor event to simulate a different one\\n    // Used only for `focus(in | out)` events\\n    simulate: function simulate(type, elem, event) {\\n      var e = jQuery.extend(new jQuery.Event(), event, {\\n        type: type,\\n        isSimulated: true\\n      });\\n      jQuery.event.trigger(e, null, elem);\\n    }\\n  });\\n  jQuery.fn.extend({\\n    trigger: function trigger(type, data) {\\n      return this.each(function () {\\n        jQuery.event.trigger(type, data, this);\\n      });\\n    },\\n    triggerHandler: function triggerHandler(type, data) {\\n      var elem = this[0];\\n\\n      if (elem) {\\n        return jQuery.event.trigger(type, data, elem, true);\\n      }\\n    }\\n  }); // Support: Firefox <=44\\n  // Firefox doesn\\'t have focus(in | out) events\\n  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\\n  //\\n  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\\n  // focus(in | out) events fire after focus & blur events,\\n  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\\n  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\\n\\n  if (!support.focusin) {\\n    jQuery.each({\\n      focus: \"focusin\",\\n      blur: \"focusout\"\\n    }, function (orig, fix) {\\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\\n      var handler = function handler(event) {\\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\\n      };\\n\\n      jQuery.event.special[fix] = {\\n        setup: function setup() {\\n          var doc = this.ownerDocument || this,\\n              attaches = dataPriv.access(doc, fix);\\n\\n          if (!attaches) {\\n            doc.addEventListener(orig, handler, true);\\n          }\\n\\n          dataPriv.access(doc, fix, (attaches || 0) + 1);\\n        },\\n        teardown: function teardown() {\\n          var doc = this.ownerDocument || this,\\n              attaches = dataPriv.access(doc, fix) - 1;\\n\\n          if (!attaches) {\\n            doc.removeEventListener(orig, handler, true);\\n            dataPriv.remove(doc, fix);\\n          } else {\\n            dataPriv.access(doc, fix, attaches);\\n          }\\n        }\\n      };\\n    });\\n  }\\n\\n  var location = window.location;\\n  var nonce = Date.now();\\n  var rquery = /\\\\?/; // Cross-browser xml parsing\\n\\n  jQuery.parseXML = function (data) {\\n    var xml;\\n\\n    if (!data || typeof data !== \"string\") {\\n      return null;\\n    } // Support: IE 9 - 11 only\\n    // IE throws on parseFromString with invalid input.\\n\\n\\n    try {\\n      xml = new window.DOMParser().parseFromString(data, \"text/xml\");\\n    } catch (e) {\\n      xml = undefined;\\n    }\\n\\n    if (!xml || xml.getElementsByTagName(\"parsererror\").length) {\\n      jQuery.error(\"Invalid XML: \" + data);\\n    }\\n\\n    return xml;\\n  };\\n\\n  var rbracket = /\\\\[\\\\]$/,\\n      rCRLF = /\\\\r?\\\\n/g,\\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\\n\\n  function buildParams(prefix, obj, traditional, add) {\\n    var name;\\n\\n    if (Array.isArray(obj)) {\\n      // Serialize array item.\\n      jQuery.each(obj, function (i, v) {\\n        if (traditional || rbracket.test(prefix)) {\\n          // Treat each array item as a scalar.\\n          add(prefix, v);\\n        } else {\\n          // Item is non-scalar (array or object), encode its numeric index.\\n          buildParams(prefix + \"[\" + (_typeof(v) === \"object\" && v != null ? i : \"\") + \"]\", v, traditional, add);\\n        }\\n      });\\n    } else if (!traditional && toType(obj) === \"object\") {\\n      // Serialize object item.\\n      for (name in obj) {\\n        buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\\n      }\\n    } else {\\n      // Serialize scalar item.\\n      add(prefix, obj);\\n    }\\n  } // Serialize an array of form elements or a set of\\n  // key/values into a query string\\n\\n\\n  jQuery.param = function (a, traditional) {\\n    var prefix,\\n        s = [],\\n        add = function add(key, valueOrFunction) {\\n      // If value is a function, invoke it and use its return value\\n      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\\n      s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value == null ? \"\" : value);\\n    };\\n\\n    if (a == null) {\\n      return \"\";\\n    } // If an array was passed in, assume that it is an array of form elements.\\n\\n\\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\\n      // Serialize the form elements\\n      jQuery.each(a, function () {\\n        add(this.name, this.value);\\n      });\\n    } else {\\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\\n      // did it), otherwise encode params recursively.\\n      for (prefix in a) {\\n        buildParams(prefix, a[prefix], traditional, add);\\n      }\\n    } // Return the resulting serialization\\n\\n\\n    return s.join(\"&\");\\n  };\\n\\n  jQuery.fn.extend({\\n    serialize: function serialize() {\\n      return jQuery.param(this.serializeArray());\\n    },\\n    serializeArray: function serializeArray() {\\n      return this.map(function () {\\n        // Can add propHook for \"elements\" to filter or add form elements\\n        var elements = jQuery.prop(this, \"elements\");\\n        return elements ? jQuery.makeArray(elements) : this;\\n      }).filter(function () {\\n        var type = this.type; // Use .is( \":disabled\" ) so that fieldset[disabled] works\\n\\n        return this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\\n      }).map(function (i, elem) {\\n        var val = jQuery(this).val();\\n\\n        if (val == null) {\\n          return null;\\n        }\\n\\n        if (Array.isArray(val)) {\\n          return jQuery.map(val, function (val) {\\n            return {\\n              name: elem.name,\\n              value: val.replace(rCRLF, \"\\\\r\\\\n\")\\n            };\\n          });\\n        }\\n\\n        return {\\n          name: elem.name,\\n          value: val.replace(rCRLF, \"\\\\r\\\\n\")\\n        };\\n      }).get();\\n    }\\n  });\\n  var r20 = /%20/g,\\n      rhash = /#.*$/,\\n      rantiCache = /([?&])_=[^&]*/,\\n      rheaders = /^(.*?):[ \\\\t]*([^\\\\r\\\\n]*)$/mg,\\n      // #7653, #8125, #8152: local protocol detection\\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\\n      rnoContent = /^(?:GET|HEAD)$/,\\n      rprotocol = /^\\\\/\\\\//,\\n\\n  /* Prefilters\\n  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\\n  * 2) These are called:\\n  *    - BEFORE asking for a transport\\n  *    - AFTER param serialization (s.data is a string if s.processData is true)\\n  * 3) key is the dataType\\n  * 4) the catchall symbol \"*\" can be used\\n  * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\\n  */\\n  prefilters = {},\\n\\n  /* Transports bindings\\n  * 1) key is the dataType\\n  * 2) the catchall symbol \"*\" can be used\\n  * 3) selection will start with transport dataType and THEN go to \"*\" if needed\\n  */\\n  transports = {},\\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\\n  allTypes = \"*/\".concat(\"*\"),\\n      // Anchor tag for parsing the document origin\\n  originAnchor = document.createElement(\"a\");\\n  originAnchor.href = location.href; // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\\n\\n  function addToPrefiltersOrTransports(structure) {\\n    // dataTypeExpression is optional and defaults to \"*\"\\n    return function (dataTypeExpression, func) {\\n      if (typeof dataTypeExpression !== \"string\") {\\n        func = dataTypeExpression;\\n        dataTypeExpression = \"*\";\\n      }\\n\\n      var dataType,\\n          i = 0,\\n          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\\n\\n      if (isFunction(func)) {\\n        // For each dataType in the dataTypeExpression\\n        while (dataType = dataTypes[i++]) {\\n          // Prepend if requested\\n          if (dataType[0] === \"+\") {\\n            dataType = dataType.slice(1) || \"*\";\\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\\n          } else {\\n            (structure[dataType] = structure[dataType] || []).push(func);\\n          }\\n        }\\n      }\\n    };\\n  } // Base inspection function for prefilters and transports\\n\\n\\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\\n    var inspected = {},\\n        seekingTransport = structure === transports;\\n\\n    function inspect(dataType) {\\n      var selected;\\n      inspected[dataType] = true;\\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\\n\\n        if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\\n          options.dataTypes.unshift(dataTypeOrTransport);\\n          inspect(dataTypeOrTransport);\\n          return false;\\n        } else if (seekingTransport) {\\n          return !(selected = dataTypeOrTransport);\\n        }\\n      });\\n      return selected;\\n    }\\n\\n    return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\\n  } // A special extend for ajax options\\n  // that takes \"flat\" options (not to be deep extended)\\n  // Fixes #9887\\n\\n\\n  function ajaxExtend(target, src) {\\n    var key,\\n        deep,\\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\\n\\n    for (key in src) {\\n      if (src[key] !== undefined) {\\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\\n      }\\n    }\\n\\n    if (deep) {\\n      jQuery.extend(true, target, deep);\\n    }\\n\\n    return target;\\n  }\\n  /* Handles responses to an ajax request:\\n  * - finds the right dataType (mediates between content-type and expected dataType)\\n  * - returns the corresponding response\\n  */\\n\\n\\n  function ajaxHandleResponses(s, jqXHR, responses) {\\n    var ct,\\n        type,\\n        finalDataType,\\n        firstDataType,\\n        contents = s.contents,\\n        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\\n\\n    while (dataTypes[0] === \"*\") {\\n      dataTypes.shift();\\n\\n      if (ct === undefined) {\\n        ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\\n      }\\n    } // Check if we\\'re dealing with a known content-type\\n\\n\\n    if (ct) {\\n      for (type in contents) {\\n        if (contents[type] && contents[type].test(ct)) {\\n          dataTypes.unshift(type);\\n          break;\\n        }\\n      }\\n    } // Check to see if we have a response for the expected dataType\\n\\n\\n    if (dataTypes[0] in responses) {\\n      finalDataType = dataTypes[0];\\n    } else {\\n      // Try convertible dataTypes\\n      for (type in responses) {\\n        if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\\n          finalDataType = type;\\n          break;\\n        }\\n\\n        if (!firstDataType) {\\n          firstDataType = type;\\n        }\\n      } // Or just use first one\\n\\n\\n      finalDataType = finalDataType || firstDataType;\\n    } // If we found a dataType\\n    // We add the dataType to the list if needed\\n    // and return the corresponding response\\n\\n\\n    if (finalDataType) {\\n      if (finalDataType !== dataTypes[0]) {\\n        dataTypes.unshift(finalDataType);\\n      }\\n\\n      return responses[finalDataType];\\n    }\\n  }\\n  /* Chain conversions given the request and the original response\\n  * Also sets the responseXXX fields on the jqXHR instance\\n  */\\n\\n\\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\\n    var conv2,\\n        current,\\n        conv,\\n        tmp,\\n        prev,\\n        converters = {},\\n        // Work with a copy of dataTypes in case we need to modify it for conversion\\n    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\\n\\n    if (dataTypes[1]) {\\n      for (conv in s.converters) {\\n        converters[conv.toLowerCase()] = s.converters[conv];\\n      }\\n    }\\n\\n    current = dataTypes.shift(); // Convert to each sequential dataType\\n\\n    while (current) {\\n      if (s.responseFields[current]) {\\n        jqXHR[s.responseFields[current]] = response;\\n      } // Apply the dataFilter if provided\\n\\n\\n      if (!prev && isSuccess && s.dataFilter) {\\n        response = s.dataFilter(response, s.dataType);\\n      }\\n\\n      prev = current;\\n      current = dataTypes.shift();\\n\\n      if (current) {\\n        // There\\'s only work to do if current dataType is non-auto\\n        if (current === \"*\") {\\n          current = prev; // Convert response if prev dataType is non-auto and differs from current\\n        } else if (prev !== \"*\" && prev !== current) {\\n          // Seek a direct converter\\n          conv = converters[prev + \" \" + current] || converters[\"* \" + current]; // If none found, seek a pair\\n\\n          if (!conv) {\\n            for (conv2 in converters) {\\n              // If conv2 outputs current\\n              tmp = conv2.split(\" \");\\n\\n              if (tmp[1] === current) {\\n                // If prev can be converted to accepted input\\n                conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\\n\\n                if (conv) {\\n                  // Condense equivalence converters\\n                  if (conv === true) {\\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\\n                  } else if (converters[conv2] !== true) {\\n                    current = tmp[0];\\n                    dataTypes.unshift(tmp[1]);\\n                  }\\n\\n                  break;\\n                }\\n              }\\n            }\\n          } // Apply converter (if not an equivalence)\\n\\n\\n          if (conv !== true) {\\n            // Unless errors are allowed to bubble, catch and return them\\n            if (conv && s[\"throws\"]) {\\n              response = conv(response);\\n            } else {\\n              try {\\n                response = conv(response);\\n              } catch (e) {\\n                return {\\n                  state: \"parsererror\",\\n                  error: conv ? e : \"No conversion from \" + prev + \" to \" + current\\n                };\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    return {\\n      state: \"success\",\\n      data: response\\n    };\\n  }\\n\\n  jQuery.extend({\\n    // Counter for holding the number of active queries\\n    active: 0,\\n    // Last-Modified header cache for next request\\n    lastModified: {},\\n    etag: {},\\n    ajaxSettings: {\\n      url: location.href,\\n      type: \"GET\",\\n      isLocal: rlocalProtocol.test(location.protocol),\\n      global: true,\\n      processData: true,\\n      async: true,\\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\\n\\n      /*\\n      timeout: 0,\\n      data: null,\\n      dataType: null,\\n      username: null,\\n      password: null,\\n      cache: null,\\n      throws: false,\\n      traditional: false,\\n      headers: {},\\n      */\\n      accepts: {\\n        \"*\": allTypes,\\n        text: \"text/plain\",\\n        html: \"text/html\",\\n        xml: \"application/xml, text/xml\",\\n        json: \"application/json, text/javascript\"\\n      },\\n      contents: {\\n        xml: /\\\\bxml\\\\b/,\\n        html: /\\\\bhtml/,\\n        json: /\\\\bjson\\\\b/\\n      },\\n      responseFields: {\\n        xml: \"responseXML\",\\n        text: \"responseText\",\\n        json: \"responseJSON\"\\n      },\\n      // Data converters\\n      // Keys separate source (or catchall \"*\") and destination types with a single space\\n      converters: {\\n        // Convert anything to text\\n        \"* text\": String,\\n        // Text to html (true = no transformation)\\n        \"text html\": true,\\n        // Evaluate text as a json expression\\n        \"text json\": JSON.parse,\\n        // Parse text as xml\\n        \"text xml\": jQuery.parseXML\\n      },\\n      // For options that shouldn\\'t be deep extended:\\n      // you can add your own custom options here if\\n      // and when you create one that shouldn\\'t be\\n      // deep extended (see ajaxExtend)\\n      flatOptions: {\\n        url: true,\\n        context: true\\n      }\\n    },\\n    // Creates a full fledged settings object into target\\n    // with both ajaxSettings and settings fields.\\n    // If target is omitted, writes into ajaxSettings.\\n    ajaxSetup: function ajaxSetup(target, settings) {\\n      return settings ? // Building a settings object\\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\\n      ajaxExtend(jQuery.ajaxSettings, target);\\n    },\\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\\n    ajaxTransport: addToPrefiltersOrTransports(transports),\\n    // Main method\\n    ajax: function ajax(url, options) {\\n      // If url is an object, simulate pre-1.5 signature\\n      if (_typeof(url) === \"object\") {\\n        options = url;\\n        url = undefined;\\n      } // Force options to be an object\\n\\n\\n      options = options || {};\\n\\n      var transport,\\n          // URL without anti-cache param\\n      cacheURL,\\n          // Response headers\\n      responseHeadersString,\\n          responseHeaders,\\n          // timeout handle\\n      timeoutTimer,\\n          // Url cleanup var\\n      urlAnchor,\\n          // Request state (becomes false upon send and true upon completion)\\n      completed,\\n          // To know if global events are to be dispatched\\n      fireGlobals,\\n          // Loop variable\\n      i,\\n          // uncached part of the url\\n      uncached,\\n          // Create the final options object\\n      s = jQuery.ajaxSetup({}, options),\\n          // Callbacks context\\n      callbackContext = s.context || s,\\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\\n          // Deferreds\\n      deferred = jQuery.Deferred(),\\n          completeDeferred = jQuery.Callbacks(\"once memory\"),\\n          // Status-dependent callbacks\\n      _statusCode = s.statusCode || {},\\n          // Headers (they are sent all at once)\\n      requestHeaders = {},\\n          requestHeadersNames = {},\\n          // Default abort message\\n      strAbort = \"canceled\",\\n          // Fake xhr\\n      jqXHR = {\\n        readyState: 0,\\n        // Builds headers hashtable if needed\\n        getResponseHeader: function getResponseHeader(key) {\\n          var match;\\n\\n          if (completed) {\\n            if (!responseHeaders) {\\n              responseHeaders = {};\\n\\n              while (match = rheaders.exec(responseHeadersString)) {\\n                responseHeaders[match[1].toLowerCase() + \" \"] = (responseHeaders[match[1].toLowerCase() + \" \"] || []).concat(match[2]);\\n              }\\n            }\\n\\n            match = responseHeaders[key.toLowerCase() + \" \"];\\n          }\\n\\n          return match == null ? null : match.join(\", \");\\n        },\\n        // Raw string\\n        getAllResponseHeaders: function getAllResponseHeaders() {\\n          return completed ? responseHeadersString : null;\\n        },\\n        // Caches the header\\n        setRequestHeader: function setRequestHeader(name, value) {\\n          if (completed == null) {\\n            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\\n            requestHeaders[name] = value;\\n          }\\n\\n          return this;\\n        },\\n        // Overrides response content-type header\\n        overrideMimeType: function overrideMimeType(type) {\\n          if (completed == null) {\\n            s.mimeType = type;\\n          }\\n\\n          return this;\\n        },\\n        // Status-dependent callbacks\\n        statusCode: function statusCode(map) {\\n          var code;\\n\\n          if (map) {\\n            if (completed) {\\n              // Execute the appropriate callbacks\\n              jqXHR.always(map[jqXHR.status]);\\n            } else {\\n              // Lazy-add the new callbacks in a way that preserves old ones\\n              for (code in map) {\\n                _statusCode[code] = [_statusCode[code], map[code]];\\n              }\\n            }\\n          }\\n\\n          return this;\\n        },\\n        // Cancel the request\\n        abort: function abort(statusText) {\\n          var finalText = statusText || strAbort;\\n\\n          if (transport) {\\n            transport.abort(finalText);\\n          }\\n\\n          done(0, finalText);\\n          return this;\\n        }\\n      }; // Attach deferreds\\n\\n\\n      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)\\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\\n      // We also use the url parameter if available\\n\\n      s.url = ((url || s.url || location.href) + \"\").replace(rprotocol, location.protocol + \"//\"); // Alias method option to type as per ticket #12004\\n\\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\\n\\n      s.dataTypes = (s.dataType || \"*\").toLowerCase().match(rnothtmlwhite) || [\"\"]; // A cross-domain request is in order when the origin doesn\\'t match the current origin.\\n\\n      if (s.crossDomain == null) {\\n        urlAnchor = document.createElement(\"a\"); // Support: IE <=8 - 11, Edge 12 - 15\\n        // IE throws exception on accessing the href property if url is malformed,\\n        // e.g. http://example.com:80x/\\n\\n        try {\\n          urlAnchor.href = s.url; // Support: IE <=8 - 11 only\\n          // Anchor\\'s host property isn\\'t correctly set when s.url is relative\\n\\n          urlAnchor.href = urlAnchor.href;\\n          s.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !== urlAnchor.protocol + \"//\" + urlAnchor.host;\\n        } catch (e) {\\n          // If there is an error parsing the URL, assume it is crossDomain,\\n          // it can be rejected by the transport if it is invalid\\n          s.crossDomain = true;\\n        }\\n      } // Convert data if not already a string\\n\\n\\n      if (s.data && s.processData && typeof s.data !== \"string\") {\\n        s.data = jQuery.param(s.data, s.traditional);\\n      } // Apply prefilters\\n\\n\\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\\n\\n      if (completed) {\\n        return jqXHR;\\n      } // We can fire global events as of now if asked to\\n      // Don\\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\\n\\n\\n      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\\n\\n      if (fireGlobals && jQuery.active++ === 0) {\\n        jQuery.event.trigger(\"ajaxStart\");\\n      } // Uppercase the type\\n\\n\\n      s.type = s.type.toUpperCase(); // Determine if request has content\\n\\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we\\'re toying with the If-Modified-Since\\n      // and/or If-None-Match header later on\\n      // Remove hash to simplify url manipulation\\n\\n      cacheURL = s.url.replace(rhash, \"\"); // More options handling for requests with no content\\n\\n      if (!s.hasContent) {\\n        // Remember the hash so we can put it back\\n        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url\\n\\n        if (s.data && (s.processData || typeof s.data === \"string\")) {\\n          cacheURL += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data; // #9682: remove data so that it\\'s not used in an eventual retry\\n\\n          delete s.data;\\n        } // Add or update anti-cache param if needed\\n\\n\\n        if (s.cache === false) {\\n          cacheURL = cacheURL.replace(rantiCache, \"$1\");\\n          uncached = (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++ + uncached;\\n        } // Put hash and anti-cache on the URL that will be requested (gh-1732)\\n\\n\\n        s.url = cacheURL + uncached; // Change \\'%20\\' to \\'+\\' if this is encoded form body content (gh-2658)\\n      } else if (s.data && s.processData && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0) {\\n        s.data = s.data.replace(r20, \"+\");\\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\\n\\n\\n      if (s.ifModified) {\\n        if (jQuery.lastModified[cacheURL]) {\\n          jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\\n        }\\n\\n        if (jQuery.etag[cacheURL]) {\\n          jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\\n        }\\n      } // Set the correct header, if data is being sent\\n\\n\\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\\n        jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\\n      } // Set the Accepts header for the server, depending on the dataType\\n\\n\\n      jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]); // Check for headers option\\n\\n      for (i in s.headers) {\\n        jqXHR.setRequestHeader(i, s.headers[i]);\\n      } // Allow custom headers/mimetypes and early abort\\n\\n\\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\\n        // Abort if not done already and return\\n        return jqXHR.abort();\\n      } // Aborting is no longer a cancellation\\n\\n\\n      strAbort = \"abort\"; // Install callbacks on deferreds\\n\\n      completeDeferred.add(s.complete);\\n      jqXHR.done(s.success);\\n      jqXHR.fail(s.error); // Get transport\\n\\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\\n\\n      if (!transport) {\\n        done(-1, \"No Transport\");\\n      } else {\\n        jqXHR.readyState = 1; // Send global event\\n\\n        if (fireGlobals) {\\n          globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\\n        } // If request was aborted inside ajaxSend, stop there\\n\\n\\n        if (completed) {\\n          return jqXHR;\\n        } // Timeout\\n\\n\\n        if (s.async && s.timeout > 0) {\\n          timeoutTimer = window.setTimeout(function () {\\n            jqXHR.abort(\"timeout\");\\n          }, s.timeout);\\n        }\\n\\n        try {\\n          completed = false;\\n          transport.send(requestHeaders, done);\\n        } catch (e) {\\n          // Rethrow post-completion exceptions\\n          if (completed) {\\n            throw e;\\n          } // Propagate others as results\\n\\n\\n          done(-1, e);\\n        }\\n      } // Callback for when everything is done\\n\\n\\n      function done(status, nativeStatusText, responses, headers) {\\n        var isSuccess,\\n            success,\\n            error,\\n            response,\\n            modified,\\n            statusText = nativeStatusText; // Ignore repeat invocations\\n\\n        if (completed) {\\n          return;\\n        }\\n\\n        completed = true; // Clear timeout if it exists\\n\\n        if (timeoutTimer) {\\n          window.clearTimeout(timeoutTimer);\\n        } // Dereference transport for early garbage collection\\n        // (no matter how long the jqXHR object will be used)\\n\\n\\n        transport = undefined; // Cache response headers\\n\\n        responseHeadersString = headers || \"\"; // Set readyState\\n\\n        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\\n\\n        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\\n\\n        if (responses) {\\n          response = ajaxHandleResponses(s, jqXHR, responses);\\n        } // Convert no matter what (that way responseXXX fields are always set)\\n\\n\\n        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\\n\\n        if (isSuccess) {\\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\\n          if (s.ifModified) {\\n            modified = jqXHR.getResponseHeader(\"Last-Modified\");\\n\\n            if (modified) {\\n              jQuery.lastModified[cacheURL] = modified;\\n            }\\n\\n            modified = jqXHR.getResponseHeader(\"etag\");\\n\\n            if (modified) {\\n              jQuery.etag[cacheURL] = modified;\\n            }\\n          } // if no content\\n\\n\\n          if (status === 204 || s.type === \"HEAD\") {\\n            statusText = \"nocontent\"; // if not modified\\n          } else if (status === 304) {\\n            statusText = \"notmodified\"; // If we have data, let\\'s convert it\\n          } else {\\n            statusText = response.state;\\n            success = response.data;\\n            error = response.error;\\n            isSuccess = !error;\\n          }\\n        } else {\\n          // Extract error from statusText and normalize for non-aborts\\n          error = statusText;\\n\\n          if (status || !statusText) {\\n            statusText = \"error\";\\n\\n            if (status < 0) {\\n              status = 0;\\n            }\\n          }\\n        } // Set data for the fake xhr object\\n\\n\\n        jqXHR.status = status;\\n        jqXHR.statusText = (nativeStatusText || statusText) + \"\"; // Success/Error\\n\\n        if (isSuccess) {\\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\\n        } else {\\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\\n        } // Status-dependent callbacks\\n\\n\\n        jqXHR.statusCode(_statusCode);\\n        _statusCode = undefined;\\n\\n        if (fireGlobals) {\\n          globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\\n        } // Complete\\n\\n\\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\\n\\n        if (fireGlobals) {\\n          globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]); // Handle the global AJAX counter\\n\\n          if (! --jQuery.active) {\\n            jQuery.event.trigger(\"ajaxStop\");\\n          }\\n        }\\n      }\\n\\n      return jqXHR;\\n    },\\n    getJSON: function getJSON(url, data, callback) {\\n      return jQuery.get(url, data, callback, \"json\");\\n    },\\n    getScript: function getScript(url, callback) {\\n      return jQuery.get(url, undefined, callback, \"script\");\\n    }\\n  });\\n  jQuery.each([\"get\", \"post\"], function (i, method) {\\n    jQuery[method] = function (url, data, callback, type) {\\n      // Shift arguments if data argument was omitted\\n      if (isFunction(data)) {\\n        type = type || callback;\\n        callback = data;\\n        data = undefined;\\n      } // The url can be an options object (which then must have .url)\\n\\n\\n      return jQuery.ajax(jQuery.extend({\\n        url: url,\\n        type: method,\\n        dataType: type,\\n        data: data,\\n        success: callback\\n      }, jQuery.isPlainObject(url) && url));\\n    };\\n  });\\n\\n  jQuery._evalUrl = function (url, options) {\\n    return jQuery.ajax({\\n      url: url,\\n      // Make this explicit, since user can override this through ajaxSetup (#11264)\\n      type: \"GET\",\\n      dataType: \"script\",\\n      cache: true,\\n      async: false,\\n      global: false,\\n      // Only evaluate the response if it is successful (gh-4126)\\n      // dataFilter is not invoked for failure responses, so using it instead\\n      // of the default converter is kludgy but it works.\\n      converters: {\\n        \"text script\": function textScript() {}\\n      },\\n      dataFilter: function dataFilter(response) {\\n        jQuery.globalEval(response, options);\\n      }\\n    });\\n  };\\n\\n  jQuery.fn.extend({\\n    wrapAll: function wrapAll(html) {\\n      var wrap;\\n\\n      if (this[0]) {\\n        if (isFunction(html)) {\\n          html = html.call(this[0]);\\n        } // The elements to wrap the target around\\n\\n\\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\\n\\n        if (this[0].parentNode) {\\n          wrap.insertBefore(this[0]);\\n        }\\n\\n        wrap.map(function () {\\n          var elem = this;\\n\\n          while (elem.firstElementChild) {\\n            elem = elem.firstElementChild;\\n          }\\n\\n          return elem;\\n        }).append(this);\\n      }\\n\\n      return this;\\n    },\\n    wrapInner: function wrapInner(html) {\\n      if (isFunction(html)) {\\n        return this.each(function (i) {\\n          jQuery(this).wrapInner(html.call(this, i));\\n        });\\n      }\\n\\n      return this.each(function () {\\n        var self = jQuery(this),\\n            contents = self.contents();\\n\\n        if (contents.length) {\\n          contents.wrapAll(html);\\n        } else {\\n          self.append(html);\\n        }\\n      });\\n    },\\n    wrap: function wrap(html) {\\n      var htmlIsFunction = isFunction(html);\\n      return this.each(function (i) {\\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\\n      });\\n    },\\n    unwrap: function unwrap(selector) {\\n      this.parent(selector).not(\"body\").each(function () {\\n        jQuery(this).replaceWith(this.childNodes);\\n      });\\n      return this;\\n    }\\n  });\\n\\n  jQuery.expr.pseudos.hidden = function (elem) {\\n    return !jQuery.expr.pseudos.visible(elem);\\n  };\\n\\n  jQuery.expr.pseudos.visible = function (elem) {\\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\\n  };\\n\\n  jQuery.ajaxSettings.xhr = function () {\\n    try {\\n      return new window.XMLHttpRequest();\\n    } catch (e) {}\\n  };\\n\\n  var xhrSuccessStatus = {\\n    // File protocol always yields status code 0, assume 200\\n    0: 200,\\n    // Support: IE <=9 only\\n    // #1450: sometimes IE returns 1223 when it should be 204\\n    1223: 204\\n  },\\n      xhrSupported = jQuery.ajaxSettings.xhr();\\n  support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\\n  support.ajax = xhrSupported = !!xhrSupported;\\n  jQuery.ajaxTransport(function (options) {\\n    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest\\n\\n\\n    if (support.cors || xhrSupported && !options.crossDomain) {\\n      return {\\n        send: function send(headers, complete) {\\n          var i,\\n              xhr = options.xhr();\\n          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\\n\\n          if (options.xhrFields) {\\n            for (i in options.xhrFields) {\\n              xhr[i] = options.xhrFields[i];\\n            }\\n          } // Override mime type if needed\\n\\n\\n          if (options.mimeType && xhr.overrideMimeType) {\\n            xhr.overrideMimeType(options.mimeType);\\n          } // X-Requested-With header\\n          // For cross-domain requests, seeing as conditions for a preflight are\\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\\n          // (it can always be set on a per-request basis or even using ajaxSetup)\\n          // For same-domain requests, won\\'t change header if already provided.\\n\\n\\n          if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\\n            headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\\n          } // Set headers\\n\\n\\n          for (i in headers) {\\n            xhr.setRequestHeader(i, headers[i]);\\n          } // Callback\\n\\n\\n          _callback = function callback(type) {\\n            return function () {\\n              if (_callback) {\\n                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\\n\\n                if (type === \"abort\") {\\n                  xhr.abort();\\n                } else if (type === \"error\") {\\n                  // Support: IE <=9 only\\n                  // On a manual native abort, IE9 throws\\n                  // errors on any property access that is not readyState\\n                  if (typeof xhr.status !== \"number\") {\\n                    complete(0, \"error\");\\n                  } else {\\n                    complete( // File: protocol always yields status 0; see #8605, #14207\\n                    xhr.status, xhr.statusText);\\n                  }\\n                } else {\\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only\\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\\n                  (xhr.responseType || \"text\") !== \"text\" || typeof xhr.responseText !== \"string\" ? {\\n                    binary: xhr.response\\n                  } : {\\n                    text: xhr.responseText\\n                  }, xhr.getAllResponseHeaders());\\n                }\\n              }\\n            };\\n          }; // Listen to events\\n\\n\\n          xhr.onload = _callback();\\n          errorCallback = xhr.onerror = xhr.ontimeout = _callback(\"error\"); // Support: IE 9 only\\n          // Use onreadystatechange to replace onabort\\n          // to handle uncaught aborts\\n\\n          if (xhr.onabort !== undefined) {\\n            xhr.onabort = errorCallback;\\n          } else {\\n            xhr.onreadystatechange = function () {\\n              // Check readyState before timeout as it changes\\n              if (xhr.readyState === 4) {\\n                // Allow onerror to be called first,\\n                // but that will not handle a native abort\\n                // Also, save errorCallback to a variable\\n                // as xhr.onerror cannot be accessed\\n                window.setTimeout(function () {\\n                  if (_callback) {\\n                    errorCallback();\\n                  }\\n                });\\n              }\\n            };\\n          } // Create the abort callback\\n\\n\\n          _callback = _callback(\"abort\");\\n\\n          try {\\n            // Do send the request (this may raise an exception)\\n            xhr.send(options.hasContent && options.data || null);\\n          } catch (e) {\\n            // #14683: Only rethrow if this hasn\\'t been notified as an error yet\\n            if (_callback) {\\n              throw e;\\n            }\\n          }\\n        },\\n        abort: function abort() {\\n          if (_callback) {\\n            _callback();\\n          }\\n        }\\n      };\\n    }\\n  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\\n\\n  jQuery.ajaxPrefilter(function (s) {\\n    if (s.crossDomain) {\\n      s.contents.script = false;\\n    }\\n  }); // Install script dataType\\n\\n  jQuery.ajaxSetup({\\n    accepts: {\\n      script: \"text/javascript, application/javascript, \" + \"application/ecmascript, application/x-ecmascript\"\\n    },\\n    contents: {\\n      script: /\\\\b(?:java|ecma)script\\\\b/\\n    },\\n    converters: {\\n      \"text script\": function textScript(text) {\\n        jQuery.globalEval(text);\\n        return text;\\n      }\\n    }\\n  }); // Handle cache\\'s special case and crossDomain\\n\\n  jQuery.ajaxPrefilter(\"script\", function (s) {\\n    if (s.cache === undefined) {\\n      s.cache = false;\\n    }\\n\\n    if (s.crossDomain) {\\n      s.type = \"GET\";\\n    }\\n  }); // Bind script tag hack transport\\n\\n  jQuery.ajaxTransport(\"script\", function (s) {\\n    // This transport only deals with cross domain or forced-by-attrs requests\\n    if (s.crossDomain || s.scriptAttrs) {\\n      var script, _callback2;\\n\\n      return {\\n        send: function send(_, complete) {\\n          script = jQuery(\"<script>\").attr(s.scriptAttrs || {}).prop({\\n            charset: s.scriptCharset,\\n            src: s.url\\n          }).on(\"load error\", _callback2 = function callback(evt) {\\n            script.remove();\\n            _callback2 = null;\\n\\n            if (evt) {\\n              complete(evt.type === \"error\" ? 404 : 200, evt.type);\\n            }\\n          }); // Use native DOM manipulation to avoid our domManip AJAX trickery\\n\\n          document.head.appendChild(script[0]);\\n        },\\n        abort: function abort() {\\n          if (_callback2) {\\n            _callback2();\\n          }\\n        }\\n      };\\n    }\\n  });\\n  var oldCallbacks = [],\\n      rjsonp = /(=)\\\\?(?=&|$)|\\\\?\\\\?/; // Default jsonp settings\\n\\n  jQuery.ajaxSetup({\\n    jsonp: \"callback\",\\n    jsonpCallback: function jsonpCallback() {\\n      var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\\n      this[callback] = true;\\n      return callback;\\n    }\\n  }); // Detect, normalize options and install callbacks for jsonp requests\\n\\n  jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\\n    var callbackName,\\n        overwritten,\\n        responseContainer,\\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\"); // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\\n\\n    if (jsonProp || s.dataTypes[0] === \"jsonp\") {\\n      // Get callback name, remembering preexisting value associated with it\\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\\n\\n      if (jsonProp) {\\n        s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\\n      } else if (s.jsonp !== false) {\\n        s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\\n      } // Use data converter to retrieve json after script execution\\n\\n\\n      s.converters[\"script json\"] = function () {\\n        if (!responseContainer) {\\n          jQuery.error(callbackName + \" was not called\");\\n        }\\n\\n        return responseContainer[0];\\n      }; // Force json dataType\\n\\n\\n      s.dataTypes[0] = \"json\"; // Install callback\\n\\n      overwritten = window[callbackName];\\n\\n      window[callbackName] = function () {\\n        responseContainer = arguments;\\n      }; // Clean-up function (fires after converters)\\n\\n\\n      jqXHR.always(function () {\\n        // If previous value didn\\'t exist - remove it\\n        if (overwritten === undefined) {\\n          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\\n        } else {\\n          window[callbackName] = overwritten;\\n        } // Save back as free\\n\\n\\n        if (s[callbackName]) {\\n          // Make sure that re-using the options doesn\\'t screw things around\\n          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\\n\\n          oldCallbacks.push(callbackName);\\n        } // Call if it was a function and we have a response\\n\\n\\n        if (responseContainer && isFunction(overwritten)) {\\n          overwritten(responseContainer[0]);\\n        }\\n\\n        responseContainer = overwritten = undefined;\\n      }); // Delegate to script\\n\\n      return \"script\";\\n    }\\n  }); // Support: Safari 8 only\\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\\n  // collapse sibling forms: the second one becomes a child of the first one.\\n  // Because of that, this security measure has to be disabled in Safari 8.\\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\\n\\n  support.createHTMLDocument = function () {\\n    var body = document.implementation.createHTMLDocument(\"\").body;\\n    body.innerHTML = \"<form></form><form></form>\";\\n    return body.childNodes.length === 2;\\n  }(); // Argument \"data\" should be string of html\\n  // context (optional): If specified, the fragment will be created in this context,\\n  // defaults to document\\n  // keepScripts (optional): If true, will include scripts passed in the html string\\n\\n\\n  jQuery.parseHTML = function (data, context, keepScripts) {\\n    if (typeof data !== \"string\") {\\n      return [];\\n    }\\n\\n    if (typeof context === \"boolean\") {\\n      keepScripts = context;\\n      context = false;\\n    }\\n\\n    var base, parsed, scripts;\\n\\n    if (!context) {\\n      // Stop scripts or inline event handlers from being executed immediately\\n      // by using document.implementation\\n      if (support.createHTMLDocument) {\\n        context = document.implementation.createHTMLDocument(\"\"); // Set the base href for the created document\\n        // so any parsed elements with URLs\\n        // are based on the document\\'s URL (gh-2965)\\n\\n        base = context.createElement(\"base\");\\n        base.href = document.location.href;\\n        context.head.appendChild(base);\\n      } else {\\n        context = document;\\n      }\\n    }\\n\\n    parsed = rsingleTag.exec(data);\\n    scripts = !keepScripts && []; // Single tag\\n\\n    if (parsed) {\\n      return [context.createElement(parsed[1])];\\n    }\\n\\n    parsed = buildFragment([data], context, scripts);\\n\\n    if (scripts && scripts.length) {\\n      jQuery(scripts).remove();\\n    }\\n\\n    return jQuery.merge([], parsed.childNodes);\\n  };\\n  /**\\n   * Load a url into a page\\n   */\\n\\n\\n  jQuery.fn.load = function (url, params, callback) {\\n    var selector,\\n        type,\\n        response,\\n        self = this,\\n        off = url.indexOf(\" \");\\n\\n    if (off > -1) {\\n      selector = stripAndCollapse(url.slice(off));\\n      url = url.slice(0, off);\\n    } // If it\\'s a function\\n\\n\\n    if (isFunction(params)) {\\n      // We assume that it\\'s the callback\\n      callback = params;\\n      params = undefined; // Otherwise, build a param string\\n    } else if (params && _typeof(params) === \"object\") {\\n      type = \"POST\";\\n    } // If we have elements to modify, make the request\\n\\n\\n    if (self.length > 0) {\\n      jQuery.ajax({\\n        url: url,\\n        // If \"type\" variable is undefined, then \"GET\" method will be used.\\n        // Make value of this field explicit since\\n        // user can override it through ajaxSetup method\\n        type: type || \"GET\",\\n        dataType: \"html\",\\n        data: params\\n      }).done(function (responseText) {\\n        // Save response for use in complete callback\\n        response = arguments;\\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\\n        // Exclude scripts to avoid IE \\'Permission Denied\\' errors\\n        jQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\\n        responseText); // If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\\n        // but they are ignored because response was set above.\\n        // If it fails, this function gets \"jqXHR\", \"status\", \"error\"\\n      }).always(callback && function (jqXHR, status) {\\n        self.each(function () {\\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\\n        });\\n      });\\n    }\\n\\n    return this;\\n  }; // Attach a bunch of functions for handling common AJAX events\\n\\n\\n  jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\\n    jQuery.fn[type] = function (fn) {\\n      return this.on(type, fn);\\n    };\\n  });\\n\\n  jQuery.expr.pseudos.animated = function (elem) {\\n    return jQuery.grep(jQuery.timers, function (fn) {\\n      return elem === fn.elem;\\n    }).length;\\n  };\\n\\n  jQuery.offset = {\\n    setOffset: function setOffset(elem, options, i) {\\n      var curPosition,\\n          curLeft,\\n          curCSSTop,\\n          curTop,\\n          curOffset,\\n          curCSSLeft,\\n          calculatePosition,\\n          position = jQuery.css(elem, \"position\"),\\n          curElem = jQuery(elem),\\n          props = {}; // Set position first, in-case top/left are set even on static elem\\n\\n      if (position === \"static\") {\\n        elem.style.position = \"relative\";\\n      }\\n\\n      curOffset = curElem.offset();\\n      curCSSTop = jQuery.css(elem, \"top\");\\n      curCSSLeft = jQuery.css(elem, \"left\");\\n      calculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1; // Need to be able to calculate position if either\\n      // top or left is auto and position is either absolute or fixed\\n\\n      if (calculatePosition) {\\n        curPosition = curElem.position();\\n        curTop = curPosition.top;\\n        curLeft = curPosition.left;\\n      } else {\\n        curTop = parseFloat(curCSSTop) || 0;\\n        curLeft = parseFloat(curCSSLeft) || 0;\\n      }\\n\\n      if (isFunction(options)) {\\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\\n      }\\n\\n      if (options.top != null) {\\n        props.top = options.top - curOffset.top + curTop;\\n      }\\n\\n      if (options.left != null) {\\n        props.left = options.left - curOffset.left + curLeft;\\n      }\\n\\n      if (\"using\" in options) {\\n        options.using.call(elem, props);\\n      } else {\\n        curElem.css(props);\\n      }\\n    }\\n  };\\n  jQuery.fn.extend({\\n    // offset() relates an element\\'s border box to the document origin\\n    offset: function offset(options) {\\n      // Preserve chaining for setter\\n      if (arguments.length) {\\n        return options === undefined ? this : this.each(function (i) {\\n          jQuery.offset.setOffset(this, options, i);\\n        });\\n      }\\n\\n      var rect,\\n          win,\\n          elem = this[0];\\n\\n      if (!elem) {\\n        return;\\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\\n      // Support: IE <=11 only\\n      // Running getBoundingClientRect on a\\n      // disconnected node in IE throws an error\\n\\n\\n      if (!elem.getClientRects().length) {\\n        return {\\n          top: 0,\\n          left: 0\\n        };\\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\\n\\n\\n      rect = elem.getBoundingClientRect();\\n      win = elem.ownerDocument.defaultView;\\n      return {\\n        top: rect.top + win.pageYOffset,\\n        left: rect.left + win.pageXOffset\\n      };\\n    },\\n    // position() relates an element\\'s margin box to its offset parent\\'s padding box\\n    // This corresponds to the behavior of CSS absolute positioning\\n    position: function position() {\\n      if (!this[0]) {\\n        return;\\n      }\\n\\n      var offsetParent,\\n          offset,\\n          doc,\\n          elem = this[0],\\n          parentOffset = {\\n        top: 0,\\n        left: 0\\n      }; // position:fixed elements are offset from the viewport, which itself always has zero offset\\n\\n      if (jQuery.css(elem, \"position\") === \"fixed\") {\\n        // Assume position:fixed implies availability of getBoundingClientRect\\n        offset = elem.getBoundingClientRect();\\n      } else {\\n        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element\\n        // when a statically positioned element is identified\\n\\n        doc = elem.ownerDocument;\\n        offsetParent = elem.offsetParent || doc.documentElement;\\n\\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, \"position\") === \"static\") {\\n          offsetParent = offsetParent.parentNode;\\n        }\\n\\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\\n          // Incorporate borders into its offset, since they are outside its content origin\\n          parentOffset = jQuery(offsetParent).offset();\\n          parentOffset.top += jQuery.css(offsetParent, \"borderTopWidth\", true);\\n          parentOffset.left += jQuery.css(offsetParent, \"borderLeftWidth\", true);\\n        }\\n      } // Subtract parent offsets and element margins\\n\\n\\n      return {\\n        top: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\\n        left: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\\n      };\\n    },\\n    // This method will return documentElement in the following cases:\\n    // 1) For the element inside the iframe without offsetParent, this method will return\\n    //    documentElement of the parent window\\n    // 2) For the hidden or detached element\\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\\n    //\\n    // but those exceptions were never presented as a real life use-cases\\n    // and might be considered as more preferable results.\\n    //\\n    // This logic, however, is not guaranteed and can change at any point in the future\\n    offsetParent: function offsetParent() {\\n      return this.map(function () {\\n        var offsetParent = this.offsetParent;\\n\\n        while (offsetParent && jQuery.css(offsetParent, \"position\") === \"static\") {\\n          offsetParent = offsetParent.offsetParent;\\n        }\\n\\n        return offsetParent || documentElement;\\n      });\\n    }\\n  }); // Create scrollLeft and scrollTop methods\\n\\n  jQuery.each({\\n    scrollLeft: \"pageXOffset\",\\n    scrollTop: \"pageYOffset\"\\n  }, function (method, prop) {\\n    var top = \"pageYOffset\" === prop;\\n\\n    jQuery.fn[method] = function (val) {\\n      return access(this, function (elem, method, val) {\\n        // Coalesce documents and windows\\n        var win;\\n\\n        if (isWindow(elem)) {\\n          win = elem;\\n        } else if (elem.nodeType === 9) {\\n          win = elem.defaultView;\\n        }\\n\\n        if (val === undefined) {\\n          return win ? win[prop] : elem[method];\\n        }\\n\\n        if (win) {\\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\\n        } else {\\n          elem[method] = val;\\n        }\\n      }, method, val, arguments.length);\\n    };\\n  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49\\n  // Add the top/left cssHooks using jQuery.fn.position\\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\\n  // rather than make the css module depend on the offset module, just check for it here\\n\\n  jQuery.each([\"top\", \"left\"], function (i, prop) {\\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\\n      if (computed) {\\n        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\\n\\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\\n      }\\n    });\\n  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\\n\\n  jQuery.each({\\n    Height: \"height\",\\n    Width: \"width\"\\n  }, function (name, type) {\\n    jQuery.each({\\n      padding: \"inner\" + name,\\n      content: type,\\n      \"\": \"outer\" + name\\n    }, function (defaultExtra, funcName) {\\n      // Margin is only for outerHeight, outerWidth\\n      jQuery.fn[funcName] = function (margin, value) {\\n        var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\\n            extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\\n        return access(this, function (elem, type, value) {\\n          var doc;\\n\\n          if (isWindow(elem)) {\\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\\n            return funcName.indexOf(\"outer\") === 0 ? elem[\"inner\" + name] : elem.document.documentElement[\"client\" + name];\\n          } // Get document width or height\\n\\n\\n          if (elem.nodeType === 9) {\\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\\n            // whichever is greatest\\n\\n            return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\\n          }\\n\\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\\n          jQuery.css(elem, type, extra) : // Set width or height on the element\\n          jQuery.style(elem, type, value, extra);\\n        }, type, chainable ? margin : undefined, chainable);\\n      };\\n    });\\n  });\\n  jQuery.each((\"blur focus focusin focusout resize scroll click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup contextmenu\").split(\" \"), function (i, name) {\\n    // Handle event binding\\n    jQuery.fn[name] = function (data, fn) {\\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\\n    };\\n  });\\n  jQuery.fn.extend({\\n    hover: function hover(fnOver, fnOut) {\\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\\n    }\\n  });\\n  jQuery.fn.extend({\\n    bind: function bind(types, data, fn) {\\n      return this.on(types, null, data, fn);\\n    },\\n    unbind: function unbind(types, fn) {\\n      return this.off(types, null, fn);\\n    },\\n    delegate: function delegate(selector, types, data, fn) {\\n      return this.on(types, selector, data, fn);\\n    },\\n    undelegate: function undelegate(selector, types, fn) {\\n      // ( namespace ) or ( selector, types [, fn] )\\n      return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\\n    }\\n  }); // Bind a function to a context, optionally partially applying any\\n  // arguments.\\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\\n  // However, it is not slated for removal any time soon\\n\\n  jQuery.proxy = function (fn, context) {\\n    var tmp, args, proxy;\\n\\n    if (typeof context === \"string\") {\\n      tmp = fn[context];\\n      context = fn;\\n      fn = tmp;\\n    } // Quick check to determine if target is callable, in the spec\\n    // this throws a TypeError, but we will just return undefined.\\n\\n\\n    if (!isFunction(fn)) {\\n      return undefined;\\n    } // Simulated bind\\n\\n\\n    args = _slice.call(arguments, 2);\\n\\n    proxy = function proxy() {\\n      return fn.apply(context || this, args.concat(_slice.call(arguments)));\\n    }; // Set the guid of unique handler to the same of original handler, so it can be removed\\n\\n\\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\\n    return proxy;\\n  };\\n\\n  jQuery.holdReady = function (hold) {\\n    if (hold) {\\n      jQuery.readyWait++;\\n    } else {\\n      jQuery.ready(true);\\n    }\\n  };\\n\\n  jQuery.isArray = Array.isArray;\\n  jQuery.parseJSON = JSON.parse;\\n  jQuery.nodeName = nodeName;\\n  jQuery.isFunction = isFunction;\\n  jQuery.isWindow = isWindow;\\n  jQuery.camelCase = camelCase;\\n  jQuery.type = toType;\\n  jQuery.now = Date.now;\\n\\n  jQuery.isNumeric = function (obj) {\\n    // As of jQuery 3.0, isNumeric is limited to\\n    // strings and numbers (primitives or objects)\\n    // that can be coerced to finite numbers (gh-2662)\\n    var type = jQuery.type(obj);\\n    return (type === \"number\" || type === \"string\") && // parseFloat NaNs numeric-cast false positives (\"\")\\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\\n    // subtraction forces infinities to NaN\\n    !isNaN(obj - parseFloat(obj));\\n  }; // Register as a named AMD module, since jQuery can be concatenated with other\\n  // files that may use define, but not via a proper concatenation script that\\n  // understands anonymous AMD modules. A named AMD is safest and most robust\\n  // way to register. Lowercase jquery is used because AMD module names are\\n  // derived from file names, and jQuery is normally delivered in a lowercase\\n  // file name. Do this after creating the global so that if an AMD module wants\\n  // to call noConflict to hide this version of jQuery, it will work.\\n  // Note that for maximum portability, libraries that are not jQuery should\\n  // declare themselves as anonymous modules, and avoid setting a global if an\\n  // AMD loader is present. jQuery is a special case. For more information, see\\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\\n\\n\\n  if (true) {\\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n      return jQuery;\\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n  }\\n\\n  var // Map over jQuery in case of overwrite\\n  _jQuery = window.jQuery,\\n      // Map over the $ in case of overwrite\\n  _$ = window.$;\\n\\n  jQuery.noConflict = function (deep) {\\n    if (window.$ === jQuery) {\\n      window.$ = _$;\\n    }\\n\\n    if (deep && window.jQuery === jQuery) {\\n      window.jQuery = _jQuery;\\n    }\\n\\n    return jQuery;\\n  }; // Expose jQuery and $ identifiers, even in AMD\\n  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\\n  // and CommonJS for browser emulators (#13566)\\n\\n\\n  if (!noGlobal) {\\n    window.jQuery = window.$ = jQuery;\\n  }\\n\\n  return jQuery;\\n});\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)(module)))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///1\\n')},function(module,exports){eval('module.exports = function(module) {\\n\\tif (!module.webpackPolyfill) {\\n\\t\\tmodule.deprecate = function() {};\\n\\t\\tmodule.paths = [];\\n\\t\\t// module.parent = undefined by default\\n\\t\\tif (!module.children) module.children = [];\\n\\t\\tObject.defineProperty(module, \"loaded\", {\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tget: function() {\\n\\t\\t\\t\\treturn module.l;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tObject.defineProperty(module, \"id\", {\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tget: function() {\\n\\t\\t\\t\\treturn module.i;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tmodule.webpackPolyfill = 1;\\n\\t}\\n\\treturn module;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n')},function(module,exports,__webpack_require__){\"use strict\";eval('\\n\\n/**\\n * CC live video\\n * v2.9.1 2019/01/21 */\\n(function () {\\n  var DELAY_TIME = 10 * 1000;\\n\\n  function isSupportFlash() {\\n    var isIE = navigator.appVersion.indexOf(\"MSIE\") >= 0;\\n    var hasFlash = true;\\n\\n    if (isIE) {\\n      try {\\n        var objFlash = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\");\\n      } catch (e) {\\n        hasFlash = false;\\n      }\\n    } else {\\n      if (!navigator.plugins[\"Shockwave Flash\"]) {\\n        hasFlash = false;\\n      }\\n    }\\n\\n    return hasFlash;\\n  }\\n\\n  ; //工具类\\n\\n  var Util = {\\n    sendAjax: function sendAjax(url, data, callBack) {\\n      $.ajax({\\n        url: url,\\n        type: \"GET\",\\n        dataType: \"jsonp\",\\n        data: data,\\n        xhrFields: {\\n          withCredentials: true\\n        },\\n        success: function success(data) {\\n          if (!data.success) {\\n            callBack(data);\\n            return;\\n          }\\n\\n          if (typeof callBack === \"function\") {\\n            callBack(data);\\n          } else {\\n            if (console.log) {\\n              console.log(\"onQuestionnairePublish is undefined\");\\n            }\\n          }\\n        },\\n        error: function error(e) {\\n          if (typeof callBack === \"function\") {\\n            callBack({\\n              errorCode: 1,\\n              msg: \"request error\",\\n              result: e\\n            });\\n          } else {\\n            if (console.log) {\\n              console.log(\"onQuestionnairePublish is undefined\");\\n            }\\n          }\\n        }\\n      });\\n    }\\n  };\\n  var DWDpc = {\\n    DocModeType: {\\n      NormalMode: 0,\\n      FreeMode: 1\\n    },\\n    //设置文档为自由模式或者为跟随模式（0为跟随，1为自由）\\n    dpc: {},\\n    fastMode: false,\\n    init: function init() {\\n      this.dpc = new Dpc();\\n    },\\n    appendDrawPanel: function appendDrawPanel() {\\n      var dp = \"<iframe id=\\\\\"dpa\\\\\" allow-scripts allowfullscreen allowusermedia frameborder=\\\\\"0\\\\\" style=\\\\\"width: 100%;height:100%;\\\\\"></iframe>\";\\n\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        dp = \"<iframe id=\\\\\"dpa\\\\\" allow-scripts allowfullscreen allowusermedia frameborder=\\\\\"0\\\\\" style=\\\\\"width: 100%;height:100%;pointer-events: none;\\\\\"></iframe>\";\\n      }\\n\\n      $(\"#drawPanel\").parent().append(dp);\\n      $(\"div#drawPanel\").remove();\\n\\n      if (typeof window.on_cc_live_db_flip === \"function\") {\\n        window.on_cc_live_db_flip();\\n      }\\n    },\\n    pageChange: function pageChange(pc) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.pageChange(pc);\\n    },\\n    animationChange: function animationChange(ac) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.animationChange(ac);\\n    },\\n    history: function history(h) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.history(h);\\n    },\\n    draw: function draw(d) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.draw(d);\\n    },\\n    clear: function clear() {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.clear();\\n    },\\n    reload: function reload() {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.reload();\\n    },\\n    setDocMode: function setDocMode(t) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.setFreeDocMode(t);\\n    },\\n    getDocs: function getDocs(callback) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.getDocs(DWLive.roomid, DWLive.userid, callback);\\n    },\\n    changePageTo: function changePageTo(dId, pI) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.changePageTo(dId, pI);\\n    },\\n    showMarquee: function showMarquee(m) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.openMarquee(m);\\n    },\\n    closeMarquee: function closeMarquee() {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.closeMarquee();\\n    },\\n    openBarrage: function openBarrage(l) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.openBarrage();\\n    },\\n    insertBarrage: function insertBarrage(data) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      var ifo;\\n\\n      try {\\n        ifo = JSON.parse(data);\\n      } catch (e) {\\n        ifo = {\\n          type: \"text\",\\n          content: data\\n        };\\n      }\\n\\n      this.dpc.insertBarrage(ifo);\\n    },\\n    closeBarrage: function closeBarrage() {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.closeBarrage();\\n    },\\n    docAdapt: function docAdapt(t) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      var displayMode = t ? \"1\" : \"2\";\\n      this.dpc.setDisplayMode(displayMode);\\n    }\\n  };\\n  var DWLive = {\\n    DocModeType: {\\n      NormalMode: 0,\\n      FreeMode: 1\\n    },\\n    //设置文档为自由模式或者为跟随模式（0为跟随，1为自由）\\n    MediaScaleMode: {\\n      scale43: \"4:3\",\\n      scale169: \"16:9\",\\n      scaleFull: \"full\",\\n      scaleNormal: \"normal\"\\n    },\\n    init: function init(option) {\\n      if (typeof option == \"undefined\") {\\n        option = {};\\n      }\\n\\n      this.userid = $.trim(option.userid);\\n      this.roomid = $.trim(option.roomid);\\n      this.groupid = $.trim(option.groupid);\\n      this.viewername = $.trim(option.viewername);\\n      this.viewertoken = $.trim(option.viewertoken);\\n      this.forcibly = $.trim(option.forcibly);\\n      this.viewercustomua = $.trim(option.viewercustomua);\\n      this.language = $.trim(option.language);\\n      this.viewercustominfo = $.trim(option.viewercustominfo);\\n      this.ua = $.trim(option.ua);\\n      this.viewerid = $.trim(option.viewerid);\\n      this.upid = $.trim(option.upid);\\n\\n      if (typeof option.fastMode == \"string\") {\\n        if (option.fastMode === \"false\") {\\n          this.fastMode = false;\\n        } else {\\n          this.fastMode = true;\\n        }\\n      } else if (typeof option.fastMode == \"boolean\") {\\n        this.fastMode = option.fastMode;\\n      } else {\\n        this.fastMode = false;\\n      }\\n\\n      DWDpc.fastMode = this.fastMode;\\n      this.forceNew = false;\\n\\n      if (typeof option.forceNew === \"boolean\") {\\n        this.forceNew = option.forceNew;\\n      }\\n\\n      var _this = this;\\n\\n      var scripts = [\"//static.csslcloud.net/js/socket.io.js\", \"//static.csslcloud.net/js/report.js\"];\\n\\n      if (DWDpc.fastMode) {\\n        scripts.push(\"//image.csslcloud.net/js/dpc.js?v=20180121\");\\n      }\\n\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        if ($(\"#drawPanel\").length > 0) {\\n          //启动极速动画模式\\n          if (!DWDpc.fastMode) {\\n            scripts.push(\"//static.csslcloud.net/js/module/drawingBoard-2.0.0.js\");\\n          }\\n        }\\n      } else {\\n        if (!isSupportFlash()) {\\n          if (typeof DWLive.onNotSupportFlash === \"function\") {\\n            DWLive.onNotSupportFlash();\\n          }\\n\\n          if (this.userid == \"18452D400D6B81D5\") {\\n            var lpph = $(\"#\" + LivePlayer.id).parent().height();\\n            var lppw = $(\"#\" + LivePlayer.id).parent().width();\\n            var tip = \"<div style=\\\\\"z-index: 999999;\\\\\"><p style=\\\\\"color: #0e0e0e; width: 260px;\\\\\">您还没有安装flash播放器,请点击\" + \"<a href=\\\\\"http://www.adobe.com/go/getflash\\\\\" style=\\\\\"color: red;\\\\\" target=\\\\\"_blank\\\\\">这里\" + \"</a>安装</p></div>\";\\n            $(\"#\" + LivePlayer.id).append(tip).parent().css(\"z-index\", \"999999\");\\n            var lpdh = $($(\"#\" + LivePlayer.id + \" div p\")[0]).height();\\n            var lpdw = $($(\"#\" + LivePlayer.id + \" div p\")[0]).width();\\n            $(\"#\" + LivePlayer.id + \" div\").css({\\n              \"margin-left\": (lppw - lpdw - 60) / 2 + \"px\",\\n              \"margin-top\": (lpph - lpdh) / 2 + \"px\"\\n            });\\n            setInterval(function () {\\n              $(\"#\" + LivePlayer.id).parent().show();\\n            }, 3000);\\n          }\\n        }\\n\\n        scripts.push(\"//static.csslcloud.net/js/swfobject.js\", \"//static.csslcloud.net/js/json3.min.js\");\\n      }\\n\\n      _this.loadScript(scripts, function () {\\n        _this.login(fn);\\n\\n        function fn() {\\n          _this.history = new History();\\n        }\\n\\n        if (MobileLive.isMobile() == \"isMobile\" && $.DrawingBoard) {\\n          var dp = \"<canvas id=\\\\\"drawPanel\\\\\" width=\\\\\"1200\\\\\" height=\\\\\"1200\\\\\" style=\\\\\"position: absolute;z-index:2;top:0;left: 0\\\\\"></canvas>\" + \"<iframe id=\\\\\"dpa\\\\\" src=\\\\\"\\\\\" frameborder=\\\\\"0\\\\\" style=\\\\\"position: absolute;top:0;left: 0\\\\\"></iframe>\";\\n          $(\"#drawPanel\").parent().append(dp);\\n          $(\"div#drawPanel\").remove();\\n          $.DrawingBoard.config();\\n        }\\n      });\\n    },\\n    login: function login(fn) {\\n      $.ajax({\\n        url: \"//view.csslcloud.net/api/room/login\",\\n        type: \"GET\",\\n        dataType: \"jsonp\",\\n        data: {\\n          roomid: this.roomid,\\n          userid: this.userid,\\n          groupid: this.groupid,\\n          viewername: this.viewername,\\n          viewertoken: this.viewertoken,\\n          forcibly: this.forcibly,\\n          viewercustomua: this.viewercustomua,\\n          viewercustominfo: this.viewercustominfo\\n        },\\n        success: function success(data) {\\n          if (!data.success) {\\n            if (typeof DWLive.onLoginError === \"function\") {\\n              DWLive.onLoginError(data);\\n            }\\n\\n            return;\\n          }\\n\\n          var isHttps = window.location.protocol === \"https:\";\\n          var host = data.datas.pusherNode.primary;\\n\\n          if (isHttps && host && host.indexOf(\":\")) {\\n            var s = host.split(\":\");\\n\\n            if (s.length == 2) {\\n              var port = parseInt(s[1]);\\n\\n              if (!isNaN(port)) {\\n                var httpsPort = port + 400;\\n                host = s[0] + \":\" + httpsPort;\\n              }\\n            }\\n          }\\n\\n          var url = document.location.protocol + \"//\" + host + \"/\" + data.datas.pusher.nsp;\\n          var key = data.datas.viewer.key;\\n          Pusher.options.pusherUrl = url;\\n          Pusher.options.key = key;\\n          DWLive.viewerid = data.datas.viewer.id;\\n          DWLive.viewername = data.datas.viewer.name;\\n          DWLive.isBan = data.datas.room.isBan; //禁播\\n\\n          DWLive.liveid = data.datas.liveId;\\n          DWLive.upid = data.datas.upId;\\n          DWLive.multiQuality = data.datas.room.multiQuality;\\n          DWLive.documentDisplayMode = data.datas.room.documentDisplayMode;\\n          DWLive.liveCountdown = data.datas.room.liveCountdown;\\n          DWLive.groupId = data.datas.viewer.groupId; //初始化极速动画对象\\n\\n          if (DWDpc.fastMode) {\\n            $(\"#documentDisplayMode\").val(DWLive.documentDisplayMode);\\n            DWDpc.appendDrawPanel();\\n            DWDpc.init();\\n          }\\n\\n          fn();\\n          var delay = data.datas.room.delayTime,\\n              foreignPublish = data.datas.room.foreignPublish;\\n          LivePlayer.delay = delay;\\n\\n          if (delay <= 0) {\\n            DELAY_TIME = 5 * 1000;\\n          }\\n\\n          LivePlayer.foreignPublish = foreignPublish;\\n          LivePlayer.openHostMode = data.datas.room.openHostMode;\\n          LivePlayer.dvr = data.datas.room.dvr;\\n          LivePlayer.barrageData = data.datas.room.barrage;\\n          LivePlayer.warmVideoId = data.datas.room.encryptWarmVideoId;\\n          LivePlayer.viewerid = data.datas.viewer.id;\\n          var playerBackgroundImageUri = data.datas.room.playerBackgroundImageUri;\\n\\n          if (!playerBackgroundImageUri) {\\n            playerBackgroundImageUri = \"\";\\n          } else {\\n            var isHttps = window.location.protocol === \"https:\";\\n\\n            if (isHttps) {\\n              playerBackgroundImageUri = playerBackgroundImageUri.replace(/http:/g, \"https:\");\\n            }\\n          }\\n\\n          LivePlayer.backgroundImageUri = playerBackgroundImageUri;\\n\\n          if (typeof DWLive.playerBackgroundImageUri === \"function\") {\\n            DWLive.playerBackgroundImageUri(playerBackgroundImageUri);\\n          }\\n\\n          var playerBackgroundHint = data.datas.room.playerBackgroundHint;\\n\\n          if (!playerBackgroundHint) {\\n            playerBackgroundHint = \"\";\\n          }\\n\\n          LivePlayer.backgroundHint = playerBackgroundHint;\\n\\n          if (typeof DWLive.playerBackgroundHint === \"function\") {\\n            DWLive.playerBackgroundHint(playerBackgroundHint);\\n          }\\n\\n          var announcement = data.datas.announcement;\\n\\n          if (typeof DWLive.onAnnouncementShow === \"function\" && announcement) {\\n            DWLive.onAnnouncementShow(announcement);\\n          }\\n\\n          var desc = data.datas.room.desc;\\n\\n          if (typeof DWLive.onLiveDesc === \"function\") {\\n            DWLive.onLiveDesc(desc);\\n          }\\n\\n          var count = data.datas.room.showUserCount;\\n\\n          if (typeof DWLive.showUserCount === \"function\") {\\n            DWLive.showUserCount(count);\\n          }\\n\\n          var marquee = data.datas.viewer.marquee;\\n\\n          if (typeof DWLive.getMarquee === \"function\") {\\n            DWLive.getMarquee(marquee);\\n          }\\n\\n          if (typeof DWLive.onLoginSuccess === \"function\") {\\n            var template = {\\n              \"desc\": data.datas.template.desc,\\n              \"type\": data.datas.template.type,\\n              \"name\": data.datas.template.name,\\n              \"id\": data.datas.template.id\\n            }; //返回给用户的模板信息\\n\\n            var viewer = {\\n              \"id\": data.datas.viewer.id,\\n              \"groupId\": data.datas.viewer.groupId,\\n              \"name\": data.datas.viewer.name\\n            }; //返回给用户的viewer信息;\\n\\n            var live = data.datas.live; //返回给用户的live信息\\n\\n            var loginInfo = {\\n              \"live\": live,\\n              \"template\": template,\\n              \"viewer\": viewer\\n            };\\n            DWLive.onLoginSuccess(loginInfo);\\n          }\\n\\n          var time = data.datas.live;\\n\\n          if (typeof DWLive.onLiveTime === \"function\") {\\n            DWLive.onLiveTime(time);\\n          }\\n\\n          Pusher.init();\\n\\n          if (MobileLive.isMobile() == \"isMobile\") {\\n            MobileLive.init();\\n          } else {\\n            LivePlayer.init();\\n          }\\n\\n          switch (data.datas.template.type) {\\n            case 6:\\n              Qa.init();\\n\\n              DWLive.sendPublicChatMsg = DWLive.sendPrivateChatMsg = function () {\\n                return false;\\n              };\\n\\n              break;\\n\\n            case 5:\\n              Chat.init();\\n              Qa.init();\\n              DrawPanel.init();\\n              break;\\n\\n            case 4:\\n              Chat.init();\\n              DrawPanel.init();\\n\\n              DWLive.sendQuestionMsg = function () {\\n                return false;\\n              };\\n\\n              break;\\n\\n            case 3:\\n              Chat.init();\\n\\n              DWLive.sendQuestionMsg = function () {\\n                return false;\\n              };\\n\\n              break;\\n\\n            case 2:\\n              Chat.init();\\n              Qa.init();\\n              break;\\n\\n            default:\\n              Chat.init();\\n              Qa.init();\\n              DrawPanel.init();\\n          }\\n        }\\n      });\\n    },\\n    logout: function logout(value) {\\n      if (!value) return;\\n      $.ajax({\\n        url: \"//view.csslcloud.net/api/live/logout\",\\n        type: \"GET\",\\n        dataType: \"jsonp\",\\n        timeout: 5000,\\n        xhrFields: {\\n          withCredentials: true\\n        },\\n        success: function success(data) {\\n          if (typeof value.success === \"function\") {\\n            value.success(data);\\n          }\\n        },\\n        error: function error(xhr, status, _error) {\\n          if (typeof value.error === \"function\") {\\n            value.error({\\n              \"errorcode\": \"100\",\\n              \"msg\": \"退出失败\",\\n              \"info\": _error\\n            });\\n          }\\n        }\\n      });\\n      Pusher.socket.disconnect();\\n    },\\n    getScript: function getScript(url, success) {\\n      var readyState = false,\\n          script = document.createElement(\"script\");\\n      script.src = url;\\n\\n      script.onload = script.onreadystatechange = function () {\\n        if (!readyState && (!this.readyState || this.readyState == \"loaded\" || this.readyState == \"complete\")) {\\n          readyState = true;\\n          success && success();\\n        }\\n      };\\n\\n      document.body.appendChild(script);\\n    },\\n    loadScript: function loadScript(res, callback) {\\n      if (typeof res === \"string\") {\\n        var _res = res;\\n        res = [];\\n        res.push(_res);\\n      }\\n\\n      var _this = this,\\n          queue = function queue(fs, cb) {\\n        _this.getScript(fs.shift(), function () {\\n          fs.length ? queue(fs, cb) : cb && cb();\\n        });\\n      };\\n\\n      queue(res, callback);\\n    },\\n    //改名\\n    changeNickname: function changeNickname(name) {\\n      if (!name || typeof name !== \"string\" || name.length > 20) {\\n        return false;\\n      }\\n\\n      Pusher.socket.emit(\"change_nickname\", name);\\n    },\\n    sendPublicChatMsg: function sendPublicChatMsg(msg) {\\n      if (!msg || msg.length > 300) {\\n        return;\\n      }\\n\\n      Pusher.socket.emit(\"chat_message\", msg);\\n    },\\n    sendPrivateChatMsg: function sendPrivateChatMsg(touserid, tousername, msg) {\\n      var h = new Date().getHours(),\\n          m = new Date().getMinutes(),\\n          s = new Date().getSeconds();\\n      m = m > 9 ? m : \"0\" + m;\\n      s = s > 9 ? s : \"0\" + s;\\n      var j = {\\n        \"fromuserid\": this.viewerid,\\n        \"fromusername\": this.viewername,\\n        \"touserid\": touserid,\\n        \"tousername\": tousername,\\n        \"msg\": $.trim(msg),\\n        \"time\": h + \":\" + m + \":\" + s\\n      };\\n      Pusher.socket.emit(\"private_chat\", JSON.stringify(j));\\n    },\\n    sendQuestionMsg: function sendQuestionMsg(content) {\\n      if (!content || content.length > 300) {\\n        return;\\n      }\\n\\n      var j = {\\n        \"action\": \"question\",\\n        \"value\": {\\n          \"userId\": this.viewerid,\\n          \"userName\": this.viewername,\\n          \"content\": content\\n        }\\n      };\\n\\n      try {\\n        Pusher.socket.emit(\"question\", JSON.stringify(j));\\n      } catch (e) {}\\n    },\\n    barrage: function barrage(msg, color) {\\n      // 移动H5暂不支持弹幕功能\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        return;\\n      }\\n\\n      var newm = $.trim(msg);\\n\\n      if (!newm) {\\n        return;\\n      }\\n\\n      newm = msg.replace(/\\\\[em2?_([0-9]*)\\\\]/g, \"\");\\n      LivePlayer.barrage({\\n        \"txt\": newm,\\n        \"color\": color == null ? 0xffffff : color\\n      });\\n    },\\n    getLine: function getLine() {\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        var l = MobileLive.src;\\n        return l;\\n      } else {\\n        return LivePlayer.getLine();\\n      }\\n    },\\n    changeLine: function changeLine(line) {\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        MobileLive.changeLine(line);\\n      } else {\\n        LivePlayer.changeLine(line);\\n      }\\n    },\\n    onlyAudio: function onlyAudio() {\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        MobileLive.onlyAudio();\\n      } else {\\n        LivePlayer.onlyAudio();\\n      }\\n    },\\n    changeVideoScale: function changeVideoScale(t) {\\n      if (MobileLive.isMobile() != \"isMobile\") {\\n        LivePlayer.changeVideoScale(t);\\n      }\\n    },\\n    setSound: function setSound(n) {\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        return;\\n      }\\n\\n      LivePlayer.setSound(n);\\n    },\\n    answerRollcall: function answerRollcall(rid, pid) {\\n      var j = {\\n        \"rollcallId\": rid,\\n        \"userId\": this.viewerid,\\n        \"userName\": this.viewername,\\n        \"publisherId\": pid\\n      };\\n      Pusher.socket.emit(\"answer_rollcall\", JSON.stringify(j));\\n    },\\n    replyVote: function replyVote(voteid, option, pid) {\\n      var j = {\\n        \"voteId\": voteid,\\n        \"voteOption\": option,\\n        \"publisherId\": pid\\n      };\\n      Pusher.socket.emit(\"reply_vote\", JSON.stringify(j));\\n    },\\n    docBarrage: function docBarrage(msg, color) {\\n      if (!$.trim(msg)) {\\n        return;\\n      }\\n\\n      DrawPanel.barrage({\\n        \"txt\": msg,\\n        \"color\": color == null ? 0xffffff : color\\n      });\\n    },\\n    openBarrage: function openBarrage(b) {\\n      LivePlayer.openBarrage(b);\\n    },\\n    openDocBarrage: function openDocBarrage(l) {\\n      //开启doc弹幕功能\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        return;\\n      }\\n\\n      if (DWDpc.fastMode) {\\n        DWDpc.openBarrage(l);\\n      }\\n    },\\n    insertDocBarrage: function insertDocBarrage(data) {\\n      //插入弹幕\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        return;\\n      }\\n\\n      if (DWDpc.fastMode) {\\n        DWDpc.insertBarrage(data);\\n      }\\n    },\\n    closeDocBarrage: function closeDocBarrage() {\\n      //关闭弹幕功能\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        return;\\n      }\\n\\n      if (DWDpc.fastMode) {\\n        DWDpc.closeBarrage();\\n      }\\n    },\\n    showControl: function showControl(b) {\\n      LivePlayer.showControl(b);\\n    },\\n    livePlayerInit: function livePlayerInit() {\\n      LivePlayer.init();\\n    },\\n    openSound: function openSound() {\\n      LivePlayer.openSound();\\n    },\\n    closeSound: function closeSound() {\\n      LivePlayer.closeSound();\\n    },\\n    docAdapt: function docAdapt(t) {\\n      if (DWDpc.fastMode) {\\n        DWDpc.docAdapt(t);\\n      } else {\\n        live.adapt = t;\\n      }\\n    },\\n    // 请求语音互动\\n    requestInteraction: function requestInteraction(t) {\\n      live.interaction.requestInteraction(t);\\n    },\\n    // 挂断双向视频\\n    hangupInteraction: function hangupInteraction() {\\n      live.interaction.hangupInteraction();\\n    },\\n    // 进入互动房间\\n    enterInteractionRoom: function enterInteractionRoom(callback) {\\n      var err = undefined;\\n\\n      try {\\n        Pusher.socket.emit(\"speak_enter\");\\n      } catch (e) {\\n        err = e;\\n      } finally {\\n        if (typeof callback === \"function\") callback(err);\\n      }\\n    },\\n    // 发送互动信息\\n    sendInteractionMessage: function sendInteractionMessage(p, toId, event, data, callback) {\\n      var type = \"audio\";\\n\\n      if (p.video) {\\n        type = \"audiovideo\";\\n      }\\n\\n      var j = {\\n        type: type,\\n        fromname: this.viewername,\\n        fromid: this.viewerid,\\n        fromrole: \"student\",\\n        toid: toId,\\n        event: event,\\n        data: JSON.stringify(data)\\n      };\\n      var err = undefined;\\n\\n      try {\\n        Pusher.socket.emit(\"speak_message\", JSON.stringify(j));\\n      } catch (e) {\\n        err = e;\\n      } finally {\\n        if (typeof callback === \"function\") callback(err);\\n      }\\n    },\\n    // 跑马灯\\n    showMarquee: function showMarquee(m) {\\n      LivePlayer.showMarquee(m);\\n    },\\n    closeMarquee: function closeMarquee() {\\n      LivePlayer.closeMarquee();\\n    },\\n    showMarqueeDoc: function showMarqueeDoc(m) {\\n      if (DWDpc.fastMode) {\\n        DWDpc.showMarquee(m);\\n      } else {\\n        DrawPanel.showMarquee(m);\\n      }\\n    },\\n    closeMarqueeDoc: function closeMarqueeDoc() {\\n      if (DWDpc.fastMode) {\\n        DWDpc.closeMarquee();\\n      }\\n    },\\n    setDocMode: function setDocMode(t) {\\n      if (!DWDpc.fastMode) {\\n        return;\\n      }\\n\\n      DWDpc.setDocMode(t);\\n    },\\n    getDocs: function getDocs(callback) {\\n      if (!DWDpc.fastMode) {\\n        return;\\n      }\\n\\n      DWDpc.getDocs(callback);\\n    },\\n    changePageTo: function changePageTo(dId, pI) {\\n      if (!DWDpc.fastMode) {\\n        return;\\n      }\\n\\n      DWDpc.changePageTo(dId, pI);\\n    },\\n    // 用户问卷功能提交接口（data -> {\"subjectsAnswer\":[{\"subjectId\":\"D4D648931609E9B9\",\"selectedOptionId\":\"306B84236FBD561E\"},{\"subjectId\":\"3FFFF7EC39BC96CC\",\"selectedOptionIds\":\"C5E59BBB4FBD975C,BE571C8FC644B1E1\"},{\"subjectId\":\"3CFA9D81528D476B\",\"answerContent\":\"asdasdasd\"}],questionnaireId:\\'0EDEEC4D0321974B\\'};\\n    // callBack->回调返回所有数据）\\n    submitQuestionnaire: function submitQuestionnaire(_data, callBack) {\\n      if (!_data) {\\n        return;\\n      }\\n\\n      var params = {\\n        questionnaireid: _data.questionnaireId,\\n        answers: JSON.stringify({\\n          subjectsAnswer: _data.subjectsAnswer\\n        })\\n      };\\n      $.ajax({\\n        url: \"//eva.csslcloud.net/api/questionnaire/submit\",\\n        type: \"GET\",\\n        dataType: \"jsonp\",\\n        timeout: 5000,\\n        data: params,\\n        xhrFields: {\\n          withCredentials: true\\n        },\\n        success: function success(data) {\\n          if (callBack) {\\n            callBack(data);\\n          } else {\\n            if (console.log) {\\n              console.log(\"no callback\");\\n            }\\n          }\\n        },\\n        error: function error(xhr, status, _error2) {\\n          if (callBack) {\\n            callBack({\\n              errorCode: 1,\\n              msg: \"request was aborted\",\\n              result: _error2\\n            });\\n          }\\n        }\\n      });\\n    },\\n    getPublishingQuestionnaire: function getPublishingQuestionnaire() {\\n      var path = \"//eva.csslcloud.net/api/questionnaire/info\";\\n      var info = {};\\n      Util.sendAjax(path, info, DWLive.onQuestionnairePublish);\\n    },\\n    //获取随堂测数据\\n    getPracticeInfo: function getPracticeInfo(pId, callBack) {\\n      var path = \"//eva.csslcloud.net/api/practice/info\";\\n      var info = {\\n        practiceId: pId,\\n        sessionId: Pusher.options.key\\n      };\\n      Util.sendAjax(path, info, callBack);\\n    },\\n    //提交随堂测\\n    submitPracticeInfo: function submitPracticeInfo(pId, opt, callback) {\\n      var path = \"//eva.csslcloud.net/api/practice/submit\";\\n      var info = {\\n        practiceId: pId,\\n        options: opt,\\n        sessionId: Pusher.options.key\\n      };\\n      Util.sendAjax(path, info, callback);\\n    },\\n    //获取随堂测统计信息接口API\\n    getPracticeStatisInfo: function getPracticeStatisInfo(pId, callback) {\\n      var path = \"//eva.csslcloud.net/api/practice/statis\";\\n      var info = {\\n        practiceId: pId,\\n        sessionId: Pusher.options.key\\n      };\\n      Util.sendAjax(path, info, callback);\\n    },\\n    //获取排名数据接口\\n    getPracticeRanking: function getPracticeRanking(pId, callback) {\\n      var path = \"//eva.csslcloud.net/api/practice/ranking\"; // var path = \"http://192.168.202.183:8080/api/practice/ranking\";\\n\\n      var info = {\\n        practiceId: pId,\\n        sessionId: Pusher.options.key\\n      };\\n      Util.sendAjax(path, info, callback);\\n    }\\n  };\\n  var options = {\\n    init: function init() {\\n      this[\"userId\"] = DWLive.userid, this[\"roomId\"] = DWLive.roomid, this[\"groupId\"] = DWLive.groupId, this[\"liveId\"] = DWLive.liveid, this[\"viewerId\"] = DWLive.viewerid, this[\"upId\"] = DWLive.upid;\\n    }\\n  }; // Pusher\\n\\n  var Pusher = {\\n    options: {\\n      pusherUrl: \"\",\\n      key: \"\",\\n      maxMessageCount: 300,\\n      // 保存聊天条数\\n      userId: \"\",\\n      roomId: \"\",\\n      livePlayerId: \"\",\\n      drawPanel: \"\"\\n    },\\n    drawjson: [],\\n    pagechangedata: [],\\n    init: function init() {\\n      var t = MobileLive.isMobile() == \"isMobile\" ? 1 : 0;\\n\\n      if (!DWLive.forceNew) {\\n        this.socket = io.connect(this.options.pusherUrl, {\\n          query: {\\n            sessionid: Pusher.options.key,\\n            platform: 1,\\n            terminal: t\\n          }\\n        });\\n        debug(\"forceNew: false\");\\n      } else {\\n        this.socket = io.connect(this.options.pusherUrl + \"?sessionid=\" + Pusher.options.key + \"&platform=\" + 1 + \"&terminal=\" + t, {\\n          forceNew: true\\n        });\\n        debug(\"forceNew: true\");\\n      }\\n\\n      this.bind();\\n    },\\n    bind: function bind() {\\n      var currentLayout = false;\\n      this.socket.on(\"connect\", function () {\\n        if (typeof window.onSocketConnect === \"function\") {\\n          window.onSocketConnect();\\n        }\\n      });\\n      this.socket.on(\"disconnect\", function () {\\n        if (typeof window.onSocketDisconnect === \"function\") {\\n          window.onSocketDisconnect();\\n        }\\n      }); // 翻页回调\\n\\n      this.socket.on(\"page_change\", function (j) {\\n        if (j && typeof j === \"string\") {\\n          Pusher.pagechangedata.push(JSON.parse(j));\\n        }\\n\\n        if (typeof window.on_cc_live_dw_page_change === \"function\") {\\n          window.on_cc_live_dw_page_change(j);\\n        }\\n\\n        if (typeof DWLive.onPageChange === \"function\") {\\n          var obj = JSON.parse(j);\\n          var data = {\\n            docId: obj.value.docid,\\n            docName: obj.value.fileName,\\n            docTotalPage: obj.value.totalPage,\\n            pageNum: obj.value.page\\n          };\\n          DWLive.onPageChange(data);\\n        }\\n      }); // 改名\\n\\n      this.socket.on(\"change_nickname\", function (j) {\\n        DWLive.viewername = j;\\n\\n        if (typeof DWLive.onChangeNickname === \"function\") {\\n          DWLive.onChangeNickname(j);\\n        }\\n      }); // 动画翻页\\n\\n      this.socket.on(\"animation_change\", function (j) {\\n        if (typeof window.on_cc_live_dw_animation_change === \"function\") {\\n          window.on_cc_live_dw_animation_change(j);\\n        }\\n      }); // 画板回调\\n\\n      this.socket.on(\"draw\", function (j) {\\n        if (j && typeof j === \"string\") {\\n          Pusher.drawjson.push(JSON.parse(j));\\n        }\\n\\n        if (typeof window.on_cc_live_dw_draw === \"function\") {\\n          window.on_cc_live_dw_draw(j);\\n        }\\n      });\\n      this.socket.on(\"room_user_count\", function (j) {\\n        if (typeof DWLive.onUserCountMessage === \"function\") {\\n          DWLive.onUserCountMessage(j);\\n        }\\n      });\\n      this.socket.on(\"publish_stream\", function (j) {\\n        if (LivePlayer) {\\n          LivePlayer.isPublishing = 1;\\n        }\\n\\n        if (LivePlayer && LivePlayer.start) {\\n          LivePlayer.start();\\n        }\\n\\n        if (typeof DWLive.onLiveStart === \"function\") {\\n          DWLive.onLiveStart(j);\\n        }\\n      });\\n      this.socket.on(\"end_stream\", function (j) {\\n        setTimeout(function () {\\n          if (LivePlayer) {\\n            LivePlayer.isPublishing = 0;\\n          }\\n\\n          if (LivePlayer && LivePlayer.end) {\\n            LivePlayer.end();\\n          }\\n\\n          if (DrawPanel && DrawPanel.clear) {\\n            DrawPanel.clear();\\n          }\\n\\n          DWDpc.clear();\\n\\n          if (typeof DWLive.onLiveEnd === \"function\") {\\n            DWLive.onLiveEnd(j);\\n          }\\n        }, getDelayTime());\\n      });\\n      this.socket.on(\"kick_out\", function (j) {\\n        Pusher.socket.disconnect();\\n\\n        if (typeof DWLive.onKickOut === \"function\") {\\n          DWLive.onKickOut(j);\\n        }\\n\\n        if (!MobileLive.isIPad() && !MobileLive.isIPhone() && !MobileLive.isAndroid() && !MobileLive.isWindowsPhone()) {\\n          LivePlayer.getFlash()._kickOff();\\n        }\\n      });\\n      this.socket.on(\"announcement\", function (data) {\\n        data = toJson(data);\\n\\n        if (data.action == \"release\") {\\n          if (typeof DWLive.onAnnouncementRelease === \"function\") {\\n            DWLive.onAnnouncementRelease(data.announcement);\\n          }\\n        } else if (data.action == \"remove\") {\\n          if (typeof DWLive.onAnnouncementRemove === \"function\") {\\n            DWLive.onAnnouncementRemove(data);\\n          }\\n        }\\n      }); // 签到功能\\n\\n      this.socket.on(\"start_rollcall\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onStartRollCall === \"function\") {\\n          DWLive.onStartRollCall(data);\\n        }\\n      }); // 开始抽奖\\n\\n      this.socket.on(\"start_lottery\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onStartLottery === \"function\") {\\n          DWLive.onStartLottery(data);\\n        }\\n      }); // 中奖\\n\\n      this.socket.on(\"win_lottery\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onWinLottery === \"function\") {\\n          DWLive.onWinLottery(data);\\n        }\\n      }); // 结束抽奖\\n\\n      this.socket.on(\"stop_lottery\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onStopLottery === \"function\") {\\n          DWLive.onStopLottery(data);\\n        }\\n      }); // 开始答题\\n\\n      this.socket.on(\"start_vote\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onStartVote === \"function\") {\\n          DWLive.onStartVote(data);\\n        }\\n      }); // 结束答题\\n\\n      this.socket.on(\"stop_vote\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onStopVote === \"function\") {\\n          DWLive.onStopVote(data);\\n        }\\n      }); // 答题结果\\n\\n      this.socket.on(\"vote_result\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onVoteResult === \"function\") {\\n          DWLive.onVoteResult(data);\\n        }\\n      }); // 禁播\\n\\n      this.socket.on(\"ban_stream\", function (data) {\\n        data = toJson(data); //h5禁播\\n\\n        DWLive.isBan = 1;\\n\\n        if (MobileLive.isMobile() == \"isMobile\") {\\n          MobileLive.ban();\\n        } else {\\n          LivePlayer.banLive();\\n        }\\n\\n        if (typeof DWLive.onBanStream === \"function\") {\\n          DWLive.onBanStream(data);\\n        }\\n      }); // 解禁\\n\\n      this.socket.on(\"unban_stream\", function (data) {\\n        data = toJson(data); //h5解禁\\n\\n        DWLive.isBan = 0;\\n\\n        if (MobileLive.isMobile() == \"isMobile\") {\\n          MobileLive.unban();\\n        } else {\\n          LivePlayer.unbanLive();\\n        }\\n\\n        if (typeof DWLive.onUnBanStream === \"function\") {\\n          DWLive.onUnBanStream(data);\\n        }\\n      });\\n      this.socket.on(\"room_setting\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onRoomSetting === \"function\") {\\n          DWLive.onRoomSetting(data);\\n        }\\n\\n        if (data.layout_video_main != currentLayout) {\\n          var main = data.layout_video_main;\\n\\n          if (typeof DWLive.onSwitchVideoDoc === \"function\") {\\n            DWLive.onSwitchVideoDoc(main);\\n          }\\n\\n          currentLayout = main;\\n        }\\n      }); //禁言某人发送信息回调\\n\\n      this.socket.on(\"silence_user_chat_message\", function (data) {\\n        if (typeof DWLive.onSilenceUserChatMessage === \"function\") {\\n          DWLive.onSilenceUserChatMessage(toJson(data));\\n        }\\n      }); // 讲师接受互动信息\\n\\n      this.socket.on(\"accept_speak\", function (data) {\\n        if (typeof window.on_cc_live_accept_interaction === \"function\") {\\n          window.on_cc_live_accept_interaction(toJson(data));\\n        }\\n      }); // 互动信息\\n\\n      this.socket.on(\"speak_message\", function (data) {\\n        if (typeof window.on_cc_live_interaction_message === \"function\") {\\n          window.on_cc_live_interaction_message(toJson(data));\\n        }\\n      }); // 已经在聊天的列表信息\\n\\n      this.socket.on(\"speak_peer_list\", function (data) {\\n        if (typeof window.on_cc_live_interaction_chatusers === \"function\") {\\n          window.on_cc_live_interaction_chatusers(toJson(data));\\n        }\\n      }); // 挂断互动信息\\n\\n      this.socket.on(\"speak_disconnect\", function (data) {\\n        if (typeof window.on_cc_live_interaction_disconnect === \"function\") {\\n          window.on_cc_live_interaction_disconnect(toJson(data));\\n        }\\n      }); // 广播信息\\n\\n      this.socket.on(\"broadcast_msg\", function (data) {\\n        if (typeof DWLive.onBroadcastMsg === \"function\") {\\n          DWLive.onBroadcastMsg(toJson(data).value);\\n        }\\n      }); // 发布提问\\n\\n      this.socket.on(\"publish_question\", function (data) {\\n        if (typeof DWLive.onQaPublish === \"function\") {\\n          DWLive.onQaPublish(toJson(data));\\n        }\\n      });\\n      /**\\n       * 发布问卷\\n       * */\\n\\n      this.socket.on(\"questionnaire_publish\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onQuestionnairePublish === \"function\") {\\n          DWLive.onQuestionnairePublish(data);\\n        }\\n      });\\n      /**\\n       * 结束发布问卷\\n       * */\\n\\n      this.socket.on(\"questionnaire_publish_stop\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onQuestionnairePublishStop === \"function\") {\\n          DWLive.onQuestionnairePublishStop(data);\\n        }\\n      }); //发布随堂测功能\\n\\n      this.socket.on(\"practice_publish\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onPracticePublish === \"function\") {\\n          DWLive.onPracticePublish(data);\\n        }\\n      }); //停止发布随堂测功能\\n\\n      this.socket.on(\"practice_stop\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onPracticePublishStop === \"function\") {\\n          DWLive.onPracticePublishStop(data);\\n        }\\n      }); //关闭随堂测功能\\n\\n      this.socket.on(\"practice_close\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onPracticeClose === \"function\") {\\n          DWLive.onPracticeClose(data);\\n        }\\n      }); // 发布奖杯\\n\\n      this.socket.on(\"prize_send\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onPrizeSend === \"function\") {\\n          DWLive.onPrizeSend(data);\\n        }\\n      });\\n      /**\\n       * 发布问卷统计\\n       * */\\n\\n      this.socket.on(\"questionnaire_publish_statis\", function (data) {\\n        data = toJson(data);\\n\\n        if (typeof DWLive.onQuestionnairePublishStatis === \"function\") {\\n          DWLive.onQuestionnairePublishStatis(data);\\n        }\\n      });\\n      this.socket.on(\"room_teachers\", function (data) {\\n        if (typeof DWLive.onOnlineTeachers === \"function\") {\\n          DWLive.onOnlineTeachers(toJson(data));\\n        }\\n      });\\n      this.socket.on(\"external_questionnaire_publish\", function (data) {\\n        if (typeof DWLive.onExternalQuestionnairePublish === \"function\") {\\n          DWLive.onExternalQuestionnairePublish(toJson(data));\\n        }\\n      });\\n      this.socket.on(\"ban_chat\", function (data) {\\n        if (typeof DWLive.onBanChat === \"function\") {\\n          DWLive.onBanChat(toJson(data));\\n        }\\n      });\\n      this.socket.on(\"unban_chat\", function (data) {\\n        if (typeof DWLive.onUnBanChat === \"function\") {\\n          DWLive.onUnBanChat(toJson(data));\\n        }\\n      });\\n      /**\\n       * 获取当前播放（数据源）场景（0：无意义(默认)，10、11:（开启/关闭）摄像头，20：图片，30：插播视频，40：区域捕获，50：桌面共享，60：自定义场景）\\n       * **/\\n\\n      this.socket.on(\"switch_source\", function (data) {\\n        if (typeof DWLive.onSwitchSource === \"function\") {\\n          DWLive.onSwitchSource(data);\\n        }\\n      });\\n\\n      var _this = this;\\n\\n      setTimeout(function () {\\n        try {\\n          _this.socket.emit(\"room_user_count\");\\n        } catch (e) {}\\n\\n        try {\\n          _this.socket.emit(\"room_teachers\");\\n        } catch (e) {}\\n      }, 1500);\\n      setInterval(function () {\\n        try {\\n          _this.socket.emit(\"room_user_count\");\\n        } catch (e) {}\\n\\n        try {\\n          _this.socket.emit(\"room_teachers\");\\n        } catch (e) {}\\n      }, 15000);\\n    },\\n    // 请求互动\\n    requestInteraction: function requestInteraction(p, callback) {\\n      var t = \"audio\";\\n\\n      if (p.video) {\\n        t += \"video\";\\n      }\\n\\n      var j = {\\n        \"viewerId\": DWLive.viewerid,\\n        \"viewerName\": DWLive.viewername,\\n        \"type\": t\\n      };\\n      var err = undefined;\\n\\n      try {\\n        this.socket.emit(\"request_speak\", JSON.stringify(j));\\n      } catch (e) {\\n        err = e;\\n      } finally {\\n        if (typeof callback === \"function\") callback(err);\\n      }\\n    },\\n    // 取消申请\\n    cancelRequestInteraction: function cancelRequestInteraction(type, callback) {\\n      var j = {\\n        \"viewerId\": this.viewerid,\\n        \"viewerName\": this.viewername,\\n        \"type\": type\\n      };\\n      debug(\"interaction\", \"取消申请：\" + JSON.stringify(j));\\n      var err = undefined;\\n\\n      try {\\n        this.socket.emit(\"cancel_request_speak\", JSON.stringify(j));\\n      } catch (e) {\\n        err = e;\\n      } finally {\\n        if (typeof callback === \"function\") callback(err);\\n      }\\n    },\\n    //挂断互动\\n    hangupInteraction: function hangupInteraction(type, callback) {\\n      var j = {\\n        \"viewerId\": DWLive.viewerid,\\n        \"viewerName\": DWLive.viewername,\\n        \"type\": type\\n      };\\n      debug(\"interaction\", \"挂断事件：\" + JSON.stringify(j));\\n      var err = undefined;\\n\\n      try {\\n        this.socket.emit(\"hangup_interaction\", JSON.stringify(j));\\n      } catch (e) {\\n        err = e;\\n      } finally {\\n        if (typeof callback === \"function\") callback(err);\\n      }\\n    }\\n  };\\n  /**\\n   * 语音互动支持\\n   *\\n   * */\\n\\n  var Interaction = function Interaction(opts) {\\n    try {\\n      window.PeerConnection = window.PeerConnection || window.webkitPeerConnection00 || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;\\n      window.URL = window.URL || window.webkitURL || window.msURL || window.oURL;\\n      window.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\\n      window.nativeRTCIceCandidate = window.mozRTCIceCandidate || window.RTCIceCandidate;\\n      window.nativeRTCSessionDescription = window.mozRTCSessionDescription || window.RTCSessionDescription;\\n    } catch (e) {}\\n\\n    this.usersPcs = {\\n      length: 0\\n    }; // 本地流信息\\n\\n    this.local = {\\n      type: {\\n        video: false,\\n        audio: false\\n      },\\n      video: {},\\n      audio: {}\\n    };\\n    this.isRequesting = false;\\n    /**\\n     * 请求语音互动\\n     *\\n     * t = {\\n     *  video: true,\\n     *  audio: true\\n     * }\\n     * */\\n\\n    this.requestInteraction = function (t, callback) {\\n      debug(\"Interaction\", \"请求互动\");\\n      this.local.type = t;\\n      this.isRequesting = true; // 请求互动超时计时器\\n\\n      this.setRequestTimeoutTimer(); // 创建音视频信息\\n\\n      this.createLocalMedia(function (error) {\\n        if (error) {\\n          if (typeof window.on_cc_live_interaction_error === \"function\") {\\n            window.on_cc_live_interaction_error(live.interaction.local.type, error, \"创建音视频信息出错\");\\n          }\\n\\n          return;\\n        }\\n\\n        Pusher.requestInteraction(t, callback);\\n      });\\n    }; // 语音通话计时器\\n\\n\\n    this.setCallingTimer = function () {\\n      live.interaction.interactionTime = 0;\\n      live.interaction.interactionTimeInterval = setInterval(function () {\\n        ++live.interaction.interactionTime;\\n\\n        if (typeof window.on_cc_live_interaction_interval === \"function\") {\\n          var p = live.interaction.local.type;\\n          var t = live.interaction.interactionTime;\\n          window.on_cc_live_interaction_interval(p, t);\\n        }\\n      }, 1000);\\n    }; // 清除语音通话计时器\\n\\n\\n    this.clearCallingTimer = function () {\\n      live.interaction.interactionTime = 0;\\n      clearInterval(live.interaction.interactionTimeInterval);\\n    }; // 互动请求超时定时器\\n\\n\\n    this.setRequestTimeoutTimer = function () {\\n      /**\\n       * 请求互动，60s内没有接受，则自动断开\\n       *\\n       * 通知pusher断开\\n       * */\\n      live.interaction.REQUEST_INTERACTION_TIMEOUT = setTimeout(function () {\\n        live.interaction.REQUEST_INTERACTION_TIMEOUT = -1; // 超时挂断语音通话\\n\\n        live.interaction.hangupInteraction(DWLive.viewerid);\\n        live.interaction.stopLocalStream();\\n        live.interaction.isRequesting = false;\\n        $(\"#interactionLocalVideo\")[0].src = \"\";\\n        $(\"#videoInteraction\").hide();\\n\\n        if (typeof window.on_cc_live_interaction_request_timeout === \"function\") {\\n          window.on_cc_live_interaction_request_timeout(live.interaction.local.type);\\n        }\\n      }, 60000);\\n    }; // 清空互动请求超时定时器\\n\\n\\n    this.clearRequestTimeoutTimer = function () {\\n      if (live.interaction.REQUEST_INTERACTION_TIMEOUT > 0) {\\n        clearTimeout(live.interaction.REQUEST_INTERACTION_TIMEOUT);\\n        live.interaction.REQUEST_INTERACTION_TIMEOUT = -1;\\n      }\\n    }; // 停止本地流\\n\\n\\n    this.stopLocalStream = function () {\\n      if (live.interaction.local.video.stream) {\\n        try {\\n          live.interaction.local.video.stream.getTracks().forEach(function (track) {\\n            track.stop();\\n          });\\n        } catch (e) {}\\n      }\\n\\n      if (live.interaction.local.audio.stream) {\\n        try {\\n          live.interaction.local.audio.stream.getTracks().forEach(function (track) {\\n            track.stop();\\n          });\\n        } catch (e) {}\\n      }\\n    };\\n\\n    this.cancelInteraction = function () {\\n      live.interaction.isRequesting = false;\\n\\n      if (typeof window.on_cc_live_interaction_cancal === \"function\") {\\n        window.on_cc_live_interaction_cancal(live.interaction.local.type);\\n      }\\n    }; // 断开连接\\n\\n\\n    this.disconnectInteraction = function (uId) {\\n      DWLive.openSound();\\n      this.clearRequestTimeoutTimer(); // 删除所有\\n\\n      if (uId == DWLive.viewerid) {\\n        $.each(live.interaction.usersPcs, function (userId, up) {\\n          var pc = up.pc;\\n\\n          if (pc == null) {\\n            return true;\\n          }\\n\\n          pc.close();\\n          pc = null;\\n\\n          if (live.interaction.usersPcs[userId]) {\\n            delete live.interaction.usersPcs[userId];\\n            var l = live.interaction.usersPcs.length - 1;\\n            live.interaction.usersPcs.length = l < 0 ? 0 : l;\\n          }\\n        });\\n      } else {\\n        $.each(live.interaction.usersPcs, function (userId, up) {\\n          var pc = up.pc;\\n\\n          if (!pc) {\\n            return true;\\n          }\\n\\n          if (userId != uId) {\\n            return true;\\n          }\\n\\n          pc.close();\\n          pc = null;\\n\\n          if (live.interaction.usersPcs[userId]) {\\n            delete live.interaction.usersPcs[userId];\\n            var l = live.interaction.usersPcs.length - 1;\\n            live.interaction.usersPcs.length = l < 0 ? 0 : l;\\n          }\\n        });\\n      }\\n\\n      if (live.interaction.usersPcs.length == 0) {\\n        this.stopLocalStream();\\n      }\\n\\n      live.interaction.isInteractioning = false;\\n      live.interaction.isRequesting = false;\\n    }; // 创建本地音视频流\\n\\n\\n    this.createLocalAudioAndVideoMedia = function (c) {\\n      var that = this;\\n      getUserMedia.call(navigator, {\\n        video: true,\\n        audio: true\\n      }, function (stream) {\\n        that.local.video.stream = stream;\\n\\n        if (c && typeof c === \"function\") {\\n          c(stream);\\n        }\\n      }, function (error) {\\n        debug(\"Interaction\", \"getUserMedia error: \" + error);\\n\\n        if (c && typeof c === \"function\") {\\n          c(error);\\n        }\\n      });\\n    }; // 创建本地音频流\\n\\n\\n    this.createLocalAudioMedia = function (c) {\\n      var that = this;\\n      getUserMedia.call(navigator, {\\n        video: false,\\n        audio: true\\n      }, function (stream) {\\n        that.local.audio.stream = stream;\\n\\n        if (c && typeof c === \"function\") {\\n          c(stream);\\n        }\\n      }, function (error) {\\n        debug(\"Interaction\", \"getUserMedia error: \" + error);\\n\\n        if (c && typeof c === \"function\") {\\n          c(error);\\n        }\\n      });\\n    };\\n\\n    this.createLocalMedia = function (c) {\\n      var that = this;\\n      var p = that.local.type;\\n      getUserMedia.call(navigator, p, function (stream) {\\n        if (p.video) {\\n          that.local.video.stream = stream;\\n        } else {\\n          that.local.audio.stream = stream;\\n        }\\n\\n        if (typeof window.on_cc_live_interaction_local_media === \"function\") {\\n          window.on_cc_live_interaction_local_media(p, stream);\\n        }\\n\\n        if (c && typeof c === \"function\") {\\n          c();\\n        }\\n      }, function (error) {\\n        debug(\"Interaction\", \"getUserMedia error: \" + error);\\n\\n        if (c && typeof c === \"function\") {\\n          c(error);\\n        }\\n      });\\n    };\\n\\n    this.iceServers = {\\n      \"iceServers\": [{\\n        url: \"stun:turn.csslcloud.net:3478\",\\n        credential: \"bokecc\",\\n        username: \"cc\"\\n      }, {\\n        url: \"turn:turn.csslcloud.net:3478\",\\n        credential: \"bokecc\",\\n        username: \"cc\"\\n      }]\\n    }; // 创建被动创建连接的PC\\n\\n    this.createAnswerPeerConnection = function (chatuser) {\\n      var pc = new PeerConnection(this.iceServers);\\n\\n      if (chatuser.type == \"audio\") {\\n        if (!live.interaction.local.audio.stream) {\\n          this.createLocalAudioMedia();\\n        }\\n\\n        pc.addStream(live.interaction.local.audio.stream);\\n      } else {\\n        if (!live.interaction.local.video.stream) {\\n          this.createLocalAudioAndVideoMedia();\\n        }\\n\\n        pc.addStream(live.interaction.local.video.stream);\\n      } // 如果检测到媒体流连接到本地，将其绑定到一个audio标签上输出\\n\\n\\n      pc.onaddstream = function (event) {\\n        if (typeof window.on_cc_live_interaction_remote_media === \"function\") {\\n          window.on_cc_live_interaction_remote_media(live.interaction.local.type, chatuser, event.stream);\\n        }\\n      };\\n\\n      pc.createAnswer(function (desc) {\\n        pc.setLocalDescription(desc);\\n        DWLive.sendInteractionMessage(live.interaction.local.type, chatuser.id, \"answer\", desc);\\n      }, function (error) {\\n        debug(\"Interaction\", \"Failure callback: \" + error);\\n      });\\n\\n      pc.onicecandidate = function (event) {\\n        if (event.candidate !== null) {\\n          DWLive.sendInteractionMessage(live.interaction.local.type, chatuser.id, \"\", event.candidate);\\n        }\\n      };\\n\\n      live.interaction.usersPcs[chatuser.id] = {\\n        pc: pc,\\n        user: chatuser\\n      };\\n      live.interaction.usersPcs.length += 1;\\n    }; // 创建主动创建连接的PC\\n\\n\\n    this.createOfferPeerConnection = function (chatuser) {\\n      var pc = new PeerConnection(this.iceServers);\\n      var p = live.interaction.local.type;\\n\\n      if (p.video) {\\n        pc.addStream(live.interaction.local.video.stream);\\n      } else {\\n        pc.addStream(live.interaction.local.audio.stream);\\n      } // 如果检测到媒体流连接到本地，将其绑定到一个audio标签上输出\\n\\n\\n      pc.onaddstream = function (event) {\\n        if (typeof window.on_cc_live_interaction_remote_media === \"function\") {\\n          window.on_cc_live_interaction_remote_media(live.interaction.local.type, chatuser, event.stream);\\n        }\\n      };\\n\\n      pc.oniceconnectionstatechange = function (d) {\\n        debug(\"Interaction\", \"iceConnectionState ...\" + pc.iceConnectionState);\\n\\n        if (pc.iceConnectionState == \"failed\") {\\n          debug(\"Interaction\", \"iceConnectionState failed\");\\n          live.interaction.hangupInteraction();\\n\\n          if (typeof window.on_cc_live_interaction_disconnect === \"function\") {\\n            window.on_cc_live_interaction_disconnect({\\n              disconnectid: DWLive.viewerid\\n            });\\n          }\\n        }\\n      };\\n\\n      pc.createOffer(function (desc) {\\n        pc.setLocalDescription(desc);\\n        DWLive.sendInteractionMessage(p, chatuser.id, \"offer\", desc);\\n      }, function (error) {\\n        if (typeof window.on_cc_live_interaction_error === \"function\") {\\n          window.on_cc_live_interaction_error(live.interaction.local.type, error, \"createOfferPeerConnection\");\\n        }\\n      });\\n\\n      pc.onicecandidate = function (event) {\\n        if (event.candidate !== null) {\\n          DWLive.sendInteractionMessage(p, chatuser.id, \"\", event.candidate);\\n        }\\n      };\\n\\n      live.interaction.usersPcs[chatuser.id] = {\\n        pc: pc,\\n        user: chatuser\\n      };\\n      live.interaction.usersPcs.length += 1;\\n    };\\n\\n    this.id = opts.interaction.id; // 当前浏览器是否支持互动功能\\n\\n    this.isSupportInteraction = function () {\\n      return window.location.protocol === \"https:\" && !!(PeerConnection && URL && getUserMedia && nativeRTCIceCandidate && nativeRTCSessionDescription);\\n    }; // 挂断互动\\n\\n\\n    this.hangupInteraction = function (callback) {\\n      if (this.isInteractioning) {\\n        Pusher.hangupInteraction(this.type, callback);\\n      } else if (this.isRequesting) {\\n        Pusher.cancelRequestInteraction(this.type, callback);\\n        this.stopLocalStream();\\n        this.cancelInteraction();\\n      } else {\\n        this.stopLocalStream();\\n        this.cancelInteraction();\\n      }\\n    };\\n  }; // LivePlayer\\n\\n\\n  var LivePlayer = {\\n    id: \"livePlayer\",\\n    swfUrl: \"//zeus.csslcloud.net/flash/Player.swf\",\\n    isReady: false,\\n    isPublishing: 0,\\n    delay: \"\",\\n    foreignPublish: \"\",\\n    init: function init() {\\n      var flashvars = {\\n        \"userid\": DWLive.userid,\\n        \"roomid\": DWLive.roomid,\\n        \"foreignPublish\": this.foreignPublish,\\n        \"warmvideoid\": this.warmVideoId,\\n        \"openhostmode\": this.openHostMode,\\n        // 多主讲\\n        \"dvr\": this.dvr,\\n        \"barrage\": this.barrageData,\\n        \"backgroundImageUri\": this.backgroundImageUri,\\n        \"backgroundHint\": this.backgroundHint,\\n        \"countDownTime\": DWLive.liveCountdown,\\n        \"openMultiQuality\": DWLive.multiQuality,\\n        \"language\": DWLive.language || \"\",\\n        \"type\": \"liveplayer\",\\n        \"upid\": DWLive.upid,\\n        \"viewerid\": this.viewerid,\\n        \"ua\": 1\\n      };\\n      var buffer = this.delay;\\n\\n      if (buffer > 0) {\\n        flashvars.buffer = buffer;\\n      }\\n\\n      var params = {\\n        allowFullscreen: \"true\",\\n        allowScriptAccess: \"always\",\\n        wmode: \"transparent\"\\n      };\\n      swfobject.embedSWF(this.swfUrl, this.id, \"100%\", \"100%\", \"10.0.0\", \"/flash/expressInstall.swf\", flashvars, params);\\n    },\\n    getFlash: function getFlash() {\\n      return swfobject.getObjectById(this.id);\\n    },\\n    getPlayerTime: function getPlayerTime() {\\n      var t = parseInt(this.getFlash()._time());\\n\\n      if (isNaN(t) || t < 0) {\\n        return 0;\\n      }\\n\\n      return t;\\n    },\\n    start: function start() {\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        //禁播\\n        if (DWLive.isBan) {\\n          $(\"#livePlayer\").css({\\n            \"text-align\": \"center\",\\n            \"color\": \"white\",\\n            \"font-size\": \"18px\",\\n            \"line-height\": \"232px\"\\n          });\\n          $(\"#livePlayer\").html(\"<p>直播已封禁，请联系管理员</p>\");\\n          return;\\n        }\\n\\n        setTimeout(function () {\\n          MobileLive.init();\\n        }, DELAY_TIME);\\n      } else {\\n        if (!this.getFlash()) {\\n          return;\\n        }\\n\\n        this.isPublishing = 1;\\n\\n        this.getFlash()._streamStart();\\n      }\\n    },\\n    end: function end() {\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        setTimeout(function () {\\n          MobileLive.end();\\n        }, DELAY_TIME);\\n      } else {\\n        if (!this.getFlash()) {\\n          return;\\n        }\\n\\n        this.isPublishing = 0;\\n\\n        this.getFlash()._streamEnd();\\n      }\\n    },\\n    // 弹幕\\n    barrage: function barrage(m) {\\n      if (!m) {\\n        return;\\n      }\\n\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      if (this.getFlash()._jsTOASbarrage) {\\n        this.getFlash()._jsTOASbarrage(m);\\n      }\\n    },\\n    getLine: function getLine() {\\n      var lines = this.getFlash().getLine();\\n\\n      if (lines) {\\n        lines = JSON.parse(lines);\\n      }\\n\\n      return lines;\\n    },\\n    changeLine: function changeLine(line) {\\n      this.getFlash().changeLine(line);\\n    },\\n    changeVideoScale: function changeVideoScale(t) {\\n      this.getFlash()._showScreenScale(t);\\n    },\\n    onlyAudio: function onlyAudio() {\\n      this.getFlash()._onlyAudio();\\n    },\\n    setSound: function setSound(n) {\\n      this.getFlash()._SetSound(n);\\n    },\\n    // 打开声音\\n    openSound: function openSound() {\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      this.getFlash()._onSound();\\n    },\\n    // 关闭声音\\n    closeSound: function closeSound() {\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      this.getFlash()._unSound();\\n    },\\n    // 开启关闭弹幕\\n    openBarrage: function openBarrage(b) {\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      this.getFlash()._barrage(b);\\n    },\\n    showControl: function showControl(b) {\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      this.getFlash()._ShowControl(b);\\n    },\\n    //封禁\\n    banLive: function banLive() {\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      this.getFlash()._banLive();\\n    },\\n    //解禁\\n    unbanLive: function unbanLive() {\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      this.getFlash()._unbanLive();\\n    },\\n    // 显示跑马灯功能\\n    showMarquee: function showMarquee(marquee) {\\n      if (!marquee) {\\n        return;\\n      }\\n\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      this.getFlash()._showMarqueePlugin(marquee);\\n    },\\n    closeMarquee: function closeMarquee() {\\n      if (!this.getFlash()) {\\n        return;\\n      }\\n\\n      this.getFlash()._closeMarqueePlugin({\\n        name: \"PluginForMarquee\"\\n      });\\n    }\\n  }; // window.LivePlayer = LivePlayer;\\n\\n  window._onStart = function () {\\n    //\\t\\t直播播放器准备开始播放\\n    LivePlayer.isReady = true;\\n  };\\n\\n  function initDrawPanelInfo() {\\n    if (!isHistoryReady) {\\n      setTimeout(function () {\\n        initDrawPanelInfo();\\n      }, 3000);\\n      return;\\n    }\\n\\n    if (DWDpc.fastMode) {\\n      return;\\n    }\\n\\n    if (draws.length) {\\n      DrawPanel.draws(draws);\\n      draws = [];\\n    } // 显示最后一张图片\\n\\n\\n    if (pageChanges.length) {\\n      var ppc = pageChanges.pop();\\n\\n      if (!ppc) {\\n        return;\\n      }\\n\\n      DrawPanel.filp(ppc);\\n\\n      if (animations.length) {\\n        var animation = animations.pop();\\n        var animationJ = toJson(animation);\\n        var ppcJ = toJson(ppc);\\n\\n        if (ppcJ.docid == animationJ.docid && ppcJ.time <= animationJ.time) {\\n          DrawPanel.animationFilp(animation);\\n        }\\n      }\\n\\n      pageChanges = [];\\n    }\\n  } // DrawPanel\\n\\n\\n  var DrawPanel = {\\n    id: \"drawPanel\",\\n    isReady: false,\\n    isProcessing: false,\\n    getWidth: function getWidth() {\\n      return \"100%\";\\n    },\\n    getHeight: function getHeight() {\\n      return \"100%\";\\n    },\\n    swfUrl: \"//zeus.csslcloud.net/flash/Player.swf\",\\n    init: function init() {\\n      var flashvars = {\\n        \"type\": \"drawpanel\"\\n      };\\n      var params = {\\n        allowFullscreen: \"true\",\\n        allowScriptAccess: \"always\",\\n        wmode: \"transparent\"\\n      };\\n      var attributes = {};\\n\\n      if (!MobileLive.isIPad() && !MobileLive.isIPhone() && !MobileLive.isAndroid() && !MobileLive.isWindowsPhone()) {\\n        //开启极速动画模式\\n        if (!DWDpc.fastMode) {\\n          swfobject.embedSWF(this.swfUrl, this.id, this.getWidth(), this.getHeight(), \"10.0.0\", \"/flash/expressInstall.swf\", flashvars, params, attributes);\\n        }\\n      }\\n    },\\n    getSwf: function getSwf() {\\n      if (!this.isReady) {\\n        return;\\n      }\\n\\n      return swfobject.getObjectById(this.id);\\n    },\\n    clear: function clear() {\\n      var swf = this.getSwf();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      swf._streamEnd();\\n\\n      Pusher.pagechangedata = [];\\n      Pusher.drawjson = [];\\n    },\\n    // 画图\\n    draw: function draw(j) {\\n      var swf = this.getSwf();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      swf.draw(j);\\n    },\\n    draws: function draws(js) {\\n      var swf = this.getSwf();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      (function (jstr) {\\n        setTimeout(function () {\\n          swf.drawList(jstr);\\n        });\\n      })(js);\\n    },\\n    // 翻页\\n    filp: function filp(j) {\\n      var swf = this.getSwf();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      var documentDisplayMode = DWLive.documentDisplayMode;\\n\\n      if (documentDisplayMode == 1) {\\n        this.displayMode = \"auto\";\\n      } else if (documentDisplayMode == 2) {\\n        this.displayMode = \"width\";\\n      } else {\\n        this.displayMode = \"auto\";\\n      }\\n\\n      if (live.adapt !== undefined) {\\n        this.displayMode = live.adapt ? \"auto\" : \"width\";\\n      }\\n\\n      var jj = JSON.parse(j);\\n      var u = jj.url;\\n      var isHttps = window.location.protocol === \"https:\";\\n\\n      if (isHttps) {\\n        jj.url = u.replace(/http:/g, \"https:\");\\n      }\\n\\n      swf.filp(JSON.stringify(jj), this.displayMode);\\n    },\\n    // 动画\\n    animationFilp: function animationFilp(j) {\\n      var swf = this.getSwf();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      swf.animation(j);\\n    },\\n    // 弹幕\\n    barrage: function barrage(m) {\\n      if (!m) {\\n        return;\\n      }\\n\\n      if (!this.getSwf()) {\\n        return;\\n      }\\n\\n      if (this.getSwf()._jsTOASbarrage) {\\n        this.getSwf()._jsTOASbarrage(m);\\n      }\\n    },\\n    // 显示跑马灯功能\\n    showMarquee: function showMarquee(marquee) {\\n      if (!marquee) {\\n        return;\\n      }\\n\\n      if (!this.getSwf()) {\\n        return;\\n      }\\n\\n      this.getSwf().showMarqueeLight(marquee);\\n    }\\n  };\\n  var draws = [];\\n  var pageChanges = [];\\n  var animations = [];\\n  var isHistoryReady = false; // 历史数据\\n\\n  var History = function History() {\\n    $.ajax({\\n      url: \"//view.csslcloud.net/api/view/info?userid=\" + DWLive.userid + \"&roomid=\" + DWLive.roomid,\\n      type: \"GET\",\\n      dataType: \"jsonp\",\\n      success: function success(data) {\\n        if (!data.success) {\\n          return;\\n        }\\n\\n        if (!data.datas) {\\n          return;\\n        }\\n\\n        var datas = data.datas;\\n        var meta = datas.meta;\\n\\n        if (!meta) {\\n          return;\\n        }\\n\\n        LivePlayer.isPublishing = meta.isPublishing; // 没有推流\\n\\n        if (meta.isPublishing != 1) {\\n          return;\\n        }\\n\\n        var answers = meta.answer ? meta.answer : [];\\n        var questions = meta.question ? meta.question : [];\\n        var broadcasts = meta.broadcast ? meta.broadcast : [];\\n\\n        for (var i = 0; i < answers.length; i++) {\\n          var answer = answers[i];\\n\\n          for (var ii = 0; ii < questions.length; ii++) {\\n            var question = questions[ii];\\n\\n            if (question.encryptId == answer.encryptId) {\\n              answer.questionUserId = question.questionUserId;\\n            }\\n          }\\n        }\\n\\n        if (questions && questions.length) {\\n          for (var i = 0; i < questions.length; i++) {\\n            var question = questions[i];\\n\\n            if (typeof DWLive.onQuestion === \"function\") {\\n              DWLive.onQuestion(JSON.stringify({\\n                \"action\": \"question\",\\n                \"value\": {\\n                  \"id\": question.encryptId,\\n                  \"content\": question.content,\\n                  \"userId\": question.questionUserId,\\n                  \"groupId\": question.groupId,\\n                  \"userName\": question.questionUserName,\\n                  \"isPublish\": question.isPublish,\\n                  \"triggerTime\": question.triggerTime,\\n                  \"userAvatar\": question.userAvatar\\n                }\\n              }));\\n            }\\n          }\\n        }\\n\\n        if (answers && answers.length) {\\n          for (var i = 0; i < answers.length; i++) {\\n            var answer = answers[i];\\n\\n            if (typeof DWLive.onAnswer === \"function\") {\\n              DWLive.onAnswer(JSON.stringify({\\n                \"action\": \"answer\",\\n                \"value\": {\\n                  \"questionId\": answer.encryptId,\\n                  \"isPrivate\": answer.isPrivate,\\n                  \"content\": answer.content,\\n                  \"userId\": answer.answerUserId,\\n                  \"groupId\": answer.groupId,\\n                  \"userName\": answer.answerUserName,\\n                  \"questionUserId\": answer.questionUserId,\\n                  \"triggerTime\": answer.triggerTime,\\n                  \"userAvatar\": answer.userAvatar\\n                }\\n              }));\\n            }\\n          }\\n        }\\n\\n        if (broadcasts && broadcasts.length) {\\n          for (var i = 0; i < broadcasts.length; i++) {\\n            var broadcast = broadcasts[i];\\n\\n            if (typeof DWLive.onBroadcastMsg == \"function\") {\\n              DWLive.onBroadcastMsg({\\n                content: broadcast.content,\\n                time: broadcast.time\\n              });\\n            }\\n          }\\n        }\\n\\n        if (MobileLive.isMobile() == \"isMobile\" && $.DrawingBoard) {\\n          $.DrawingBoard.history(meta);\\n        } //极速动画获取历史信息\\n\\n\\n        DWDpc.history(meta);\\n        var chatLogs = meta.chatLog;\\n\\n        if (chatLogs && chatLogs.length) {\\n          var cls = [];\\n\\n          for (var i = 0; i < chatLogs.length; i++) {\\n            var chatLog = chatLogs[i];\\n            cls.push({\\n              \"userid\": chatLog.userId,\\n              \"username\": chatLog.userName,\\n              \"userrole\": chatLog.userRole,\\n              \"useravatar\": chatLog.userAvatar,\\n              \"groupId\": chatLog.groupId,\\n              \"msg\": chatLog.content,\\n              \"time\": chatLog.time,\\n              \"chatId\": chatLog.chatId,\\n              \"status\": chatLog.status,\\n              \"usercustommark\": chatLog.userCustomMark\\n            });\\n          }\\n\\n          if (typeof DWLive.onPublicChatMessage === \"function\") {\\n            for (var idx = 0; idx < cls.length; idx++) {\\n              DWLive.onPublicChatMessage(JSON.stringify(cls[idx]));\\n            }\\n          }\\n        }\\n\\n        if (!DWDpc.fastMode) {\\n          var pageChange = meta.pageChange;\\n\\n          if (pageChange && pageChange.length) {\\n            pageChange.sort(function (p1, p2) {\\n              return parseInt(p1.time) - parseInt(p2.time);\\n            });\\n            var lastPage = pageChange.pop();\\n            pageChanges.push(JSON.stringify({\\n              \"fileName\": lastPage.docName,\\n              \"totalPage\": lastPage.docTotalPage,\\n              \"docid\": lastPage.encryptDocId,\\n              \"url\": lastPage.url,\\n              \"page\": lastPage.pageNum,\\n              \"time\": lastPage.time,\\n              \"useSDK\": lastPage.useSDK\\n            }));\\n          }\\n\\n          var animation = meta.animation;\\n\\n          if (animation && animation.length) {\\n            animation.sort(function (p1, p2) {\\n              return parseInt(p1.time) - parseInt(p2.time);\\n            });\\n            var lastAnimation = animation.pop();\\n            animations.push(JSON.stringify({\\n              \"fileName\": lastAnimation.docName,\\n              \"totalPage\": lastAnimation.docTotalPage,\\n              \"docid\": lastAnimation.encryptDocId,\\n              \"url\": lastAnimation.url,\\n              \"page\": lastAnimation.pageNum,\\n              \"time\": lastAnimation.time,\\n              \"step\": lastAnimation.step\\n            }));\\n          }\\n\\n          var draw = meta.draw;\\n\\n          if (draw && draw.length) {\\n            for (var i = 0; i < draw.length; i++) {\\n              draws.push(draw[i].data);\\n            }\\n          }\\n        }\\n\\n        isHistoryReady = true;\\n      }\\n    });\\n  };\\n\\n  var opts = {\\n    // 互动信息\\n    interaction: {\\n      id: \"interactionPlayer\",\\n      width: \"100%\",\\n      height: \"100%\"\\n    }\\n  };\\n\\n  var Live = function Live(opts) {\\n    this.interaction = new Interaction(opts);\\n  };\\n\\n  var live = new Live(opts);\\n\\n  window.on_drampanel_ready = function () {\\n    // 画板Flash加载完成回调\\n    DrawPanel.isReady = true;\\n    setTimeout(function () {\\n      initDrawPanelInfo();\\n    }, 1500);\\n  }; // 画图事件\\n\\n\\n  window.on_cc_live_dw_draw = function (data) {\\n    setTimeout(function () {\\n      DWDpc.draw(data);\\n    }, getDeltaTime());\\n    setTimeout(function () {\\n      var j = toJson(data);\\n      DrawPanel.draw(JSON.stringify(j.value.data));\\n    }, getDeltaTime());\\n\\n    if (MobileLive.isMobile() == \"isMobile\") {\\n      setTimeout(function () {\\n        $.DrawingBoard && $.DrawingBoard.db(data);\\n      }, getDeltaTime());\\n    }\\n  }; // 翻页事件\\n\\n\\n  window.on_cc_live_dw_page_change = function (data) {\\n    //极速动画\\n    setTimeout(function () {\\n      DWDpc.pageChange(data);\\n    }, getDeltaTime()); //flash\\n\\n    setTimeout(function () {\\n      var j = toJson(data);\\n      DrawPanel.filp(JSON.stringify(j.value));\\n    }, getDeltaTime()); //canvas\\n\\n    if (MobileLive.isMobile() == \"isMobile\") {\\n      setTimeout(function () {\\n        $.DrawingBoard && $.DrawingBoard.db(data);\\n      }, getDeltaTime());\\n    }\\n  }; // 动画翻页事件\\n\\n\\n  window.on_cc_live_dw_animation_change = function (data) {\\n    setTimeout(function () {\\n      DWDpc.animationChange(data);\\n    }, getDeltaTime());\\n    setTimeout(function () {\\n      var j = toJson(data);\\n      DrawPanel.animationFilp(JSON.stringify(j.value));\\n    }, getDeltaTime());\\n\\n    if (MobileLive.isMobile() == \"isMobile\") {\\n      setTimeout(function () {\\n        $.DrawingBoard && $.DrawingBoard.db(data);\\n      }, getDeltaTime());\\n    }\\n  }; // Chat\\n\\n\\n  var Chat = {\\n    init: function init() {\\n      Pusher.socket.on(\"chat_message\", function (j) {\\n        if (typeof DWLive.onPublicChatMessage === \"function\") {\\n          DWLive.onPublicChatMessage(j);\\n        }\\n      }); //聊天审核\\n\\n      Pusher.socket.on(\"chat_log_manage\", function (j) {\\n        if (typeof DWLive.onPublicChatLogManage === \"function\") {\\n          DWLive.onPublicChatLogManage(j);\\n        }\\n      }); // 消息提醒\\n\\n      Pusher.socket.on(\"notification\", function (j) {\\n        if (typeof DWLive.onNotification === \"function\") {\\n          DWLive.onNotification(j);\\n        }\\n      });\\n      Pusher.socket.on(\"information\", function (j) {\\n        if (typeof DWLive.onInformation === \"function\") {\\n          DWLive.onInformation(j);\\n        }\\n      }); // 接收发送私聊函数\\n\\n      Pusher.socket.on(\"private_chat_self\", function (j) {\\n        if (typeof DWLive.onPrivateChatMessage === \"function\") {\\n          DWLive.onPrivateChatMessage(j);\\n        }\\n      }); // 接收回答私聊函数\\n\\n      Pusher.socket.on(\"private_chat\", function (j) {\\n        if (typeof DWLive.onPrivateAnswer === \"function\") {\\n          DWLive.onPrivateAnswer(j);\\n        }\\n      }); // 在线列表\\n\\n      Pusher.socket.on(\"room_context\", function (msg) {}); // 自定义消息\\n\\n      Pusher.socket.on(\"custom_message\", function (j) {\\n        if (typeof DWLive.onCustomChatMessage === \"function\") {\\n          DWLive.onCustomChatMessage(j);\\n        }\\n      });\\n    }\\n  }; // Qa\\n\\n  var Qa = {\\n    init: function init() {\\n      // 问答->提交问题\\n      Pusher.socket.on(\"question\", function (j) {\\n        if (typeof DWLive.onQuestion === \"function\") {\\n          DWLive.onQuestion(j);\\n        }\\n\\n        if (typeof DWLive.onQuestionSend === \"function\") {\\n          DWLive.onQuestionSend(j);\\n        }\\n      }); // 问答->返回答案\\n\\n      Pusher.socket.on(\"answer\", function (j) {\\n        if (typeof DWLive.onAnswer === \"function\") {\\n          DWLive.onAnswer(j);\\n        }\\n\\n        if (typeof DWLive.onAnswerSend === \"function\") {\\n          DWLive.onAnswerSend(j);\\n        }\\n      });\\n    }\\n  }; //事件兼容处理\\n\\n  var Event = {};\\n\\n  Event.addEvents = function (target, eventType, handle) {\\n    if (document.addEventListener) {\\n      Event.addEvents = function (target, eventType, handle) {\\n        target.addEventListener(eventType, handle, false);\\n      };\\n    } else {\\n      Event.addEvents = function (target, eventType, handle) {\\n        target.attachEvent(\"on\" + eventType, function () {\\n          handle.call(target, arguments);\\n        });\\n      };\\n    }\\n\\n    ;\\n    Event.addEvents(target, eventType, handle);\\n  };\\n\\n  var MobileLive = {\\n    src: \"\",\\n    audio: false,\\n    line: 0,\\n    init: function init() {\\n      var _this = this;\\n\\n      $.ajax({\\n        url: \"//zeus.csslcloud.net/api/hls/play\",\\n        type: \"GET\",\\n        dataType: \"json\",\\n        data: {\\n          roomid: DWLive.roomid,\\n          userid: DWLive.userid\\n        },\\n        success: function success(data) {\\n          var status = data.live.status;\\n\\n          if (status == 0) {\\n            _this.m3u8 = data.live.m3u8;\\n            _this.src = data.live.m3u8;\\n            _this.secureHosts = data.live.secureHosts || [];\\n            _this.audioM3u8 = data.live.audioM3u8 || [];\\n            _this.audioSecureHosts = data.live.audioSecureHosts || [];\\n            _this.isHttps = window.location.protocol === \"https:\";\\n            options.init();\\n            options.liveId = data.live.liveId;\\n\\n            if (_this.isHttps && _this.secureHosts && _this.secureHosts.length) {\\n              _this.m3u8 = _this.secureHosts;\\n            }\\n\\n            _this.appendVideo(_this.m3u8[0]);\\n\\n            if (typeof DWLive.onLiveStarting === \"function\") {\\n              DWLive.onLiveStarting();\\n            } //ios解禁播放失败处理\\n\\n\\n            var vd = $(\"#livePlayer>video\")[0];\\n            var index = 0;\\n\\n            var handle = function handle() {\\n              if (index >= 3) {\\n                vd.removeEventListener(\"error\", handle);\\n                return;\\n              }\\n\\n              vd.removeEventListener(\"error\", handle);\\n              setTimeout(function () {\\n                index++;\\n                vd.src = vd.src;\\n                Event.addEvents(vd, \"error\", handle, false);\\n              }, 1000);\\n            };\\n\\n            Event.addEvents(vd, \"error\", handle, false);\\n          } else {\\n            if (DWLive.isBan) {\\n              $(\"#livePlayer\").css({\\n                \"text-align\": \"center\",\\n                \"color\": \"white\",\\n                \"font-size\": \"18px\",\\n                \"line-height\": \"232px\"\\n              });\\n              $(\"#livePlayer\").html(\"<p>直播已封禁，请联系管理员</p>\");\\n              return;\\n            }\\n          }\\n        }\\n      });\\n    },\\n    appendVideo: function appendVideo(s) {\\n      var v = \"<video id=\\\\\"player_live\\\\\" webkit-playsinline playsinline controls autoplay x-webkit-airplay=\\\\\"allow\\\\\" x5-playsinline width=\\\\\"100%\\\\\" height=\\\\\"100%\\\\\" src=\\\\\"\" + s + \"\\\\\"></video>\";\\n      $(\"#\" + LivePlayer.id).html(v);\\n      var video = document.getElementById(\"player_live\");\\n\\n      DWLive.onKickOut = function () {\\n        $(\"#\" + LivePlayer.id).html(\"\");\\n      };\\n\\n      this.report = new ReportLog(options, 1, 11, video, true);\\n    },\\n    ban: function ban() {\\n      $(\"#livePlayer\").css({\\n        \"text-align\": \"center\",\\n        \"color\": \"white\",\\n        \"font-size\": \"18px\",\\n        \"line-height\": \"232px\"\\n      });\\n      $(\"#livePlayer\").html(\"<p>直播已封禁，请联系管理员</p>\");\\n    },\\n    unban: function unban() {\\n      $(\"#livePlayer\").css({\\n        \"text-align\": \"\",\\n        \"color\": \"\",\\n        \"font-size\": \"\",\\n        \"line-height\": \"\"\\n      });\\n      this.init();\\n    },\\n    end: function end() {\\n      $(\"#\" + LivePlayer.id).html(\"\");\\n      this.report.stopTimer();\\n    },\\n    appendDoc: function appendDoc(s) {\\n      var isHttps = window.location.protocol === \"https:\";\\n\\n      if (isHttps) {\\n        s = s.replace(/http:/g, \"https:\");\\n      }\\n\\n      var img = \"<img src=\\\\\"\" + s + \"\\\\\" />\";\\n      $(\"#\" + DrawPanel.id).html(img);\\n    },\\n    changeLine: function changeLine(line) {\\n      $(\"#\" + LivePlayer.id).find(\"video\").attr(\"src\", this.m3u8[line]);\\n      this.line = line;\\n\\n      if (MobileLive.audio) {\\n        audio.src = \"\";\\n        audio.src = this.m3u8[this.line];\\n        audio.play();\\n      }\\n    },\\n    onlyAudio: function onlyAudio() {\\n      var v = $(\"#\" + LivePlayer.id).find(\"video\");\\n      MobileLive.audio = !MobileLive.audio;\\n\\n      if (MobileLive.audio) {\\n        if (this.isHttps && this.audioSecureHosts && this.audioSecureHosts.length) {\\n          this.m3u8 = this.audioSecureHosts;\\n        } else {\\n          this.m3u8 = this.audioM3u8;\\n        }\\n\\n        audio = new Audio();\\n        audio.src = this.m3u8[this.line];\\n        audio.play();\\n      } else {\\n        if (this.isHttps && this.secureHosts && this.secureHosts.length) {\\n          this.m3u8 = this.secureHosts;\\n        } else {\\n          this.m3u8 = this.src;\\n        }\\n\\n        audio.src = \"\";\\n        v.attr(\"src\", this.m3u8[this.line]);\\n      }\\n    },\\n    isMobile: function isMobile() {\\n      if (this.isIPad() || this.isIPhone() || this.isAndroid() || this.isWindowsPhone()) {\\n        return \"isMobile\";\\n      }\\n    },\\n    isIPad: function isIPad() {\\n      return navigator.userAgent.match(/iPad/i) != null;\\n    },\\n    isIPhone: function isIPhone() {\\n      return navigator.userAgent.match(/iPhone/i) != null;\\n    },\\n    isAndroid: function isAndroid() {\\n      return navigator.userAgent.match(/Android/i) != null;\\n    },\\n    isWindowsPhone: function isWindowsPhone() {\\n      return navigator.userAgent.match(/Windows Phone/i) != null;\\n    }\\n  }; // 接受语音互动请求\\n\\n  window.on_cc_live_accept_interaction = function (data) {\\n    DWLive.closeSound(); // 清除请求超时计时器\\n\\n    live.interaction.clearRequestTimeoutTimer();\\n    DWLive.enterInteractionRoom();\\n    live.interaction.isInteractioning = true;\\n    live.interaction.setCallingTimer();\\n\\n    if (typeof window.on_cc_live_interaction_accept === \"function\") {\\n      window.on_cc_live_interaction_accept(live.interaction.local.type, toJson(data));\\n    }\\n  }; // 主动连接语音聊天信息\\n\\n\\n  window.on_cc_live_interaction_chatusers = function (data) {\\n    data = toJson(data);\\n    $.each(data, function (index, chatuser) {\\n      if (chatuser.id == DWLive.viewerid) {\\n        return true;\\n      } // 客户端只是和主播进行语音互动\\n\\n\\n      if (chatuser.role == \"publisher\" && !chatuser.isMainSpeaker) {\\n        return true;\\n      }\\n\\n      live.interaction.createOfferPeerConnection(chatuser);\\n    });\\n  }; // 接收互动信息\\n\\n\\n  window.on_cc_live_interaction_message = function (d) {\\n    var d = toJson(d);\\n    debug(\"Interaction\", \"rtc互动信息:\" + JSON.stringify(d));\\n    var toId = d.toid;\\n    var fromId = d.fromid;\\n    var fromName = d.fromname;\\n    var type = d.type;\\n    var data = d.data;\\n\\n    if (typeof data === \"string\") {\\n      data = JSON.parse(data);\\n    }\\n\\n    var event = d.event;\\n\\n    if (event === \"offer\") {\\n      data.type = event;\\n      live.interaction.createAnswerPeerConnection({\\n        id: fromId,\\n        name: fromName,\\n        type: type\\n      });\\n      var pc = live.interaction.usersPcs[fromId].pc;\\n\\n      if (!pc) {\\n        return;\\n      }\\n\\n      pc.setRemoteDescription(new nativeRTCSessionDescription(data));\\n      pc.createAnswer(function () {}, function (error) {\\n        debug(\"Interaction\", \"Failure callback: \" + error);\\n      });\\n    } else if (event === \"answer\") {\\n      var pc = live.interaction.usersPcs[fromId].pc;\\n\\n      if (!pc) {\\n        return;\\n      }\\n\\n      data.type = event;\\n      debug(\"Interaction\", \"answer spark_message信息:\" + data);\\n      pc.setRemoteDescription(new nativeRTCSessionDescription(data));\\n      pc.receivedAnswer = true;\\n\\n      if (!pc.hasAddIce && pc.RTCICE) {\\n        pc.addIceCandidate(pc.RTCICE);\\n      }\\n    } else {\\n      var u = live.interaction.usersPcs[fromId];\\n\\n      if (!u) {\\n        u = live.interaction.usersPcs[toId];\\n      }\\n\\n      var pc = u ? u.pc : null;\\n\\n      if (!pc) {\\n        return;\\n      } // 收到answer之后再addIce\\n\\n\\n      var ice = new RTCIceCandidate(data);\\n\\n      if (pc.receivedAnswer) {\\n        pc.hasAddIce = true;\\n        pc.addIceCandidate(ice);\\n      } else {\\n        pc.hasAddIce = false;\\n        pc.RTCICE = ice;\\n      }\\n    }\\n  };\\n\\n  window.isDebug = false; // 打印debug信息\\n\\n  var debug = function debug(t, d) {\\n    if (!window.isDebug) {\\n      return;\\n    }\\n\\n    if (console && typeof console.log === \"function\") {\\n      console.log(t, d);\\n    }\\n  };\\n\\n  function toJson(data) {\\n    if (typeof data === \"string\") {\\n      try {\\n        return JSON.parse(data);\\n      } catch (e) {\\n        return {};\\n      }\\n    }\\n\\n    return data;\\n  }\\n\\n  window.DWLive = DWLive;\\n  window.live = live; // live player ready\\n\\n  window._swfInit = function () {\\n    if (typeof window.on_cc_live_player_ready === \"function\") {\\n      window.on_cc_live_player_ready();\\n    }\\n  };\\n  /**\\n   * Flash 加载完成\\n   * */\\n\\n\\n  window._swfOk = function (id) {\\n    if (typeof window.on_cc_swf_loading_completed === \"function\") {\\n      window.on_cc_swf_loading_completed(id);\\n    }\\n  };\\n\\n  function getDeltaTime() {\\n    var b = LivePlayer.delay;\\n\\n    if (isNaN(b) || b < 0) {\\n      b = 0;\\n    }\\n\\n    b = b * 1000; // 低延迟\\n\\n    if (MobileLive.isMobile() == \"isMobile\") {\\n      if (b === 0) {\\n        return 5000;\\n      } else {\\n        return 10000;\\n      }\\n    } else {\\n      if (b === 0) {\\n        return 1300;\\n      } else {\\n        return 3000;\\n      }\\n    }\\n  }\\n\\n  function getDelayTime() {\\n    var b = LivePlayer.delay;\\n\\n    if (isNaN(b) || b < 0) {\\n      b = 0;\\n    }\\n\\n    if (b) {// console.log(\"非低延迟模式\");\\n    } else {} // console.log(\"低延迟模式\");\\n      // b = b * 1000;\\n      // 低延迟\\n\\n\\n    if (MobileLive.isMobile() == \"isMobile\") {\\n      if (b === 0) {\\n        return 5000;\\n      } else {\\n        return 10000;\\n      }\\n    } else {\\n      if (b === 0) {\\n        return 1300;\\n      } else {\\n        return 3000;\\n      }\\n    }\\n  }\\n})(window);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///3\\n')}]);","extractedComments":[]}