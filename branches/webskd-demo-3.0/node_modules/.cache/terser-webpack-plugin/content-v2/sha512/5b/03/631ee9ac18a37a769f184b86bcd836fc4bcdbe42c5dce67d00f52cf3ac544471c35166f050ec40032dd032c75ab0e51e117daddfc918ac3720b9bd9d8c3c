{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"default\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"11\",\"eval\"],\"mappings\":\"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,EAAAA,EAAAD,QAAAF,GAGAG,EAAAE,GAAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,QAAAA,OAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,aAAA,CAAiDmB,OAAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,GAAA,EAAAE,GAAA,iBAAAF,GAAAA,GAAAA,EAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,UAAA,CAAyCT,YAAAA,EAAAK,MAAAA,IACzC,EAAAE,GAAA,iBAAAF,EAAA,IAAA,IAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,GAAAA,EAAAqB,WACA,WAA2B,OAAArB,EAAA2B,SAC3B,WAAiC,OAAA3B,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAkB,EAAAC,GAAsD,OAAAlB,OAAAmB,UAAAC,eAAA3B,KAAAwB,EAAAC,IAGtDhC,EAAAmC,EAAA,GAIAnC,EAAAA,EAAAoC,EAAA,KAAA,CAAAC,GAAA,SAAAlC,OAAAD,QAAAF,qBAAA,aAAAsC,KAAA\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 11);\\n\"]}","code":"!function(I){var C={};function g(Q){if(C[Q])return C[Q].exports;var A=C[Q]={i:Q,l:!1,exports:{}};return I[Q].call(A.exports,A,A.exports,g),A.l=!0,A.exports}g.m=I,g.c=C,g.d=function(I,C,Q){g.o(I,C)||Object.defineProperty(I,C,{enumerable:!0,get:Q})},g.r=function(I){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(I,\"__esModule\",{value:!0})},g.t=function(I,C){if(1&C&&(I=g(I)),8&C)return I;if(4&C&&\"object\"==typeof I&&I&&I.__esModule)return I;var Q=Object.create(null);if(g.r(Q),Object.defineProperty(Q,\"default\",{enumerable:!0,value:I}),2&C&&\"string\"!=typeof I)for(var A in I)g.d(Q,A,function(C){return I[C]}.bind(null,A));return Q},g.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(C,\"a\",C),C},g.o=function(I,C){return Object.prototype.hasOwnProperty.call(I,C)},g.p=\"\",g(g.s=11)}({11:function(module,exports,__webpack_require__){\"use strict\";eval('\\n\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\n/**\\n * CC playback video\\n * v2.9.0 2019/01/21\\n */\\n!function ($, window, document) {\\n  // 直播播放器信息\\n  var CallbackPlayer = function CallbackPlayer(opts) {\\n    this.isReady = false;\\n    this.isPublishing = 0;\\n    this.id = opts.callbackPlayer.id;\\n    var swfUrl = \"//player.csslcloud.net/platform/live/CallbackPlayer.swf\";\\n    var flashvars = {\\n      \"userid\": opts.userId,\\n      \"videoid\": opts.videoId,\\n      \"recordid\": opts.recordId,\\n      \"isShowBar\": opts.isShowBar,\\n      \"upid\": opts.upId,\\n      \"viewerid\": opts.viewerId,\\n      \"roomid\": opts.roomId,\\n      \"ua\": \"1\"\\n    };\\n    var params = {\\n      allowFullscreen: \"true\",\\n      allowScriptAccess: \"always\",\\n      wmode: \"transparent\"\\n    };\\n\\n    this.flashPlayerInit = function () {\\n      swfobject.embedSWF(swfUrl, opts.callbackPlayer.id, opts.callbackPlayer.width, opts.callbackPlayer.height, \"10.0.0\", \"/flash/expressInstall.swf\", flashvars, params);\\n\\n      if (MobileLive.isMobile() != \"isMobile\") {\\n        var report = new ReportLog(opts, 0, 1, null, false);\\n      }\\n    };\\n\\n    if (!DW.isH5play) {\\n      this.flashPlayerInit();\\n    }\\n\\n    this.getFlash = function () {\\n      return swfobject.getObjectById(this.id);\\n    };\\n\\n    this.playbackRate = function (t) {\\n      if (!DW.isH5play && MobileLive.isMobile() !== \"isMobile\") {\\n        return;\\n      }\\n\\n      var t = parseFloat(t);\\n      this.getH5player().playbackRate = t;\\n    };\\n\\n    this.seek = function (t) {\\n      if (t < 0) {\\n        return;\\n      }\\n\\n      if (DW.isH5play || MobileLive.isMobile() == \"isMobile\") {\\n        this.getH5player().currentTime = t;\\n      } else {\\n        var swf = this.getFlash();\\n\\n        if (!swf) {\\n          return;\\n        }\\n\\n        swf.seek(t);\\n      }\\n    };\\n\\n    this.getFlash = function () {\\n      return swfobject.getObjectById(this.id);\\n    };\\n\\n    this.getH5player = function () {\\n      return $(\"#playbackVideo\")[0];\\n    };\\n\\n    this.getPlayerTime = function () {\\n      if (!this.isReady) {\\n        return 0;\\n      }\\n\\n      var t;\\n\\n      if (DW.isH5play || MobileLive.isMobile() == \"isMobile\") {\\n        t = this.getH5player().currentTime;\\n      } else {\\n        t = parseInt(this.getFlash().getPosition(), 10);\\n      }\\n\\n      if (isNaN(t) || t < 0) {\\n        return 0;\\n      }\\n\\n      return t;\\n    };\\n\\n    this.getDuration = function () {\\n      if (DW.isH5play || MobileLive.isMobile() == \"isMobile\") {\\n        return this.getH5player().duration;\\n      } else {\\n        var swf = this.getFlash();\\n\\n        if (!swf) {\\n          return;\\n        }\\n\\n        return swf.getDuration();\\n      }\\n    };\\n\\n    this.getBuffer = function () {\\n      if (DW.isH5play || MobileLive.isMobile() == \"isMobile\") {\\n        if (!this.getH5player() || !this.getH5player().buffered || !this.getH5player().buffered.end(0)) {\\n          return 0;\\n        }\\n\\n        return this.getH5player().buffered.end(0);\\n      } else {\\n        var swf = this.getFlash();\\n\\n        if (!swf) {\\n          return;\\n        }\\n\\n        return swf.getBufferLength();\\n      }\\n    };\\n\\n    this.setVolume = function (n) {\\n      if (DW.isH5play || MobileLive.isMobile() == \"isMobile\") {\\n        this.getH5player().volume = parseFloat(n);\\n      } else {\\n        var swf = this.getFlash();\\n\\n        if (!swf) {\\n          return;\\n        }\\n\\n        return swf.setVolume(n);\\n      }\\n    };\\n\\n    this.getVolume = function () {\\n      if (DW.isH5play || MobileLive.isMobile() == \"isMobile\") {\\n        return this.getH5player().volume;\\n      } else {\\n        var swf = this.getFlash();\\n\\n        if (!swf) {\\n          return;\\n        }\\n\\n        return swf.getVolume();\\n      }\\n    };\\n\\n    this.play = function () {\\n      if (DW.isH5play || MobileLive.isMobile() == \"isMobile\") {\\n        if (MobileLive.pauseState) {\\n          this.getH5player().play();\\n        } else {\\n          this.getH5player().pause();\\n        }\\n      } else {\\n        var swf = this.getFlash();\\n\\n        if (!swf) {\\n          return;\\n        }\\n\\n        return swf.isPlay();\\n      }\\n    };\\n\\n    this.setZScale = function (s) {\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      return swf.setZScale(s);\\n    };\\n\\n    this.getZScale = function () {\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      return swf.getZScale();\\n    };\\n\\n    this.setScale = function (s) {\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      return swf.setScale(s);\\n    };\\n\\n    this.getScale = function () {\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      return swf.getScale();\\n    };\\n\\n    this.openSettingPanel = function () {\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      return swf.openSettingPanel();\\n    };\\n  };\\n\\n  var Socket = function Socket(opts) {\\n    var isHttps = window.location.protocol === \"https:\";\\n    var host = opts.chat.host;\\n\\n    if (isHttps && host && host.indexOf(\":\")) {\\n      var s = host.split(\":\");\\n\\n      if (s.length == 2) {\\n        var port = parseInt(s[1]);\\n\\n        if (!isNaN(port)) {\\n          var httpsPort = port + 400;\\n          host = s[0] + \":\" + httpsPort;\\n        }\\n      }\\n    }\\n\\n    var terminal = 0;\\n\\n    if (MobileLive.isMobile() == \"isMobile\") {\\n      terminal = 1;\\n    }\\n\\n    if (!DW.forceNew) {\\n      var socket = io.connect(document.location.protocol + \"//\" + host + \"/replay\", {\\n        query: {\\n          roomid: opts.roomId,\\n          sessionid: opts.viewer.sessionId,\\n          platform: 1,\\n          terminal: terminal\\n        }\\n      });\\n      util.log(\"{forceNew: false}\");\\n    } else {\\n      var socket = io.connect(document.location.protocol + \"//\" + host + \"/replay?roomid=\" + opts.roomId + \"&sessionid=\" + opts.viewer.sessionId + \"&platform=\" + 1 + \"&terminal=\" + terminal, {\\n        forceNew: true\\n      });\\n      util.log(\"{forceNew: true}\");\\n    }\\n  };\\n\\n  var DrawPanel = function DrawPanel(opts, callbackPlayer) {\\n    this.isReady = false;\\n    var swfUrl = \"//zeus.csslcloud.net/flash/Player.swf\";\\n    var flashvars = {\\n      \"type\": \"drawpanel\"\\n    };\\n    var params = {\\n      allowFullscreen: \"true\",\\n      allowScriptAccess: \"always\",\\n      wmode: \"transparent\"\\n    };\\n    var attributes = {};\\n\\n    if (!DWDpc.fastMode) {\\n      swfobject.embedSWF(swfUrl, opts.drawPanel.id, opts.drawPanel.width, opts.drawPanel.height, \"10.0.0\", \"/flash/expressInstall.swf\", flashvars, params, attributes);\\n    }\\n\\n    this.getFlash = function () {\\n      if (!this.isReady) {\\n        return;\\n      }\\n\\n      return swfobject.getObjectById(opts.drawPanel.id);\\n    };\\n\\n    this.clear = function () {\\n      DWDpc.clear();\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      swf.clear();\\n    }; // 画图\\n\\n\\n    this.draw = function (j) {\\n      DWDpc.draw(j);\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      swf.draw(j);\\n    };\\n\\n    this.draws = function (js) {\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      (function (jstr) {\\n        setTimeout(function () {\\n          swf.drawList(jstr);\\n        });\\n      })(js);\\n    }; // 翻页\\n\\n\\n    this.filp = function (j) {\\n      DWDpc.pageChange(j);\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      var jj = JSON.parse(j);\\n      var u = jj.url;\\n      var isHttps = window.location.protocol === \"https:\";\\n\\n      if (isHttps) {\\n        jj.url = u.replace(/http:/g, \"https:\");\\n      }\\n\\n      if (options.adapt) {\\n        swf.filp(JSON.stringify(jj), \"auto\");\\n      } else {\\n        swf.filp(JSON.stringify(jj));\\n      }\\n    }; // 动画\\n\\n\\n    this.animation = function (j) {\\n      DWDpc.animationChange(j);\\n      var swf = this.getFlash();\\n\\n      if (!swf) {\\n        return;\\n      }\\n\\n      swf.animation(j);\\n    };\\n\\n    this.intervalNum = 0; // 循环更新翻页和画板信息\\n\\n    this.interval = function () {\\n      var ft = 0;\\n\\n      try {\\n        ft = callback.callbackPlayer.getPlayerTime();\\n      } catch (e) {}\\n\\n      if (ft < 0) {\\n        return;\\n      }\\n\\n      if (isCustomSeek) {\\n        nextTime = ft;\\n\\n        if (Math.abs(nextTime - beforeTime) >= 2.5) {\\n          seekComplete && seekComplete();\\n        }\\n\\n        beforeTime = ft;\\n      }\\n\\n      if (callback.isRequestDraws) {\\n        callback.drawsInfoRequestPool.isHttpRequestCurrentDraws(ft, function (data) {\\n          callback.draws = data;\\n        });\\n      }\\n\\n      try {\\n        if (callback.animations && callback.animations.length > 0) {\\n          if (callback.animationIndex < callback.animations.length) {\\n            var pidex = callback.pageChangeIndex;\\n\\n            if (pidex >= 0) {\\n              var pc = callback.pageChanges[pidex];\\n              var a = callback.animations[callback.animationIndex + 1];\\n\\n              if (!!pc && !!a && pc.encryptDocId == a.encryptDocId && ft >= a.time && pc.time <= a.time) {\\n                if (DWDpc.fastMode) {\\n                  this.animation(a);\\n                } else {\\n                  this.animation(JSON.stringify({\\n                    \"fileName\": a.docName,\\n                    \"totalPage\": a.docTotalPage,\\n                    \"docid\": a.encryptDocId,\\n                    \"url\": a.url,\\n                    \"page\": a.pageNum,\\n                    \"step\": a.step\\n                  }));\\n                }\\n\\n                callback.animationIndex = callback.animationIndex + 1;\\n              }\\n            }\\n          }\\n        }\\n      } catch (e) {}\\n\\n      try {\\n        if (callback.pageChanges && callback.pageChanges.length > 0) {\\n          if (callback.pageChangeIndex < callback.pageChanges.length) {\\n            var pc = callback.pageChanges[callback.pageChangeIndex + 1];\\n\\n            if (ft >= pc.time) {\\n              if (typeof window.on_cc_callback_page_change === \"function\") {\\n                window.on_cc_callback_page_change(pc);\\n              }\\n\\n              if (typeof window.on_cc_request_snapshoot === \"function\") {\\n                window.on_cc_request_snapshoot(pc);\\n              }\\n\\n              if (DWDpc.fastMode) {\\n                this.filp(pc);\\n              } else {\\n                this.filp(JSON.stringify({\\n                  \"fileName\": pc.docName,\\n                  \"totalPage\": pc.docTotalPage,\\n                  \"docid\": pc.encryptDocId,\\n                  \"url\": pc.url,\\n                  \"page\": pc.pageNum,\\n                  \"useSDK\": pc.useSDK\\n                }));\\n              }\\n\\n              callback.pageChangeIndex = callback.pageChangeIndex + 1; //翻页信息回掉\\n\\n              var obj = {};\\n              obj.docId = pc.docId;\\n              obj.docName = pc.docName;\\n              obj.docTotalPage = pc.docTotalPage;\\n              obj.pageNum = pc.pageNum;\\n\\n              if (typeof window.on_cc_callback_pagechange === \"function\") {\\n                window.on_cc_callback_pagechange(obj);\\n              }\\n            }\\n          }\\n        }\\n      } catch (e) {}\\n\\n      try {\\n        if (callback.animations && callback.animations.length > 0) {\\n          if (callback.animationIndex < callback.animations.length) {\\n            var pidex = callback.pageChangeIndex;\\n\\n            if (pidex >= 0) {\\n              var pc = callback.pageChanges[pidex];\\n              var a = callback.animations[callback.animationIndex + 1];\\n\\n              if (!!pc && !!a && pc.encryptDocId == a.encryptDocId && ft >= a.time && pc.time <= a.time) {\\n                if (DWDpc.fastMode) {\\n                  this.animation(a);\\n                } else {\\n                  this.animation(JSON.stringify({\\n                    \"fileName\": a.docName,\\n                    \"totalPage\": a.docTotalPage,\\n                    \"docid\": a.encryptDocId,\\n                    \"url\": a.url,\\n                    \"page\": a.pageNum,\\n                    \"step\": a.step\\n                  }));\\n                }\\n\\n                callback.animationIndex = callback.animationIndex + 1;\\n              }\\n            }\\n          }\\n        }\\n      } catch (e) {}\\n\\n      try {\\n        if (callback.draws && callback.draws.length > 0) {\\n          // 画图逻辑\\n          if (callback.drawIndex < callback.draws.length) {\\n            var dc = callback.draws[callback.drawIndex + 1];\\n\\n            while (ft >= dc.time) {\\n              if (DWDpc.fastMode) {\\n                this.draw(dc);\\n              } else {\\n                this.draw(dc.data);\\n              }\\n\\n              callback.drawIndex = callback.drawIndex + 1;\\n              dc = callback.draws[callback.drawIndex + 1];\\n            }\\n          }\\n        }\\n      } catch (e) {}\\n    };\\n\\n    this.intervalPainting = function (callback) {\\n      callback.drawPanel.intervalNum = setInterval(function () {\\n        callback.drawPanel.interval(callback);\\n      }, 1000);\\n    };\\n  }; //优化meta数据\\n\\n\\n  var substepRequest = function substepRequest(opts) {\\n    $.ajax({\\n      url: opts.url,\\n      type: \"GET\",\\n      data: opts.data,\\n      tryCount: 0,\\n      retryLimit: 3,\\n      timeout: 5000,\\n      dataType: \"jsonp\",\\n      success: function success(data) {\\n        opts.done(data);\\n      },\\n      error: function error(xhr, textStatus, errorThrown) {\\n        if (textStatus == \"timeout\") {\\n          this.tryCount++;\\n\\n          if (this.tryCount < this.retryLimit) {\\n            //try again\\n            $.ajax(this);\\n            return;\\n          } else {\\n            if (typeof opts.fn === \"function\") {\\n              opts.fn(textStatus);\\n            }\\n\\n            return;\\n          }\\n\\n          return;\\n        }\\n\\n        if (xhr.status == 500) {//handle error\\n        } else {//handle error\\n          }\\n      }\\n    });\\n  };\\n\\n  var substepRequestHistoryData = function substepRequestHistoryData(opts, fn) {\\n    var param = {\\n      roomid: opts.roomId,\\n      userid: opts.userId,\\n      liveid: opts.liveId,\\n      upid: opts.upId,\\n      groupid: opts.groupId,\\n      recordid: opts.recordId,\\n      viewertoken: opts.viewertoken,\\n      viewername: opts.viewername,\\n      forcibly: opts.forcibly\\n    };\\n    var sub = {\\n      globalData: {},\\n      requestLoginData: false,\\n      requestInfoData: false,\\n      requestDrawData: false,\\n      requestChatqaData: false,\\n      allRequests: 0\\n    }; // 登录\\n\\n    substepRequest({\\n      url: \"//view.csslcloud.net/api/room/replay/login\",\\n      data: param,\\n      fn: window.on_cc_login_error,\\n      done: function done(data) {\\n        if (!checkout(data, window.on_cc_login_error)) {\\n          return false;\\n        }\\n\\n        if (data.success) {\\n          options.drawRequestTime = parseInt(data.datas.drawRequestTime) || 1;\\n          window.TIMEOUT = window.TIMEOUT + options.drawRequestTime * 1000; // options.drawRequestTime = (parseInt(data.datas.drawRequestTime) || 1) * 2;\\n          // options.drawRequestTime = 25;\\n\\n          if (!DWDpc.fastMode) {\\n            options.drawRequestTime = \"\";\\n          }\\n\\n          util.log(\"options\", options);\\n          callback.state = new StateMachine();\\n          var snapshoot = new StateMachine();\\n          callback.drawsInfoRequestPool = new DrawsInfoRequestPool(callback.state, snapshoot);\\n        }\\n\\n        concatMeta(sub.globalData, data);\\n        sub.requestLoginData = true;\\n        sub.requestInfoData = false;\\n        sub.requestDrawData = false;\\n        sub.requestChatqaData = false;\\n        sub.allRequests++;\\n        success(sub); //登录成功\\n\\n        if (typeof window.on_cc_login_success === \"function\") {\\n          var logInfo = data.datas;\\n          var tmp = {\\n            \"type\": logInfo.template.type,\\n            \"desc\": logInfo.template.desc,\\n            \"name\": logInfo.template.name\\n          };\\n          var viewer = {\\n            \"name\": logInfo.viewer.name,\\n            \"id\": logInfo.viewer.id,\\n            \"groupId\": logInfo.viewer.groupId\\n          };\\n          window.on_cc_login_success({\\n            \"template\": tmp,\\n            \"viewer\": viewer\\n          });\\n        }\\n\\n        if (!options.drawRequestTime) {\\n          // 请求画笔数据\\n          substepRequest({\\n            url: \"//view.csslcloud.net/api/view/replay/draw/info\",\\n            data: param,\\n            fn: window.on_cc_request_draw_error,\\n            done: function done(data) {\\n              if (!checkout(data)) {\\n                return false;\\n              }\\n\\n              concatMeta(sub.globalData, data);\\n              sub.requestLoginData = false;\\n              sub.requestInfoData = false;\\n              sub.requestDrawData = true;\\n              sub.requestChatqaData = false;\\n              sub.allRequests++;\\n              success(sub);\\n            }\\n          });\\n        } // 请求聊天和问答数据\\n\\n\\n        substepRequest({\\n          url: \"//view.csslcloud.net/api/view/replay/v2/chatqa/info\",\\n          data: param,\\n          fn: window.on_cc_request_chatqa_error,\\n          done: function done(data) {\\n            if (!checkout(data, window.on_cc_request_chatqa_error)) {\\n              return false;\\n            }\\n\\n            concatMeta(sub.globalData, data);\\n            sub.requestLoginData = false;\\n            sub.requestInfoData = false;\\n            sub.requestDrawData = false;\\n            sub.requestChatqaData = true;\\n            sub.allRequests++;\\n            success(sub);\\n          }\\n        }); // 广播，翻页，animation及后续新增数据\\n\\n        substepRequest({\\n          url: \"//view.csslcloud.net/api/view/replay/v2/info\",\\n          data: param,\\n          fn: window.on_cc_request_info_error,\\n          done: function done(data) {\\n            if (!checkout(data, window.on_cc_request_info_error)) {\\n              return false;\\n            }\\n\\n            concatMeta(sub.globalData, data);\\n            sub.requestLoginData = false;\\n            sub.requestInfoData = true;\\n            sub.requestDrawData = false;\\n            sub.requestChatqaData = false;\\n            sub.allRequests++;\\n            success(sub);\\n          }\\n        });\\n      }\\n    });\\n\\n    var checkout = function checkout(data, fn) {\\n      if (!data.success) {\\n        if (typeof fn === \"function\") {\\n          fn(data);\\n        }\\n\\n        return false;\\n      }\\n\\n      if (!data.datas) {\\n        return false;\\n      }\\n\\n      return true;\\n    };\\n\\n    var concatMeta = function concatMeta(d1, d2) {\\n      extend(d1, d2);\\n\\n      if (!d1.datas.meta) {\\n        d1.datas.meta = {};\\n      }\\n\\n      extend(d1.datas.meta, d2.datas.meta);\\n    };\\n\\n    var extend = function extend(o, n) {\\n      for (var p in n) {\\n        if (n.hasOwnProperty(p) && !o.hasOwnProperty(p)) o[p] = n[p];\\n      }\\n    };\\n\\n    var success = function success(sub) {\\n      fn(sub);\\n    };\\n  }; //优化meta数据 画笔数据--------------------\\n  //状态机\\n\\n\\n  var StateMachine = function StateMachine() {\\n    this.requestState = false;\\n    this.result = 0;\\n    this.startTime = 0;\\n    this.endTime = 0;\\n    this.key = 0; //key 为每一个状态机块的索引， id 或 index。\\n\\n    this.index = 0; //自动排列 key\\n\\n    this.ajax = {};\\n    this.states = [];\\n    this.snapshoot = [];\\n    this.drawsAlready = 0;\\n    this.roomId = options.roomId;\\n    this.userId = options.userId;\\n    this.recordId = options.recordId;\\n    this.liveId = options.liveId;\\n    this.drawRequestTime = options.drawRequestTime;\\n\\n    this.setSnapshoot = function (docId, data) {\\n      this.snapshoot[docId] = data;\\n    };\\n\\n    this.getSnapshoot = function () {\\n      return this.snapshoot;\\n    }; //初始化状态机\\n\\n\\n    this.init = function (options) {\\n      //分时间块，状态机记录\\n      for (var i = 0; i < this.drawRequestTime; i++) {\\n        var s = {\\n          requestState: false,\\n          result: 0,\\n          startTime: options.startTime,\\n          endTime: options.endTime,\\n          key: i\\n        };\\n        options.startTime = options.startTime + options.blockTime;\\n        options.endTime = options.startTime + options.blockTime;\\n        this.setState(s);\\n      }\\n    };\\n\\n    this.httpRequest = function (options, callback) {\\n      var self = this;\\n      self.requestState = true;\\n      this.ajax = $.ajax({\\n        url: options.url,\\n        type: \"GET\",\\n        data: options.param,\\n        tryCount: 0,\\n        retryLimit: 3,\\n        timeout: window.TIMEOUT,\\n        //20秒超时\\n        dataType: \"jsonp\",\\n        success: function success(data) {\\n          self.result = data;\\n\\n          if (!data.success) {\\n            util.log(\"data.success\", data.success);\\n            return;\\n          }\\n\\n          callback(data);\\n          self.requestState = false;\\n        },\\n        error: function error(xhr, textStatus, errorThrown) {\\n          if (textStatus == \"timeout\") {\\n            this.tryCount++;\\n\\n            if (this.tryCount < this.retryLimit) {\\n              //try again\\n              $.ajax(this);\\n              util.log(\"ajax[\" + self.key + \"] try again tryCount\", this.tryCount);\\n              return;\\n            } else {\\n              util.log(\"数据请求失败且重试多次\");\\n              self.requestState = false;\\n              return;\\n            }\\n\\n            return;\\n          }\\n\\n          if (xhr.status == 500) {//handle error\\n          } else {//handle error\\n            }\\n        }\\n      });\\n    };\\n\\n    this.abort = function () {\\n      //模拟中断http请求\\n      this.ajax.abort();\\n      this.requestState = false;\\n    };\\n\\n    this.setState = function (options) {\\n      if (_typeof(options) !== \"object\") {\\n        return;\\n      } //key 为每一个状态机块的索引， id 或 index。\\n\\n\\n      var key = options.key || this.index++;\\n\\n      if (options.key && !isNaN(options.key)) {\\n        this.index = parseInt(options.key) + 1;\\n      }\\n\\n      var state = new StateMachine();\\n      state.requestState = options.requestState || this.requestState;\\n      state.result = options.result || this.result;\\n      state.startTime = options.startTime || this.startTime;\\n      state.endTime = options.endTime || this.endTime;\\n      state.ajax = options.ajax || this.ajax;\\n      state.snapshoot = options.snapshoot || this.snapshoot;\\n      state.key = key;\\n      this.states[key] = state;\\n    };\\n\\n    this.getState = function (key) {\\n      return this.states[key];\\n    };\\n\\n    this.getStates = function () {\\n      return this.states;\\n    };\\n\\n    this.getCurrentStateIndex = function (currentTime) {\\n      var index = 0;\\n\\n      for (var i = 0; i < this.states.length; i++) {\\n        if (currentTime > this.states[i].startTime && currentTime <= this.states[i].endTime) {\\n          index = i;\\n          break;\\n        }\\n      }\\n\\n      return index;\\n    };\\n\\n    this.isDrawsAlready = function () {\\n      return parseInt(this.drawRequestTime, 10) === parseInt(this.drawsAlready, 10);\\n    };\\n  }; //画笔信息请求池管理\\n\\n\\n  var DrawsInfoRequestPool = function DrawsInfoRequestPool(state, snapshoot) {\\n    this.state = state;\\n    this.requestNumber = 2;\\n    this.httpRequestPool = [];\\n    this.draws = [];\\n    this.preState = {};\\n\\n    this.isHttpRequestCurrentDraws = function (currentTime, fn) {\\n      if (!state.drawRequestTime) {\\n        return;\\n      }\\n\\n      var drawsAlready = state.isDrawsAlready();\\n\\n      if (drawsAlready) {\\n        util.log(\"画笔数据加载完毕，不在预加载某一段数据\");\\n        return;\\n      }\\n\\n      var states = state.getStates();\\n      var index = state.getCurrentStateIndex(currentTime);\\n      var _state = states[index];\\n\\n      if (this.preState != _state && this.preState.requestState) {\\n        util.log(\"发现新的预加载请求，中断上一个预加载请求;index=\" + this.preState.key);\\n        this.preState.abort();\\n      }\\n\\n      this.preState = _state; //请求数据\\n\\n      if (!drawsAlready && !_state.result && !_state.requestState) {\\n        util.log(\"预加载数据\", index);\\n        var options = {\\n          index: index,\\n          states: states\\n        };\\n        this.httpRequestCurrentDraws(options, fn);\\n      } else {\\n        util.log(\"预加载过这段数据或已有数据;index=\" + index);\\n      }\\n    };\\n\\n    this.httpRequestCurrentDraws = function (options, fn) {\\n      var self = this;\\n      var states = options.states;\\n      var index = options.index;\\n      var _state = states[index];\\n      var param = {\\n        url: \"//view.csslcloud.net/api/view/replay/v2/draw/range\",\\n        param: {\\n          starttime: _state.startTime,\\n          endtime: _state.endTime,\\n          userid: _state.userId,\\n          recordid: _state.recordId,\\n          liveid: _state.liveId\\n        }\\n      };\\n\\n      _state.httpRequest(param, function (data) {\\n        var draw = data.datas.meta.draw;\\n        util.log(\"*** 预加载成功 callback.draws[\" + index + \"] ***\", draw);\\n        self.draws = distinct(self.draws, draw);\\n        self.draws.sort(function (p1, p2) {\\n          return parseInt(p1.time) - parseInt(p2.time);\\n        });\\n        fn(self.draws);\\n        callback.state.drawsAlready++;\\n      });\\n    };\\n\\n    this.httpRequestStream = function (fn) {\\n      var self = this;\\n      var drawsAlready = self.state.isDrawsAlready();\\n\\n      if (drawsAlready) {\\n        util.log(\"httpRequestStream draws already\", self.draws);\\n        util.log(\"callback.state\", callback.state);\\n        util.log(\"snapshoot\", snapshoot);\\n        return;\\n      }\\n\\n      var states = self.state.getStates(); //获取符合条件的请求\\n\\n      for (var i = 0; i < states.length; i++) {\\n        var state = states[i];\\n\\n        if (!state.result && !state.requestState) {\\n          if (self.httpRequestPool.length < self.requestNumber) {\\n            self.httpRequestPool.push(state);\\n          } else {\\n            break;\\n          }\\n        }\\n      } //处理请求池，发起请求\\n\\n\\n      for (var j = 0; j < self.httpRequestPool.length; j++) {\\n        var state = self.httpRequestPool[j];\\n\\n        if (!state.result && !state.requestState) {\\n          (function (state) {\\n            var options = {\\n              url: \"//view.csslcloud.net/api/view/replay/v2/draw/range\",\\n              param: {\\n                starttime: state.startTime,\\n                endtime: state.endTime,\\n                userid: state.userId,\\n                recordid: state.recordId,\\n                liveid: state.liveId\\n              }\\n            };\\n            state.httpRequest(options, function (data) {\\n              var draw = data.datas.meta.draw;\\n              util.log(\"请求流 draw[\" + state.key + \"]\", draw); //合并分段请求返回的画笔数据\\n\\n              if (callback.isRequestDraws) {\\n                self.draws = distinct(self.draws, draw);\\n              } else {\\n                self.draws = self.draws.concat(draw);\\n              } //排序\\n\\n\\n              self.draws.sort(function (p1, p2) {\\n                return parseInt(p1.time) - parseInt(p2.time);\\n              }); //回调画笔数据\\n\\n              fn(self.draws); //请求池管理，删除已完成的请求\\n\\n              for (var k = 0; k < self.httpRequestPool.length; k++) {\\n                if (self.httpRequestPool[k].key == state.key) {\\n                  self.httpRequestPool.splice(k, 1);\\n                  break;\\n                }\\n              } //继续监测请求池中符合请求条件的请求，发起请求\\n\\n\\n              callback.state.drawsAlready++;\\n              self.httpRequestStream(fn);\\n            });\\n          })(state);\\n        }\\n      }\\n    };\\n\\n    this.httpRequestSnapshoot = function (e, currentTime, fn) {\\n      var self = this;\\n      var drawsAlready = state.isDrawsAlready();\\n\\n      if (drawsAlready) {\\n        util.log(\"画笔数据请求完整，不在请求快照数据\");\\n        return;\\n      }\\n\\n      var states = state.getStates();\\n      var currentTime = currentTime;\\n      var index = state.getCurrentStateIndex(currentTime);\\n      var _state = states[index];\\n\\n      if (!_state) {\\n        return;\\n      }\\n\\n      var _snapshoot = snapshoot.getSnapshoot();\\n\\n      var _isSnapshoot = _snapshoot[e.docId + \"_\" + e.pageNum + \"_\" + e.url]; //请求快照\\n\\n      if (!_state.result && !_isSnapshoot) {\\n        //当前时间段是否有数据 && 当前页是否存在快照\\n        util.log(\"_snapshoot.getSnapshoot()\", _snapshoot); //中断没有请求完的快照，快照只能存在一个请求\\n\\n        if (snapshoot.requestState) {\\n          snapshoot.abort();\\n        }\\n\\n        var options = {\\n          url: \"//view.csslcloud.net/api/view/replay/v2/draw/snapshot\",\\n          param: {\\n            docid: e.docId,\\n            currentpage: e.pageNum,\\n            userid: snapshoot.userId,\\n            recordid: snapshoot.recordId\\n          }\\n        };\\n        snapshoot.httpRequest(options, function (data) {\\n          //缓存快照数据\\n          snapshoot.setSnapshoot(e.docId + \"_\" + e.pageNum + \"_\" + e.url, data);\\n\\n          if (!_state.result) {\\n            callback.isRequestDraws = true;\\n            var draw = data.datas.meta.draw;\\n            util.log(\"*** 快照 callback.draws[\" + e.docId + \"_\" + e.pageNum + \"_\" + e.url + \"] ***\", draw);\\n            self.draws = distinct(self.draws, draw);\\n            self.draws.sort(function (p1, p2) {\\n              return parseInt(p1.time) - parseInt(p2.time);\\n            });\\n            fn(self.draws);\\n          } else {\\n            util.log(\"快照请求成功，当前时间段数据存在，丢弃快照\" + index + \"\");\\n          }\\n        });\\n      } else {\\n        util.log(\"当前时间段存在数据或存在快照\", index + \"\");\\n      }\\n    };\\n\\n    function distinct(a, b) {\\n      // 数组去重\\n      var arr = a.concat(b);\\n      var result = [];\\n      var obj = {};\\n\\n      for (var i in arr) {\\n        if (!obj[JSON.stringify(arr[i])]) {\\n          result.push(arr[i]);\\n          obj[JSON.stringify(arr[i])] = 1;\\n        }\\n      }\\n\\n      return result;\\n    }\\n\\n    function unique(oldDraws, newDraws) {\\n      //分段数据与快照合并\\n      var _oldDraws = oldDraws;\\n      var _newDraws = newDraws;\\n      var draws = [];\\n\\n      for (var i = 0; i < _newDraws.length; i++) {\\n        var newDraw = _newDraws[i];\\n\\n        for (var j = 0; j < _oldDraws.length; j++) {\\n          var oldDraw = _oldDraws[j];\\n\\n          if (isObjectValueEqual(oldDraw, newDraw)) {\\n            _oldDraws.splice(j, 1);\\n\\n            break;\\n          }\\n        }\\n      }\\n\\n      draws = _oldDraws.concat(_newDraws);\\n      return draws;\\n    }\\n\\n    function isObjectValueEqual(a, b) {\\n      // Of course, we can do it use for in\\n      // Create arrays of property names\\n      var aProps = Object.getOwnPropertyNames(a);\\n      var bProps = Object.getOwnPropertyNames(b); // If number of properties is different,\\n      // objects are not equivalent\\n\\n      if (aProps.length != bProps.length) {\\n        return false;\\n      }\\n\\n      for (var i = 0; i < aProps.length; i++) {\\n        var propName = aProps[i]; // If values of same property are not equal,\\n        // objects are not equivalent\\n\\n        if (a[propName] !== b[propName]) {\\n          return false;\\n        }\\n      } // If we made it this far, objects\\n      // are considered equivalent\\n\\n\\n      return true;\\n    }\\n  }; //防止获取不到duration\\n\\n\\n  window.ListenerDuration = function () {\\n    if (!on_cc_limit_request_draws) {\\n      return;\\n    }\\n\\n    var t = setInterval(function () {\\n      var duration = parseInt(callback.callbackPlayer.getDuration());\\n\\n      if (duration) {\\n        util.log(\"ListenerDuration\");\\n        on_cc_limit_request_draws && on_cc_limit_request_draws();\\n        clearInterval(t);\\n      }\\n    }, 50);\\n    window.ListenerDuration = null;\\n  };\\n\\n  window.on_cc_limit_request_draws = function () {\\n    if (!options.drawRequestTime) {\\n      return;\\n    }\\n\\n    util.log(\"分页请求画笔数据\", options.drawRequestTime);\\n    var duration = callback.callbackPlayer.getDuration() + 1;\\n    util.log(\"duration\", duration + \"\"); //请求数据左包含，右不包含，duration+1秒，防止最后一秒数据无法请求到。\\n\\n    var blockTime = Math.ceil(duration / options.drawRequestTime);\\n    var startTime = 0;\\n    var endTime = startTime + blockTime;\\n    var blockDuration = {\\n      blockTime: blockTime,\\n      startTime: startTime,\\n      endTime: endTime\\n    };\\n    callback.state.init(blockDuration);\\n    util.log(\"callback.state\", callback.state);\\n    callback.drawsInfoRequestPool.httpRequestStream(function (data) {\\n      callback.draws = data;\\n      callback.isHistoryReady = true;\\n      callback.drawPanel.isReady = true;\\n    });\\n    setTimeout(function () {\\n      initDrawPanelInfo();\\n    }, 1500);\\n    window.on_cc_limit_request_draws = null;\\n  };\\n\\n  window.on_cc_request_snapshoot = function (pageChange) {\\n    if (!options.drawRequestTime) {\\n      return;\\n    }\\n\\n    util.log(\"pageChange\", pageChange);\\n    var currentTime = callback.callbackPlayer.getPlayerTime();\\n    callback.drawsInfoRequestPool.httpRequestSnapshoot(pageChange, currentTime, function (data) {\\n      callback.draws = data;\\n      callback.isHistoryReady = true;\\n      callback.drawPanel.isReady = true;\\n    });\\n  }; // 历史数据\\n\\n\\n  var History = function History(opts, callback) {\\n    substepRequestHistoryData(opts, success); //canplay\\n\\n    var onCCH5PlayerLoad = false;\\n\\n    function success(sub) {\\n      var data = sub.globalData;\\n\\n      if (sub.requestLoginData) {\\n        if (DWDpc.fastMode) {\\n          $(\"#documentDisplayMode\").val(data.datas.room.documentDisplayMode);\\n          DWDpc.appendDrawPanel();\\n          DWDpc.init();\\n        }\\n\\n        opts.chat = {\\n          host: data.datas.pusherNode.primary\\n        };\\n        opts.viewer.sessionId = data.datas.sessionId;\\n        opts.liveId = data.datas.encryptLiveId;\\n        opts.upId = data.datas.upId;\\n        opts.viewerId = data.datas.viewer.id;\\n        callback.socket = new Socket(opts);\\n        $.DW.groupId = data.datas.viewer.groupId;\\n\\n        if (typeof window.on_cc_callback_player === \"function\") {\\n          window.on_cc_callback_player(data.datas);\\n        } //encryptRecordId\\n\\n\\n        if (!opts.recordId) {\\n          opts.recordId = data.datas.encryptRecordId;\\n        }\\n\\n        if (DW.isH5play) {\\n          MobileLive.init(opts);\\n        } else if (MobileLive.isMobile() == \"isMobile\") {\\n          MobileLive.init(opts);\\n        }\\n      }\\n\\n      var datas = data.datas;\\n      var meta = datas.meta;\\n\\n      if (!meta) {\\n        return;\\n      }\\n\\n      if (sub.requestInfoData) {\\n        var pages = meta.pageChange;\\n\\n        if (pages) {\\n          for (var i = 0; i < pages.length; i++) {\\n            var imgUrl = pages[i].url;\\n            var isHttps = window.location.protocol === \"https:\";\\n\\n            if (imgUrl.indexOf(\"//\") > 0 && isHttps) {\\n              imgUrl = imgUrl.replace(\"http:\", \"https:\");\\n              pages[i].url = imgUrl;\\n            }\\n          }\\n\\n          if (typeof window.on_cc_callback_pages === \"function\") {\\n            window.on_cc_callback_pages(pages);\\n          }\\n        }\\n\\n        var pageChanges = meta.pageChange;\\n\\n        if (pageChanges && pageChanges.length) {\\n          pageChanges.sort(function (p1, p2) {\\n            return parseInt(p1.time) - parseInt(p2.time);\\n          });\\n          callback.pageChanges = pageChanges;\\n        }\\n\\n        var animations = meta.animation;\\n\\n        if (animations && animations.length) {\\n          animations.sort(function (p1, p2) {\\n            return parseInt(p1.time) - parseInt(p2.time);\\n          });\\n          callback.animations = animations;\\n        } //广播\\n\\n\\n        var broadcasts = meta.broadcast;\\n        window.chatLogs = meta.broadcast;\\n\\n        if (broadcasts && broadcasts.length) {\\n          broadcasts.sort(function (p1, p2) {\\n            return parseInt(p1.time) - parseInt(p2.time);\\n          });\\n\\n          for (var i = 0; i < broadcasts.length; i++) {\\n            var broadcast = broadcasts[i];\\n\\n            if (typeof window.on_cc_live_broadcast_msg == \"function\") {\\n              window.on_cc_live_broadcast_msg({\\n                content: broadcast.content,\\n                time: broadcast.time\\n              });\\n            }\\n          }\\n\\n          callback.broadcasts = broadcasts;\\n        }\\n      }\\n\\n      if (sub.requestChatqaData) {\\n        var questions = meta.question;\\n\\n        if (questions && questions.length) {\\n          questions.sort(function (p1, p2) {\\n            return parseInt(p1.time) - parseInt(p2.time);\\n          });\\n          callback.questions = questions;\\n\\n          for (var i = 0; i < callback.questions.length; i++) {\\n            var question = questions[i];\\n\\n            if (typeof window.on_cc_live_qa_question === \"function\") {\\n              window.on_cc_live_qa_question({\\n                \"action\": \"question\",\\n                \"value\": {\\n                  \"id\": question.encryptId,\\n                  \"content\": question.content,\\n                  \"groupId\": question.groupId,\\n                  \"userId\": question.questionUserId,\\n                  \"userName\": question.questionUserName,\\n                  \"userAvatar\": question.questionUserAvatar,\\n                  \"isPublish\": question.isPublish\\n                }\\n              });\\n            }\\n          }\\n        }\\n\\n        var answers = meta.answer;\\n\\n        if (answers && answers.length) {\\n          answers.sort(function (p1, p2) {\\n            return parseInt(p1.time) - parseInt(p2.time);\\n          });\\n          callback.answers = answers;\\n\\n          for (var i = 0; i < callback.answers.length; i++) {\\n            var answer = answers[i];\\n\\n            if (typeof window.on_cc_live_qa_answer === \"function\") {\\n              window.on_cc_live_qa_answer({\\n                \"action\": \"answer\",\\n                \"value\": {\\n                  \"questionId\": answer.encryptId,\\n                  \"content\": answer.content,\\n                  \"userId\": answer.answerUserId,\\n                  \"isPrivate\": answer.isPrivate,\\n                  \"groupId\": answer.groupId,\\n                  \"userName\": answer.answerUserName,\\n                  \"userAvatar\": answer.answerUserAvatar,\\n                  \"userRole\": answer.answerUserRole\\n                }\\n              });\\n            }\\n          }\\n        }\\n\\n        var chatLogs = meta.chatLog;\\n        window.chatLogs = meta.chatLog;\\n\\n        if (chatLogs && chatLogs.length) {\\n          chatLogs.sort(function (p1, p2) {\\n            return parseInt(p1.time) - parseInt(p2.time);\\n          });\\n\\n          for (var i = 0; i < chatLogs.length; i++) {\\n            var chatLog = chatLogs[i];\\n\\n            if (typeof window.on_cc_live_chat_msg === \"function\") {\\n              window.on_cc_live_chat_msg({\\n                userid: chatLog.userId,\\n                username: chatLog.userName,\\n                time: chatLog.time,\\n                msg: chatLog.content,\\n                groupId: chatLog.groupId,\\n                chatId: chatLog.chatId,\\n                status: chatLog.status,\\n                useravatar: chatLog.userAvatar,\\n                userRole: chatLog.userRole,\\n                usercustommark: chatLog.userCustomMark,\\n                role: chatLog.role\\n              });\\n            }\\n          }\\n\\n          callback.chatLogs = chatLogs;\\n        }\\n\\n        if (window.chatLogs && window.chatLogs.length) {\\n          window.CHATLOGS = window.chatLogs;\\n          cc_live_callback_chat_interval();\\n        }\\n\\n        if (window.broadcasts && window.broadcasts.length) {\\n          //广播\\n          window.BROADCASTS = window.broadcasts;\\n          cc_live_callback_broadcasts_interval();\\n        }\\n      }\\n\\n      if (sub.requestDrawData) {\\n        var draws = meta.draw;\\n\\n        if (draws && draws.length) {\\n          callback.draws = draws;\\n        }\\n\\n        callback.isHistoryReady = true;\\n        callback.drawPanel.isReady = true;\\n        setTimeout(function () {\\n          initDrawPanelInfo();\\n        }, 1500);\\n      }\\n\\n      window.on_cc_h5_player_load = function () {\\n        callback.callbackPlayer.isReady = true;\\n\\n        if (onCCH5PlayerLoad) {\\n          return;\\n        }\\n\\n        onCCH5PlayerLoad = true;\\n        var playbackPanel = document.getElementById(\"drawPanel\");\\n\\n        if (playbackPanel) {\\n          $.Callback.config({\\n            playerId: \"playbackVideo\"\\n          }, meta);\\n        }\\n      };\\n    }\\n  }; //广播\\n\\n\\n  var BroadcastCache = function BroadcastCache() {\\n    this.cache = [];\\n    this.lastTimeRefresh = new Date().getTime();\\n    this.INTERVAL_TIME = setInterval(function () {\\n      callback.broadcastCache.refresh();\\n    }, 80); //\\n\\n    this.push = function (data) {\\n      // 缓存中超过5000条数据，则丢弃\\n      if (this.cache.length > 5000) {\\n        return;\\n      }\\n\\n      this.cache.push(data);\\n    };\\n\\n    this.ableRefresh = function () {\\n      var n = new Date().getTime();\\n\\n      if (this.cache.length == 0) {\\n        return false;\\n      }\\n\\n      if (n - this.lastTimeRefresh >= 80) {\\n        return true;\\n      }\\n\\n      return false;\\n    };\\n\\n    this.refresh = function () {\\n      if (!this.ableRefresh()) {\\n        return;\\n      }\\n\\n      clearInterval(this.INTERVAL_TIME);\\n      var d = [];\\n      var l = Math.min(this.cache.length, 10);\\n\\n      for (var i = 0; i < l; i++) {\\n        d.push(this.cache.shift());\\n      }\\n\\n      if (typeof window.on_cc_live_broadcast_msg_sync === \"function\") {\\n        window.on_cc_live_broadcast_msg_sync(d);\\n      }\\n\\n      this.lastTimeRefresh = new Date().getTime();\\n      this.INTERVAL_TIME = setInterval(function () {\\n        callback.broadcastCache.refresh();\\n      }, 80);\\n    };\\n  };\\n\\n  var ChatMessageCache = function ChatMessageCache() {\\n    this.cache = [];\\n    this.lastTimeRefresh = new Date().getTime();\\n    this.INTERVAL_TIME = setInterval(function () {\\n      callback.chatMessageCache.refresh();\\n    }, 80); //\\n\\n    this.push = function (data) {\\n      // 缓存中超过5000条数据，则丢弃\\n      if (this.cache.length > 5000) {\\n        return;\\n      }\\n\\n      this.cache.push(data);\\n    };\\n\\n    this.ableRefresh = function () {\\n      var n = new Date().getTime();\\n\\n      if (this.cache.length == 0) {\\n        return false;\\n      }\\n\\n      if (n - this.lastTimeRefresh >= 80) {\\n        return true;\\n      }\\n\\n      return false;\\n    };\\n\\n    this.refresh = function () {\\n      if (!this.ableRefresh()) {\\n        return;\\n      }\\n\\n      clearInterval(this.INTERVAL_TIME);\\n      var d = [];\\n      var l = Math.min(this.cache.length, 10);\\n\\n      for (var i = 0; i < l; i++) {\\n        d.push(this.cache.shift());\\n      }\\n\\n      if (typeof window.on_cc_live_chat_msg_sync === \"function\") {\\n        window.on_cc_live_chat_msg_sync(d);\\n      }\\n\\n      this.lastTimeRefresh = new Date().getTime();\\n      this.INTERVAL_TIME = setInterval(function () {\\n        callback.chatMessageCache.refresh();\\n      }, 80);\\n    };\\n  };\\n\\n  var Callback = function Callback(opts) {\\n    this.chatLogs = [];\\n    this.broadcasts = [];\\n    this.draws = [];\\n    this.pageChanges = []; // 获取历史数据成功\\n\\n    this.isHistoryReady = false;\\n    this.questions = [];\\n    this.answers = [];\\n    this.pageChanges = [];\\n    this.draws = [];\\n    this.animations = [];\\n    this.pageChangeIndex = -1;\\n    this.drawIndex = -1;\\n    this.animationIndex = -1;\\n    this.isRequestDraws = false; //this.callbackPlayer = new CallbackPlayer(opts);\\n    //this.socket = new Socket(opts);\\n\\n    this.drawPanel = new DrawPanel(opts, this);\\n    this.history = new History(opts, this);\\n    this.chatMessageCache = new ChatMessageCache(); //广播\\n\\n    this.broadcastCache = new BroadcastCache();\\n  };\\n\\n  var callback = {};\\n  window.debug = false;\\n  var util = {\\n    debug: window.debug,\\n    log: function log(arg1, arg2) {\\n      if (window.debug) {\\n        if (arg2) {\\n          console.log(arg1 + \" => \", arg2);\\n        } else {\\n          console.log(arg1);\\n        }\\n      }\\n    }\\n  };\\n  window.TIMEOUT = 5000;\\n  var options = {\\n    userId: $(\"#userId\").val(),\\n    roomId: $(\"#roomId\").val(),\\n    liveId: $(\"#liveId\").val(),\\n    recordId: $(\"#recordId\").val(),\\n    videoId: $(\"#videoId\").val(),\\n    adapt: false,\\n    isShowBar: 0,\\n    viewerId: $(\"#viewerId\").val(),\\n    upId: $(\"#upId\").val(),\\n    // 观看者用户信息\\n    viewer: {\\n      id: $(\"#viewerId\").val(),\\n      name: $(\"#viewerName\").val(),\\n      role: $(\"#viewerRole\").val(),\\n      sessionId: $(\"#sessionId\").val()\\n    },\\n    // 直播播放器信息\\n    callbackPlayer: {\\n      id: \"playbackPlayer\",\\n      width: \"100%\",\\n      height: \"100%\"\\n    },\\n    // 画板信息\\n    drawPanel: {\\n      id: \"playbackPanel\",\\n      width: \"100%\",\\n      height: \"100%\"\\n    }\\n  }; //极速文档模式\\n\\n  var DWDpc = {\\n    dpc: {},\\n    fastMode: false,\\n    init: function init() {\\n      this.dpc = new Dpc();\\n    },\\n    appendDrawPanel: function appendDrawPanel() {\\n      var dp = \"<iframe id=\\\\\"dpa\\\\\" allow-scripts allowfullscreen allowusermedia frameborder=\\\\\"0\\\\\" style=\\\\\"width: 100%;height:100%;\\\\\"></iframe>\";\\n\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        dp = \"<iframe id=\\\\\"dpa\\\\\" allow-scripts allowfullscreen allowusermedia frameborder=\\\\\"0\\\\\" style=\\\\\"width: 100%;height:100%;pointer-events: none;\\\\\"></iframe>\";\\n      }\\n\\n      $(\"#playbackPanel\").parent().append(dp);\\n      $(\"div#playbackPanel\").remove();\\n\\n      if (typeof window.on_cc_live_db_flip === \"function\") {\\n        window.on_cc_live_db_flip();\\n      }\\n    },\\n    pageChange: function pageChange(pc) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.pageChange(pc);\\n    },\\n    animationChange: function animationChange(ac) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.animationChange(ac);\\n    },\\n    history: function history(h) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.history(h);\\n    },\\n    draw: function draw(d) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.draw(d);\\n    },\\n    clear: function clear() {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      this.dpc.clear();\\n    },\\n    docAdapt: function docAdapt(t) {\\n      if (!this.fastMode) {\\n        return;\\n      }\\n\\n      var displayMode = t ? \\'1\\' : \\'2\\';\\n      this.dpc.setDisplayMode(displayMode);\\n    }\\n  };\\n\\n  function init(opts) {\\n    options.viewerId = opts.viewerid;\\n    options = $.extend(options, opts);\\n    callback = new Callback(options);\\n  }\\n\\n  var DW = {\\n    isH5play: false,\\n    fastMode: false,\\n    forceNew: false,\\n    setFastMode: function setFastMode(opts) {\\n      if (typeof opts.fastMode == \"string\") {\\n        if (opts.fastMode === \"false\") {\\n          this.fastMode = false;\\n        } else {\\n          this.fastMode = true;\\n        }\\n      } else if (typeof opts.fastMode == \"boolean\") {\\n        this.fastMode = opts.fastMode;\\n      } else {\\n        this.fastMode = false;\\n      }\\n    },\\n    // 初始化DW对象\\n    config: function config(opts) {\\n      if (checkVideo()) {\\n        if (opts.isH5play + \"\" === \"true\") {\\n          this.isH5play = true;\\n        } else {\\n          this.isH5play = false;\\n        }\\n      }\\n\\n      this.setFastMode(opts);\\n      DWDpc.fastMode = this.fastMode;\\n      var scriptArray = [\"//static.csslcloud.net/js/socket.io.js\", \"//static.csslcloud.net/js/swfobject.js\", \"//image.csslcloud.net/js/dpc.js?v=20180121\", \"//static.csslcloud.net/js/json3.min.js\", \"//static.csslcloud.net/js/module/drawingBoard-2.0.0.js\", \"//static.csslcloud.net/js/module/drawingBoardPlayback.js\", \"//static.csslcloud.net/js/report.js\"];\\n\\n      if (DWDpc.fastMode) {\\n        scriptArray.splice(3, 2);\\n      }\\n\\n      this.loadScript(scriptArray, function () {\\n        init(opts);\\n\\n        if (MobileLive.isMobile() == \"isMobile\" && $.DrawingBoard && !DWDpc.fastMode) {\\n          DW.appendDrawPanel();\\n        }\\n      });\\n\\n      if (typeof opts.forceNew === \"boolean\") {\\n        this.forceNew = opts.forceNew;\\n      }\\n    },\\n    appendDrawPanel: function appendDrawPanel() {\\n      var dp = \"<canvas id=\\\\\"drawPanel\\\\\" width=\\\\\"1200\\\\\" height=\\\\\"1200\\\\\" style=\\\\\"position: absolute;z-index:2;top:0;left: 0\\\\\"></canvas>\" + \"<iframe id=\\\\\"dpa\\\\\" src=\\\\\"\\\\\" frameborder=\\\\\"0\\\\\" style=\\\\\"position: absolute;top:0;left: 0\\\\\"></iframe>\";\\n      $(\"#playbackPanel\").parent().append(dp);\\n      $(\"div#playbackPanel\").remove();\\n    },\\n    logout: function logout() {\\n      $.ajax({\\n        url: \"//view.csslcloud.net/api/callback/logout\",\\n        type: \"GET\",\\n        dataType: \"json\",\\n        timeout: 5000,\\n        xhrFields: {\\n          withCredentials: true\\n        },\\n        success: function success(data) {},\\n        error: function error(xhr, status, _error) {}\\n      });\\n    },\\n    getScript: function getScript(url, success) {\\n      var readyState = false,\\n          script = document.createElement(\"script\");\\n      script.src = url;\\n\\n      script.onload = script.onreadystatechange = function () {\\n        if (!readyState && (!this.readyState || this.readyState == \"loaded\" || this.readyState == \"complete\")) {\\n          readyState = true;\\n          success && success();\\n        }\\n      };\\n\\n      document.body.appendChild(script);\\n    },\\n    loadScript: function loadScript(res, callback) {\\n      if (typeof res === \"string\") {\\n        var _res = res;\\n        res = [];\\n        res.push(_res);\\n      }\\n\\n      var _this = this,\\n          queue = function queue(fs, cb) {\\n        _this.getScript(fs.shift(), function () {\\n          fs.length ? queue(fs, cb) : cb && cb();\\n        });\\n      };\\n\\n      queue(res, callback);\\n    },\\n    playbackRate: function playbackRate(t) {\\n      callback.callbackPlayer.playbackRate(t);\\n    },\\n    seek: function seek(t) {\\n      clearInterval(callback.drawPanel.intervalNum);\\n      callback.callbackPlayer.seek(t);\\n    },\\n    getPlayerTime: function getPlayerTime() {\\n      return callback.callbackPlayer.getPlayerTime();\\n    },\\n    getDuration: function getDuration() {\\n      if (DW.isH5play) {\\n        return MobileLive.getDuration();\\n      } else if (MobileLive.isMobile() == \"isMobile\") {\\n        return MobileLive.getDuration();\\n      } else {\\n        return callback.callbackPlayer.getDuration();\\n      }\\n    },\\n    docAdapt: function docAdapt(t) {\\n      if (DWDpc.fastMode) {\\n        DWDpc.docAdapt(t);\\n      }\\n\\n      options.adapt = t;\\n    },\\n    isShowBar: function isShowBar(n) {\\n      options.isShowBar = n;\\n    },\\n    getBuffer: function getBuffer() {\\n      return callback.callbackPlayer.getBuffer();\\n    },\\n    setVolume: function setVolume(n) {\\n      return callback.callbackPlayer.setVolume(n);\\n    },\\n    getVolume: function getVolume() {\\n      return callback.callbackPlayer.getVolume();\\n    },\\n    play: function play() {\\n      return callback.callbackPlayer.play();\\n    },\\n    setZScale: function setZScale(s) {\\n      return callback.callbackPlayer.setZScale(s);\\n    },\\n    getZScale: function getZScale() {\\n      return callback.callbackPlayer.getZScale();\\n    },\\n    setScale: function setScale(s) {\\n      return callback.callbackPlayer.setScale(s);\\n    },\\n    getScale: function getScale() {\\n      return callback.callbackPlayer.getScale();\\n    },\\n    openSettingPanel: function openSettingPanel() {\\n      return callback.callbackPlayer.openSettingPanel();\\n    }\\n  };\\n  $.extend({\\n    DW: DW\\n  });\\n\\n  function isLivePlayerReady() {\\n    if (!callback.callbackPlayer.isReady) {\\n      setTimeout(function () {\\n        isLivePlayerReady();\\n      }, 500);\\n      return;\\n    }\\n\\n    callback.drawPanel.intervalPainting(callback);\\n  } // 初始化画板数据\\n\\n\\n  function initDrawPanelInfo() {\\n    // 等待历史数据加载成功\\n    if (!callback.isHistoryReady) {\\n      setTimeout(function () {\\n        initDrawPanelInfo();\\n      }, 300);\\n      return;\\n    }\\n\\n    isLivePlayerReady();\\n  }\\n\\n  window.on_cc_callback_player = function (data) {\\n    options.videoId = data.live.encryptRecordvideoId;\\n    options.recordId = data.encryptRecordId;\\n    callback.callbackPlayer = new CallbackPlayer(options);\\n  }; // 播放器加载完成，开始播放\\n\\n\\n  window.on_cc_live_player_init = function () {\\n    callback.callbackPlayer.isReady = true;\\n\\n    try {\\n      callback.callbackPlayer.getFlash().start();\\n    } catch (e) {} // 同时开始实时显示聊天信息\\n\\n\\n    setInterval(function () {\\n      var ft = 0;\\n\\n      try {\\n        ft = callback.callbackPlayer.getPlayerTime();\\n      } catch (e) {}\\n\\n      if (ft <= 0) {\\n        return;\\n      }\\n\\n      if (!callback.chatLogs.length) {\\n        return;\\n      }\\n\\n      var chatLog = callback.chatLogs[0];\\n\\n      while (chatLog.time <= ft) {\\n        chatLog = callback.chatLogs.shift();\\n        callback.chatMessageCache.push({\\n          userid: chatLog.userId,\\n          username: chatLog.userName,\\n          time: chatLog.time,\\n          msg: chatLog.content,\\n          groupId: chatLog.groupId,\\n          chatId: chatLog.chatId,\\n          status: chatLog.status,\\n          useravatar: chatLog.userAvatar,\\n          userRole: chatLog.userRole,\\n          usercustommark: chatLog.userCustomMark,\\n          role: chatLog.role\\n        });\\n\\n        if (!callback.chatLogs.length) {\\n          break;\\n        }\\n\\n        chatLog = callback.chatLogs[0];\\n      }\\n    }, 1000); // 同时开始实时显示广播\\n\\n    setInterval(function () {\\n      var ft = 0;\\n\\n      try {\\n        ft = callback.callbackPlayer.getPlayerTime();\\n      } catch (e) {}\\n\\n      if (ft <= 0) {\\n        return;\\n      }\\n\\n      if (!callback.broadcasts.length) {\\n        return;\\n      }\\n\\n      var broadcast = callback.broadcasts[0];\\n\\n      while (broadcast.time <= ft) {\\n        broadcast = callback.broadcasts.shift();\\n        callback.broadcastCache.push({\\n          content: broadcast.content,\\n          time: broadcast.time\\n        });\\n\\n        if (!callback.broadcasts.length) {\\n          break;\\n        }\\n\\n        broadcast = callback.broadcasts[0];\\n      }\\n    }, 1000);\\n\\n    if (typeof window.on_cc_live_player_load === \"function\") {\\n      window.on_cc_live_player_load();\\n    }\\n\\n    if (on_cc_limit_request_draws) {\\n      var duration = parseInt(callback.callbackPlayer.getDuration());\\n\\n      if (duration) {\\n        on_cc_limit_request_draws && on_cc_limit_request_draws();\\n      } else {\\n        ListenerDuration && ListenerDuration();\\n      }\\n    }\\n  };\\n\\n  function cc_live_callback_chat_interval() {\\n    setInterval(function () {\\n      var ft = 0;\\n\\n      try {\\n        ft = parseInt($(\"#playbackVideo\")[0].currentTime, 10);\\n      } catch (e) {}\\n\\n      if (ft <= 0) {\\n        return;\\n      }\\n\\n      if (!window.CHATLOGS.length) {\\n        return;\\n      }\\n\\n      var chatLog = window.CHATLOGS[0];\\n\\n      while (chatLog.time <= ft) {\\n        var cl = window.CHATLOGS.shift();\\n        callback.chatMessageCache.push({\\n          userid: cl.userId,\\n          username: cl.userName,\\n          time: cl.time,\\n          msg: cl.content,\\n          groupId: cl.groupId,\\n          useravatar: cl.userAvatar,\\n          userRole: cl.userRole,\\n          chatId: chatLog.chatId,\\n          status: chatLog.status,\\n          usercustommark: cl.userCustomMark,\\n          role: cl.role\\n        });\\n\\n        if (!window.CHATLOGS.length) {\\n          break;\\n        }\\n\\n        chatLog = window.CHATLOGS[0];\\n      }\\n    }, 1000);\\n  }\\n\\n  function cc_live_callback_broadcasts_interval() {\\n    setInterval(function () {\\n      var ft = 0;\\n\\n      try {\\n        ft = parseInt($(\"#playbackVideo\")[0].currentTime, 10);\\n      } catch (e) {}\\n\\n      if (ft <= 0) {\\n        return;\\n      } //广播\\n\\n\\n      if (!window.BROADCASTS.length) {\\n        return;\\n      }\\n\\n      var broadcast = window.BROADCASTS[0];\\n\\n      while (broadcast.time <= ft) {\\n        var bc = window.BROADCASTS.shift();\\n        callback.broadcastCache.push({\\n          content: bc.content,\\n          time: bc.time\\n        });\\n\\n        if (!window.BROADCASTS.length) {\\n          break;\\n        }\\n\\n        broadcast = window.BROADCASTS[0];\\n      }\\n    }, 1000);\\n  } // 画板Flash加载完成回调\\n\\n\\n  window.on_drampanel_ready = function () {\\n    callback.drawPanel.isReady = true;\\n    setTimeout(function () {\\n      initDrawPanelInfo();\\n    }, 1500);\\n  };\\n\\n  window.seekStart = function () {\\n    clearInterval(callback.drawPanel.intervalNum);\\n  }; // 拖动时间轴或跳动播放成功后回调函数\\n\\n\\n  window.seekComplete = function () {\\n    callback.drawPanel.clear(); //clearInterval(callback.drawPanel.intervalNum);\\n\\n    var ft = callback.callbackPlayer.getPlayerTime();\\n\\n    if (ft < 0) {\\n      ft = 0;\\n    }\\n\\n    callback.pageChangeIndex = -1;\\n    callback.drawIndex = -1;\\n    callback.animationIndex = -1;\\n    var meta = {\\n      pageChange: [],\\n      animation: [],\\n      draw: []\\n    };\\n\\n    if (callback.pageChanges && callback.pageChanges.length > 0) {\\n      for (var i = 0; i < callback.pageChanges.length; i++) {\\n        var pc = callback.pageChanges[i];\\n\\n        if (ft >= pc.time) {\\n          callback.pageChangeIndex = i;\\n        }\\n      }\\n\\n      if (callback.pageChangeIndex >= 0) {\\n        var pc = callback.pageChanges[callback.pageChangeIndex];\\n\\n        if (typeof window.on_cc_callback_page_change === \"function\") {\\n          window.on_cc_callback_page_change(pc);\\n        }\\n\\n        if (typeof window.on_cc_request_snapshoot === \"function\") {\\n          window.on_cc_request_snapshoot(pc);\\n        }\\n\\n        callback.drawPanel.filp(JSON.stringify({\\n          \"fileName\": pc.docName,\\n          \"totalPage\": pc.docTotalPage,\\n          \"docid\": pc.encryptDocId,\\n          \"url\": pc.url,\\n          \"page\": pc.pageNum,\\n          \"useSDK\": pc.useSDK\\n        }));\\n        meta.pageChange.push(pc);\\n      }\\n    }\\n\\n    if (callback.animations && callback.animations.length > 0) {\\n      for (var i = 0; i < callback.animations.length; i++) {\\n        var a = callback.animations[i];\\n\\n        if (ft >= a.time) {\\n          callback.animationIndex = i;\\n        }\\n      }\\n\\n      if (callback.animationIndex >= 0) {\\n        var pidex = callback.pageChangeIndex;\\n\\n        if (pidex >= 0) {\\n          var pc = callback.pageChanges[pidex];\\n          var a = callback.animations[callback.animationIndex];\\n\\n          if (!!pc && !!a && pc.encryptDocId == a.encryptDocId && ft >= a.time && pc.time <= a.time) {\\n            callback.drawPanel.animation(JSON.stringify({\\n              \"fileName\": a.docName,\\n              \"totalPage\": a.docTotalPage,\\n              \"docid\": a.encryptDocId,\\n              \"url\": a.url,\\n              \"page\": a.pageNum,\\n              \"step\": a.step\\n            }));\\n            meta.animation.push(a);\\n          }\\n        }\\n      }\\n    }\\n\\n    if (callback.draws && callback.draws.length > 0) {\\n      for (var i = 0; i < callback.draws.length; i++) {\\n        var dc = callback.draws[i];\\n\\n        if (dc) {\\n          if (ft >= dc.time) {\\n            //callback.drawPanel.draw(dc.data);\\n            callback.drawIndex = i;\\n          }\\n        }\\n      }\\n\\n      var ds = callback.draws.slice(0, callback.drawIndex + 1);\\n\\n      if (ds.length > 0) {\\n        var dcdatas = [];\\n\\n        for (var i = 0; i < ds.length; i++) {\\n          var dc = ds[i];\\n          dcdatas.push(dc.data);\\n          meta.draw.push(dc);\\n        }\\n\\n        callback.drawPanel.draws(dcdatas);\\n      }\\n    }\\n\\n    DWDpc.history(meta);\\n    callback.drawPanel.intervalNum = setInterval(function () {\\n      callback.drawPanel.interval();\\n    }, 1000);\\n  }; //事件兼容处理\\n\\n\\n  var Event = {};\\n\\n  Event.addEvents = function (target, eventType, handle) {\\n    if (document.addEventListener) {\\n      Event.addEvents = function (target, eventType, handle) {\\n        target.addEventListener(eventType, handle, false);\\n      };\\n    } else {\\n      Event.addEvents = function (target, eventType, handle) {\\n        target.attachEvent(\"on\" + eventType, function () {\\n          handle.call(target, arguments);\\n        });\\n      };\\n    }\\n\\n    ;\\n    Event.addEvents(target, eventType, handle);\\n  }; //video兼容处理\\n\\n\\n  function checkVideo() {\\n    if (!!document.createElement(\"video\").canPlayType) {\\n      var vidTest = document.createElement(\"video\");\\n      oggTest = vidTest.canPlayType(\"video/ogg; codecs=\\\\\"theora, vorbis\\\\\"\");\\n\\n      if (!oggTest) {\\n        h264Test = vidTest.canPlayType(\"video/mp4; codecs=\\\\\"avc1.42E01E, mp4a.40.2\\\\\"\");\\n\\n        if (!h264Test) {\\n          return false;\\n        } else {\\n          if (h264Test == \"probably\") {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        }\\n      } else {\\n        if (oggTest == \"probably\") {\\n          return true;\\n        } else {\\n          return false;\\n        }\\n      }\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  var beforeTime = 0;\\n  var nextTime = 0; // var skipOnceSeek = false;\\n\\n  var isCustomSeek = true;\\n  var MobileLive = {\\n    pauseState: false,\\n    init: function init(opts) {\\n      var _this = this;\\n\\n      $.ajax({\\n        url: \"//view.csslcloud.net/api/vod/v2/play/h5\",\\n        type: \"GET\",\\n        dataType: \"jsonp\",\\n        data: {\\n          userid: opts.userId,\\n          roomid: opts.roomId,\\n          recordid: opts.recordId\\n        },\\n        success: function success(data) {\\n          var pvdefault = data.video[0];\\n          var playurl = pvdefault.playurl;\\n          var secureplayurl = pvdefault.secureplayurl;\\n          var isHttps = window.location.protocol === \"https:\";\\n\\n          if (isHttps && !!secureplayurl) {\\n            playurl = secureplayurl;\\n          }\\n\\n          _this.appendVideo(playurl, opts);\\n        }\\n      });\\n    },\\n    appendVideo: function appendVideo(s, opts) {\\n      var _this = this;\\n\\n      var v = \"<video id=\\\\\"playbackVideo\\\\\" webkit-playsinline playsinline controls autoplay x-webkit-airplay=\\\\\"deny\\\\\" x5-playsinline width=\\\\\"100%\\\\\" height=\\\\\"100%\\\\\" src=\\\\\"\" + s + \"\\\\\"></video>\";\\n      $(\"#\" + playbackPlayer.id).html(v);\\n      var video = document.getElementById(\"playbackVideo\");\\n\\n      if (opts.isShowBar) {\\n        video.removeAttribute(\"controls\");\\n      }\\n\\n      var isMobie = 0;\\n      var ua = 1;\\n\\n      if (MobileLive.isMobile() == \"isMobile\") {\\n        isMobie = 1;\\n        ua = 11;\\n      }\\n\\n      var report = new ReportLog(opts, isMobie, ua, video, false);\\n\\n      if (!this.isAndroid()) {\\n        this.pauseState = true;\\n      }\\n\\n      Event.addEvents(video, \"canplay\", function () {\\n        if (MobileLive.isMobile() == \"isMobile\") {\\n          window.on_cc_live_player_load && window.on_cc_live_player_load();\\n          window.on_cc_h5_player_load && window.on_cc_h5_player_load();\\n        } else if (DW.isH5play) {\\n          window.on_cc_live_player_init && window.on_cc_live_player_init();\\n        }\\n\\n        if (on_cc_limit_request_draws) {\\n          var duration = parseInt(callback.callbackPlayer.getDuration());\\n\\n          if (duration) {\\n            on_cc_limit_request_draws && on_cc_limit_request_draws();\\n          } else {\\n            ListenerDuration && ListenerDuration();\\n          }\\n        }\\n      }, false);\\n      Event.addEvents(video, \"playing\", function () {\\n        _this.pauseState = false;\\n        window.on_player_start && on_player_start();\\n        window.on_spark_player_resume && on_spark_player_resume();\\n      }, false);\\n      Event.addEvents(video, \"pause\", function () {\\n        _this.pauseState = true;\\n        window.on_spark_player_pause && on_spark_player_pause();\\n      }, false);\\n      Event.addEvents(video, \"ended\", function () {\\n        window.on_spark_player_end && on_spark_player_end();\\n      }, false);\\n      Event.addEvents(video, \"seeking\", function () {\\n        isCustomSeek = false;\\n        seekStart && seekStart();\\n      }, false);\\n      Event.addEvents(video, \"seeked\", function () {\\n        isCustomSeek = false;\\n        seekComplete && seekComplete();\\n      }, false);\\n    },\\n    getDuration: function getDuration() {\\n      var v = document.getElementById(\"playbackVideo\");\\n\\n      if (!v) {\\n        return;\\n      }\\n\\n      return Math.floor(v.duration);\\n    },\\n    getPlayerTime: function getPlayerTime() {\\n      var v = document.getElementById(\"playbackVideo\");\\n\\n      if (!v) {\\n        return;\\n      }\\n\\n      return Math.floor(v.currentTime);\\n    },\\n    end: function end() {\\n      $(\"#\" + playbackPlayer.id).html(\"end\");\\n    },\\n    appendDoc: function appendDoc(s) {\\n      var img = \"<img src=\\\\\"\" + s + \"\\\\\" />\";\\n      $(\"#\" + playbackPanel.id).append(img);\\n    },\\n    isMobile: function isMobile() {\\n      if (this.isIPad() || this.isIPhone() || this.isAndroid() || this.isWindowsPhone()) {\\n        return \"isMobile\";\\n      }\\n    },\\n    isIPad: function isIPad() {\\n      return navigator.userAgent.match(/iPad/i) != null;\\n    },\\n    isIPhone: function isIPhone() {\\n      return navigator.userAgent.match(/iPhone/i) != null;\\n    },\\n    isAndroid: function isAndroid() {\\n      return navigator.userAgent.match(/Android/i) != null;\\n    },\\n    isWindowsPhone: function isWindowsPhone() {\\n      return navigator.userAgent.match(/Windows Phone/i) != null;\\n    }\\n  };\\n}(jQuery, window, document, undefined);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///11\\n')}});","extractedComments":[]}