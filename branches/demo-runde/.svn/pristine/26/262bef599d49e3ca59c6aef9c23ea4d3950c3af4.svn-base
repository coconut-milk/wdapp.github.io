<template>
  <transition
    enter-active-class="animated slideInLeft"
    :duration="duration"
    @leave="leave"
    @after-leave="afterLeave"
  >
    <div
      class="tip-wrapper"
      v-if="tip.show"
    >
      <div class="left">
        <p class="tip-name">
          {{tip.name}}
        </p>
        <p class="tip-content">
          {{tip.content}}
        </p>
      </div>
      <div class="right">
        <img class="tip-img" :src="tip.imgSrc"/>
        <span class="tip-multiple">
          {{tip.multiple}}
        </span>
        <span class="tip-number">
          {{animatedNumber}}
        </span>
      </div>
    </div>
  </transition>
</template>

<script>
import {TweenLite} from 'gsap/TweenMax'

export default {
  name: 'Slide',
  props: {
    option: {
      type: Object,
      default () {
        return {}
      }
    }
  },
  data () {
    return {
      options: [],
      timer: 0,
      interval: 2000,
      timeout: 1400,
      duration: 500,
      tip: {
        show: false,
        name: '',
        content: '',
        imgSrc: '',
        multiple: '',
        number: 0
      },
      number: 0,
      tweenedNumber: 0
    }
  },
  computed: {
    animatedNumber: function () {
      return this.tweenedNumber.toFixed(0)
    }
  },
  watch: {
    option () {
      this.options.push(this.option)
      this.startTimer()
    },
    number: function (newValue) {
      if (!newValue) {
        return false
      }
      TweenLite.to(this.$data, 0.5, {tweenedNumber: newValue, delay: this.duration / 1000})
    }
  },
  methods: {
    startTimer () {
      if (this.timer) {
        return false
      }
      this.timeupdate()
      this.timer = setInterval(() => {
        this.timeupdate()
      }, this.interval)
    },
    stopTimer () {
      clearInterval(this.timer)
      this.timer = 0
    },
    timeupdate () {
      if (!this.options.length) {
        this.stopTimer()
      } else {
        const option = this.options.pop()
        this.tip = {
          show: true,
          name: option.name,
          content: option.content,
          imgSrc: option.imgSrc,
          multiple: option.multiple,
          number: option.number
        }
        this.number = this.tip.number
        setTimeout(() => {
          this.tip.show = false
        }, this.timeout)
      }
    },
    leave: function (el, done) {
      done()
    },
    afterLeave: function (el) {
      this.number = 0
      this.tweenedNumber = 0
    }
  }
}
</script>

<style lang="stylus" scoped>
  @import "~styles/mixins.styl"

  .tip-wrapper
    border-radius 0px 34px 34px 0px; /*no*/
    width 365px
    height 68px
    background linear-gradient(90deg, rgba(255, 113, 129, 1) 0%, rgba(255, 81, 81, 1) 100%)
    padding-left 28px
    box-sizing border-box
    .left
      float left
      height 100%
      width 160px
      .tip-name
        width 100%
        ellipsis()
        baseTextStyle(22px, $baseWhiteColor)
        margin-top 10px
      .tip-content
        width 100%
        ellipsis()
        baseTextStyle(16px, $baseWhiteColor)
        margin-top 10px
    .right
      float left
      height 100%
      font-size 28px
      font-family Arial
      font-weight 800
      font-style italic
      color rgba(255, 255, 255, 1)
      -webkit-text-stroke 2px #FF454B; /*no*/
      text-stroke 2px #FF454B; /*no*/
      line-height 48px
      .tip-img
        width-height-same(68px)
        vertical-align middle
        margin-right 12px
      .tip-multiple
        vertical-align middle
      .tip-number
        vertical-align middle
</style>
