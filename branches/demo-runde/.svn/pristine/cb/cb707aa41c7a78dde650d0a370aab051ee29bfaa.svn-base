<template>
  <div class="wrapper">
    <div class="top">
      <main-windows :component="toggleMainSubComponent(windows.toggle)">
        <live-controls :isSubShow="windows.show" @switch="onControlSwitch" @open="onControlOpen"
                       slot="controls"></live-controls>
      </main-windows>
    </div>
    <div class="center">
      <live-panel
        :show="panel.show"
        :showSubWindows="panel.showSubWindows"
        :name="panel.name"
        :number="panel.number"
      ></live-panel>
    </div>
    <div class="bottom">
      <common-swiper
        :options="swiper.options"
        :disabled="swiper.disabled"
        :navigation="swiper.navigation"
      >
        <live-chats slot="chats"></live-chats>
        <live-lists slot="lists"></live-lists>
        <live-introduce slot="introduce"></live-introduce>
      </common-swiper>
    </div>
    <common-popup :show="popup.show" @closed="onClosed">
      <component :is="popup.component"></component>
    </common-popup>
    <sub-windows
      :type="windows.type"
      :show="windows.show"
      :closeable="windows.closeable"
      :component="toggleMainSubComponent(!windows.toggle)"
      @close="onSubClose"
    ></sub-windows>
  </div>
</template>

<script>
import MainWindows from "./components/windows/MainWindows";
import SubWindows from "./components/windows/SubWindows";
import LivePanel from "./components/panel/Index";
import LiveControls from "./components/controls/Controls";
import LiveChats from "./components/chats/Chats";
import LiveLists from "./components/lists/Lists";
import LiveIntroduce from "./components/introduce/Introduce";
import CommonSwiper from "components/swiper/Swiper";
import CommonPopup from "components/popup/Popup";
import CommonCurriculum from "components/curriculum/Curriculum";
import CommonGifts from "components/gifts/Gifts";
import CommonReward from "components/reward/Reward";
import HuodeScene from "common/websdk/live";
import { log } from "common/utils";

export default {
  name: "Live",
  components: {
    MainWindows,
    SubWindows,
    LivePanel,
    LiveControls,
    LiveChats,
    LiveLists,
    LiveIntroduce,
    CommonSwiper,
    CommonPopup,
    CommonCurriculum,
    CommonGifts,
    CommonReward
  },
  data() {
    return {
      windows: {
        mainComponent: "LivePlayer",
        subComponent: "LiveDocument",
        type: "public", //公开课 public 专题课 special
        toggle: true,
        show: true,
        closeable: true
      },
      panel: {
        show: true,
        showSubWindows: true,
        name: "王波波老师王波波老师王波波老师王波波老师",
        number: 9999999999999
      },
      swiper: {
        disabled: true,
        navigation: false,
        options: [
          {
            name: "chats",
            title: "聊天"
          },
          {
            name: "lists",
            title: "直播目录"
          },
          {
            name: "introduce",
            title: "讲师介绍"
          }
        ]
      },
      popup: {
        show: false,
        component: ""
      }
    };
  },
  methods: {
    init() {
      this.hd = new HuodeScene();
      this.login();
      this.onEvents();
    },
    on(event, callback) {
      this.bus.$on(event, params => {
        callback && callback(params);
      });
    },
    onEvents() {
      this.on("curriculumclick", options => {
        this.showPopup(options);
      });
      this.on("giftsclick", options => {
        this.showPopup(options);
      });
      this.on("rewardclick", options => {
        this.showPopup(options);
      });
    },
    showPopup(options) {
      this.popup.show = true;
      this.popup.component = options.component;
    },
    onClosed() {
      this.popup.show = false;
    },
    toggleMainSubComponent(toggle) {
      const _toggle = toggle;
      const main = this.windows.mainComponent;
      const sub = this.windows.subComponent;
      const is = _toggle ? main : sub;
      return is;
    },
    login() {
      this.hd.login({
        userId: "7848DB3FB422057F",
        roomId: "F2164D83B191B0049C33DC5901307461",
        viewerName: "获得场景视频",
        viewerToken: "",
        success: result => {
          this.configPlayerAndDocument();
          log("onLoginSuccess", result);
          this.$notify({ type: "success", message: "登录成功" });
        },
        fail: error => {
          log("onLoginError", error);
          this.$notify({ type: "danger", message: "登录失败" });
        }
      });
    },
    configPlayerAndDocument() {
      this.hd.showControl(false);
      this.hd.docAdapt(true);
    },
    onControlSwitch(toggle) {
      this.windows.toggle = toggle;
    },
    onControlOpen() {
      this.windows.show = true;
    },
    onSubClose() {
      this.windows.show = false;
    }
  },
  mounted() {
    this.init();
  }
};
</script>

<style lang="stylus" scoped>
@import '~styles/mixins.styl'

.wrapper
  wrapper()
  position absolute
  display flex
  flex-direction column
  .top
    height 462px
  .center
    height auto
  .bottom
    position relative
    flex 1
</style>
